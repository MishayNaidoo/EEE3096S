
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003630  08003630  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003630  08003630  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003630  08003630  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  080036a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080036a8  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c417  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cec  00000000  00000000  0002c4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f4d  00000000  00000000  0002f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d058  00000000  00000000  000413e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a1b3  00000000  00000000  0004e43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b85f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002640  00000000  00000000  000b8640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003554 	.word	0x08003554

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003554 	.word	0x08003554

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b083      	sub	sp, #12
 8000238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fbeb 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f8ed 	bl	800041c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000242:	f000 f85d 	bl	8000300 <MX_I2C1_Init>
  MX_DMA_Init();
 8000246:	f000 f8cb 	bl	80003e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800024a:	f000 f899 	bl	8000380 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
	//TO DO:
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800024e:	2380      	movs	r3, #128	; 0x80
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	4a24      	ldr	r2, [pc, #144]	; (80002e4 <main+0xb0>)
 8000254:	0019      	movs	r1, r3
 8000256:	0010      	movs	r0, r2
 8000258:	f001 f853 	bl	8001302 <HAL_GPIO_TogglePin>
	//TASK 6

	//sprintf(buffer, "%s \r\n", "hello");


	getTime();
 800025c:	f000 f970 	bl	8000540 <getTime>
	sprintf (buffer, "%02d:%02d:%02d\r\n\r\n", time.hour, time.minutes, time.seconds);
 8000260:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <main+0xb4>)
 8000262:	789b      	ldrb	r3, [r3, #2]
 8000264:	001a      	movs	r2, r3
 8000266:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <main+0xb4>)
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	001c      	movs	r4, r3
 800026c:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <main+0xb4>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	491e      	ldr	r1, [pc, #120]	; (80002ec <main+0xb8>)
 8000272:	481f      	ldr	r0, [pc, #124]	; (80002f0 <main+0xbc>)
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	0023      	movs	r3, r4
 8000278:	f002 fd02 	bl	8002c80 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800027c:	23fa      	movs	r3, #250	; 0xfa
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	491b      	ldr	r1, [pc, #108]	; (80002f0 <main+0xbc>)
 8000282:	481c      	ldr	r0, [pc, #112]	; (80002f4 <main+0xc0>)
 8000284:	220e      	movs	r2, #14
 8000286:	f001 fd7f 	bl	8001d88 <HAL_UART_Transmit>



	sprintf (buffer, "%02d-%02d-20%02d\r\n\r\n", time.dayofmonth, time.month, time.year);
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <main+0xb4>)
 800028c:	791b      	ldrb	r3, [r3, #4]
 800028e:	001a      	movs	r2, r3
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0xb4>)
 8000292:	795b      	ldrb	r3, [r3, #5]
 8000294:	001c      	movs	r4, r3
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <main+0xb4>)
 8000298:	799b      	ldrb	r3, [r3, #6]
 800029a:	4917      	ldr	r1, [pc, #92]	; (80002f8 <main+0xc4>)
 800029c:	4814      	ldr	r0, [pc, #80]	; (80002f0 <main+0xbc>)
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	0023      	movs	r3, r4
 80002a2:	f002 fced 	bl	8002c80 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80002a6:	23fa      	movs	r3, #250	; 0xfa
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4911      	ldr	r1, [pc, #68]	; (80002f0 <main+0xbc>)
 80002ac:	4811      	ldr	r0, [pc, #68]	; (80002f4 <main+0xc0>)
 80002ae:	220e      	movs	r2, #14
 80002b0:	f001 fd6a 	bl	8001d88 <HAL_UART_Transmit>


	sprintf (buffer, "%d\r\n\r\n", epochFromTime(time));
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <main+0xb4>)
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	6859      	ldr	r1, [r3, #4]
 80002ba:	f000 f999 	bl	80005f0 <epochFromTime>
 80002be:	0002      	movs	r2, r0
 80002c0:	490e      	ldr	r1, [pc, #56]	; (80002fc <main+0xc8>)
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <main+0xbc>)
 80002c4:	0018      	movs	r0, r3
 80002c6:	f002 fcdb 	bl	8002c80 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4908      	ldr	r1, [pc, #32]	; (80002f0 <main+0xbc>)
 80002d0:	4808      	ldr	r0, [pc, #32]	; (80002f4 <main+0xc0>)
 80002d2:	220e      	movs	r2, #14
 80002d4:	f001 fd58 	bl	8001d88 <HAL_UART_Transmit>


		  HAL_Delay(1000);
 80002d8:	23fa      	movs	r3, #250	; 0xfa
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fbfd 	bl	8000adc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80002e2:	e7b4      	b.n	800024e <main+0x1a>
 80002e4:	48000800 	.word	0x48000800
 80002e8:	200001b0 	.word	0x200001b0
 80002ec:	0800356c 	.word	0x0800356c
 80002f0:	200001a0 	.word	0x200001a0
 80002f4:	200000d8 	.word	0x200000d8
 80002f8:	08003580 	.word	0x08003580
 80002fc:	08003598 	.word	0x08003598

08000300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <MX_I2C1_Init+0x74>)
 8000306:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <MX_I2C1_Init+0x78>)
 8000308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <MX_I2C1_Init+0x74>)
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <MX_I2C1_Init+0x7c>)
 800030e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_I2C1_Init+0x74>)
 8000318:	2201      	movs	r2, #1
 800031a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_I2C1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_I2C1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_I2C1_Init+0x74>)
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fffb 	bl	8001338 <HAL_I2C_Init>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000346:	f000 f9d9 	bl	80006fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_I2C1_Init+0x74>)
 800034c:	2100      	movs	r1, #0
 800034e:	0018      	movs	r0, r3
 8000350:	f001 fbaa 	bl	8001aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000358:	f000 f9d0 	bl	80006fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <MX_I2C1_Init+0x74>)
 800035e:	2100      	movs	r1, #0
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fbed 	bl	8001b40 <HAL_I2CEx_ConfigDigitalFilter>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800036a:	f000 f9c7 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	2000008c 	.word	0x2000008c
 8000378:	40005400 	.word	0x40005400
 800037c:	2000090e 	.word	0x2000090e

08000380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 8000386:	4a15      	ldr	r2, [pc, #84]	; (80003dc <MX_USART2_UART_Init+0x5c>)
 8000388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800038a:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 800038c:	2296      	movs	r2, #150	; 0x96
 800038e:	0192      	lsls	r2, r2, #6
 8000390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <MX_USART2_UART_Init+0x58>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fc8b 	bl	8001ce0 <HAL_UART_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ce:	f000 f995 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000d8 	.word	0x200000d8
 80003dc:	40004400 	.word	0x40004400

080003e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_DMA_Init+0x38>)
 80003e8:	695a      	ldr	r2, [r3, #20]
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_DMA_Init+0x38>)
 80003ec:	2101      	movs	r1, #1
 80003ee:	430a      	orrs	r2, r1
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_DMA_Init+0x38>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	2201      	movs	r2, #1
 80003f8:	4013      	ands	r3, r2
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	200b      	movs	r0, #11
 8000404:	f000 fc3a 	bl	8000c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000408:	200b      	movs	r0, #11
 800040a:	f000 fc4c 	bl	8000ca6 <HAL_NVIC_EnableIRQ>

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40021000 	.word	0x40021000

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	2414      	movs	r4, #20
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2314      	movs	r3, #20
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f002 fc1f 	bl	8002c70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b34      	ldr	r3, [pc, #208]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b33      	ldr	r3, [pc, #204]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	03c9      	lsls	r1, r1, #15
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	03db      	lsls	r3, r3, #15
 8000448:	4013      	ands	r3, r2
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0289      	lsls	r1, r1, #10
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b29      	ldr	r3, [pc, #164]	; (8000504 <MX_GPIO_Init+0xe8>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	029b      	lsls	r3, r3, #10
 8000464:	4013      	ands	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4b26      	ldr	r3, [pc, #152]	; (8000504 <MX_GPIO_Init+0xe8>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b25      	ldr	r3, [pc, #148]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0309      	lsls	r1, r1, #12
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b22      	ldr	r3, [pc, #136]	; (8000504 <MX_GPIO_Init+0xe8>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	031b      	lsls	r3, r3, #12
 8000480:	4013      	ands	r3, r2
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <MX_GPIO_Init+0xe8>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	02c9      	lsls	r1, r1, #11
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_GPIO_Init+0xe8>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	02db      	lsls	r3, r3, #11
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004a2:	23c0      	movs	r3, #192	; 0xc0
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4818      	ldr	r0, [pc, #96]	; (8000508 <MX_GPIO_Init+0xec>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	0019      	movs	r1, r3
 80004ac:	f000 ff0c 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2290      	movs	r2, #144	; 0x90
 80004ba:	0352      	lsls	r2, r2, #13
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c4:	193a      	adds	r2, r7, r4
 80004c6:	2390      	movs	r3, #144	; 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fd8b 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80004d2:	0021      	movs	r1, r4
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	22c0      	movs	r2, #192	; 0xc0
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2201      	movs	r2, #1
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <MX_GPIO_Init+0xec>)
 80004f2:	0019      	movs	r1, r3
 80004f4:	0010      	movs	r0, r2
 80004f6:	f000 fd77 	bl	8000fe8 <HAL_GPIO_Init>

}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b00b      	add	sp, #44	; 0x2c
 8000500:	bd90      	pop	{r4, r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	40021000 	.word	0x40021000
 8000508:	48000800 	.word	0x48000800

0800050c <bcdToDec>:
	//YOUR CODE HERE
	return (uint8_t)((val/10 * 16) + (val%10));
}

int bcdToDec(uint8_t val)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	0002      	movs	r2, r0
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	701a      	strb	r2, [r3, #0]
	//TASK 3
	//Complete the BCD to decimal function

	//YOUR CODE HERE
	//return (int)((val/16 *10) + (val%16));
	return ((val>>4)*10+(val&0x0F));
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	091b      	lsrs	r3, r3, #4
 800051e:	b2db      	uxtb	r3, r3
 8000520:	001a      	movs	r2, r3
 8000522:	0013      	movs	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	189b      	adds	r3, r3, r2
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	0019      	movs	r1, r3
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	220f      	movs	r2, #15
 8000532:	4013      	ands	r3, r2
 8000534:	18cb      	adds	r3, r1, r3

}
 8000536:	0018      	movs	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <getTime>:
	//HAL_I2C_Mem_Write(&hi2c1, 0b1101000, FIRST_REG, REG_SIZE, set_time, 7, 1000);

}

void getTime (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	//fill in the address of the RTC, the address of the first register to write anmd the size of each register
	//The function and RTC supports multiread. That means we can give the function a buffer and first address
	//and it will read 1 byte of data, increment the register address, write another byte and so on
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000546:	4828      	ldr	r0, [pc, #160]	; (80005e8 <getTime+0xa8>)
 8000548:	23fa      	movs	r3, #250	; 0xfa
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	9302      	str	r3, [sp, #8]
 800054e:	2307      	movs	r3, #7
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	003b      	movs	r3, r7
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	2200      	movs	r2, #0
 800055a:	21d0      	movs	r1, #208	; 0xd0
 800055c:	f000 ff82 	bl	8001464 <HAL_I2C_Mem_Read>


	//YOUR CODE HERE
	time.seconds = bcdToDec(get_time[0]);
 8000560:	003b      	movs	r3, r7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	0018      	movs	r0, r3
 8000566:	f7ff ffd1 	bl	800050c <bcdToDec>
 800056a:	0003      	movs	r3, r0
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <getTime+0xac>)
 8000570:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000572:	003b      	movs	r3, r7
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff ffc8 	bl	800050c <bcdToDec>
 800057c:	0003      	movs	r3, r0
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <getTime+0xac>)
 8000582:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000584:	003b      	movs	r3, r7
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff ffbf 	bl	800050c <bcdToDec>
 800058e:	0003      	movs	r3, r0
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <getTime+0xac>)
 8000594:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000596:	003b      	movs	r3, r7
 8000598:	78db      	ldrb	r3, [r3, #3]
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff ffb6 	bl	800050c <bcdToDec>
 80005a0:	0003      	movs	r3, r0
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <getTime+0xac>)
 80005a6:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80005a8:	003b      	movs	r3, r7
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ffad 	bl	800050c <bcdToDec>
 80005b2:	0003      	movs	r3, r0
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <getTime+0xac>)
 80005b8:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80005ba:	003b      	movs	r3, r7
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ffa4 	bl	800050c <bcdToDec>
 80005c4:	0003      	movs	r3, r0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <getTime+0xac>)
 80005ca:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80005cc:	003b      	movs	r3, r7
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	0018      	movs	r0, r3
 80005d2:	f7ff ff9b 	bl	800050c <bcdToDec>
 80005d6:	0003      	movs	r3, r0
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <getTime+0xac>)
 80005dc:	719a      	strb	r2, [r3, #6]
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	200001b0 	.word	0x200001b0

080005f0 <epochFromTime>:

int epochFromTime(TIME time){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	003b      	movs	r3, r7
 80005f8:	6018      	str	r0, [r3, #0]
 80005fa:	6059      	str	r1, [r3, #4]
	//TASK 5
	//You have been given the epoch time for Saturday, January 1, 2022 12:00:00 AM GMT+02:00
	//It is define above as EPOCH_2022. You can work from that and ignore the effects of leap years/seconds

	//YOUR CODE HERE
	int months = time.month;
 80005fc:	003b      	movs	r3, r7
 80005fe:	795b      	ldrb	r3, [r3, #5]
 8000600:	60fb      	str	r3, [r7, #12]
	int day = time.dayofmonth;
 8000602:	003b      	movs	r3, r7
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	617b      	str	r3, [r7, #20]
	int EPOCH = EPOCH_2022;
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <epochFromTime+0xd8>)
 800060a:	613b      	str	r3, [r7, #16]
	switch(months){
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b0c      	cmp	r3, #12
 8000610:	d847      	bhi.n	80006a2 <epochFromTime+0xb2>
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	009a      	lsls	r2, r3, #2
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <epochFromTime+0xdc>)
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	469f      	mov	pc, r3

	case 2:

		EPOCH += 31*24*60*60;
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <epochFromTime+0xe0>)
 8000622:	4694      	mov	ip, r2
 8000624:	4463      	add	r3, ip
 8000626:	613b      	str	r3, [r7, #16]
	break;
 8000628:	e03b      	b.n	80006a2 <epochFromTime+0xb2>

	case 3:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 *60;
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	4a29      	ldr	r2, [pc, #164]	; (80006d4 <epochFromTime+0xe4>)
 800062e:	4694      	mov	ip, r2
 8000630:	4463      	add	r3, ip
 8000632:	613b      	str	r3, [r7, #16]

	break;
 8000634:	e035      	b.n	80006a2 <epochFromTime+0xb2>

	case 4:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60;
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <epochFromTime+0xe8>)
 800063a:	4694      	mov	ip, r2
 800063c:	4463      	add	r3, ip
 800063e:	613b      	str	r3, [r7, #16]
	break;
 8000640:	e02f      	b.n	80006a2 <epochFromTime+0xb2>

	case 5:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400;
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	4a25      	ldr	r2, [pc, #148]	; (80006dc <epochFromTime+0xec>)
 8000646:	4694      	mov	ip, r2
 8000648:	4463      	add	r3, ip
 800064a:	613b      	str	r3, [r7, #16]
	break;
 800064c:	e029      	b.n	80006a2 <epochFromTime+0xb2>

	case 6:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400;
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <epochFromTime+0xf0>)
 8000652:	4694      	mov	ip, r2
 8000654:	4463      	add	r3, ip
 8000656:	613b      	str	r3, [r7, #16]
	break;
 8000658:	e023      	b.n	80006a2 <epochFromTime+0xb2>

	case 7:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400;
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <epochFromTime+0xf4>)
 800065e:	4694      	mov	ip, r2
 8000660:	4463      	add	r3, ip
 8000662:	613b      	str	r3, [r7, #16]
	break;
 8000664:	e01d      	b.n	80006a2 <epochFromTime+0xb2>

	case 8:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <epochFromTime+0xf8>)
 800066a:	4694      	mov	ip, r2
 800066c:	4463      	add	r3, ip
 800066e:	613b      	str	r3, [r7, #16]
	break;
 8000670:	e017      	b.n	80006a2 <epochFromTime+0xb2>

	case 9:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400;
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <epochFromTime+0xfc>)
 8000676:	4694      	mov	ip, r2
 8000678:	4463      	add	r3, ip
 800067a:	613b      	str	r3, [r7, #16]
	break;
 800067c:	e011      	b.n	80006a2 <epochFromTime+0xb2>

	case 10:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400 + 30*86400;
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <epochFromTime+0x100>)
 8000682:	4694      	mov	ip, r2
 8000684:	4463      	add	r3, ip
 8000686:	613b      	str	r3, [r7, #16]
	break;
 8000688:	e00b      	b.n	80006a2 <epochFromTime+0xb2>

	case 11:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400 + 30*86400 + 31*86400;
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <epochFromTime+0x104>)
 800068e:	4694      	mov	ip, r2
 8000690:	4463      	add	r3, ip
 8000692:	613b      	str	r3, [r7, #16]
	break;
 8000694:	e005      	b.n	80006a2 <epochFromTime+0xb2>

	case 12:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400 + 30*86400 + 31*86400 + 30*86400;
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <epochFromTime+0x108>)
 800069a:	4694      	mov	ip, r2
 800069c:	4463      	add	r3, ip
 800069e:	613b      	str	r3, [r7, #16]
	break;
 80006a0:	46c0      	nop			; (mov r8, r8)

	default:
		day = day;
	}

	EPOCH += (day-1)*24*60*60;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	1e5a      	subs	r2, r3, #1
 80006a6:	0013      	movs	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	189b      	adds	r3, r3, r2
 80006ac:	011a      	lsls	r2, r3, #4
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	0113      	lsls	r3, r2, #4
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	01db      	lsls	r3, r3, #7
 80006b6:	001a      	movs	r2, r3
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	189b      	adds	r3, r3, r2
 80006bc:	613b      	str	r3, [r7, #16]

	return EPOCH;
 80006be:	693b      	ldr	r3, [r7, #16]
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b006      	add	sp, #24
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	61cf7d60 	.word	0x61cf7d60
 80006cc:	080035c0 	.word	0x080035c0
 80006d0:	0028de80 	.word	0x0028de80
 80006d4:	004dc880 	.word	0x004dc880
 80006d8:	0076a700 	.word	0x0076a700
 80006dc:	009e3400 	.word	0x009e3400
 80006e0:	00c71280 	.word	0x00c71280
 80006e4:	00ee9f80 	.word	0x00ee9f80
 80006e8:	01177e00 	.word	0x01177e00
 80006ec:	01405c80 	.word	0x01405c80
 80006f0:	0167e980 	.word	0x0167e980
 80006f4:	0190c800 	.word	0x0190c800
 80006f8:	01b85500 	.word	0x01b85500

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x44>)
 8000710:	699a      	ldr	r2, [r3, #24]
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_MspInit+0x44>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	619a      	str	r2, [r3, #24]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x44>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x44>)
 8000728:	69da      	ldr	r2, [r3, #28]
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_MspInit+0x44>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0549      	lsls	r1, r1, #21
 8000730:	430a      	orrs	r2, r1
 8000732:	61da      	str	r2, [r3, #28]
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_MspInit+0x44>)
 8000736:	69da      	ldr	r2, [r3, #28]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	055b      	lsls	r3, r3, #21
 800073c:	4013      	ands	r3, r2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b08b      	sub	sp, #44	; 0x2c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	2414      	movs	r4, #20
 800075a:	193b      	adds	r3, r7, r4
 800075c:	0018      	movs	r0, r3
 800075e:	2314      	movs	r3, #20
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f002 fa84 	bl	8002c70 <memset>
  if(hi2c->Instance==I2C1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <HAL_I2C_MspInit+0x90>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d131      	bne.n	80007d6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <HAL_I2C_MspInit+0x94>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_I2C_MspInit+0x94>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	02c9      	lsls	r1, r1, #11
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_I2C_MspInit+0x94>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	02db      	lsls	r3, r3, #11
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2212      	movs	r2, #18
 800079a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2203      	movs	r2, #3
 80007a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2201      	movs	r2, #1
 80007ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <HAL_I2C_MspInit+0x98>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f000 fc17 	bl	8000fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_I2C_MspInit+0x94>)
 80007bc:	69da      	ldr	r2, [r3, #28]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_I2C_MspInit+0x94>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0389      	lsls	r1, r1, #14
 80007c4:	430a      	orrs	r2, r1
 80007c6:	61da      	str	r2, [r3, #28]
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_I2C_MspInit+0x94>)
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	039b      	lsls	r3, r3, #14
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b00b      	add	sp, #44	; 0x2c
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40005400 	.word	0x40005400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000400 	.word	0x48000400

080007ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b08b      	sub	sp, #44	; 0x2c
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	2414      	movs	r4, #20
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	0018      	movs	r0, r3
 80007fa:	2314      	movs	r3, #20
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f002 fa36 	bl	8002c70 <memset>
  if(huart->Instance==USART2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a33      	ldr	r2, [pc, #204]	; (80008d8 <HAL_UART_MspInit+0xec>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d160      	bne.n	80008d0 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <HAL_UART_MspInit+0xf0>)
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <HAL_UART_MspInit+0xf0>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0289      	lsls	r1, r1, #10
 8000818:	430a      	orrs	r2, r1
 800081a:	61da      	str	r2, [r3, #28]
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <HAL_UART_MspInit+0xf0>)
 800081e:	69da      	ldr	r2, [r3, #28]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <HAL_UART_MspInit+0xf0>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <HAL_UART_MspInit+0xf0>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0289      	lsls	r1, r1, #10
 8000834:	430a      	orrs	r2, r1
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <HAL_UART_MspInit+0xf0>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	029b      	lsls	r3, r3, #10
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000846:	0021      	movs	r1, r4
 8000848:	187b      	adds	r3, r7, r1
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2202      	movs	r2, #2
 8000852:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2203      	movs	r2, #3
 800085e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2201      	movs	r2, #1
 8000864:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	187a      	adds	r2, r7, r1
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fbba 	bl	8000fe8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 8000876:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <HAL_UART_MspInit+0xf8>)
 8000878:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 800087c:	2210      	movs	r2, #16
 800087e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fa1a 	bl	8000ce0 <HAL_DMA_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80008b0:	f7ff ff24 	bl	80006fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 80008b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_UART_MspInit+0xf4>)
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	201c      	movs	r0, #28
 80008c6:	f000 f9d9 	bl	8000c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ca:	201c      	movs	r0, #28
 80008cc:	f000 f9eb 	bl	8000ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b00b      	add	sp, #44	; 0x2c
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000
 80008e0:	2000015c 	.word	0x2000015c
 80008e4:	40020044 	.word	0x40020044

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f8ca 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <DMA1_Channel4_5_IRQHandler+0x14>)
 800091e:	0018      	movs	r0, r3
 8000920:	f000 faa3 	bl	8000e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000015c 	.word	0x2000015c

08000930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <USART2_IRQHandler+0x14>)
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fad0 	bl	8001edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	200000d8 	.word	0x200000d8

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000978:	f002 f950 	bl	8002c1c <__errno>
 800097c:	0003      	movs	r3, r0
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000982:	2301      	movs	r3, #1
 8000984:	425b      	negs	r3, r3
 8000986:	e009      	b.n	800099c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	18d2      	adds	r2, r2, r3
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <_sbrk+0x64>)
 8000998:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b006      	add	sp, #24
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20002000 	.word	0x20002000
 80009a8:	00000400 	.word	0x00000400
 80009ac:	200001b8 	.word	0x200001b8
 80009b0:	200001d0 	.word	0x200001d0

080009b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490e      	ldr	r1, [pc, #56]	; (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0b      	ldr	r4, [pc, #44]	; (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ea:	f7ff ffe3 	bl	80009b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ee:	f002 f91b 	bl	8002c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fc1f 	bl	8000234 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a04:	08003638 	.word	0x08003638
  ldr r2, =_sbss
 8000a08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a0c:	200001d0 	.word	0x200001d0

08000a10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_COMP_IRQHandler>
	...

08000a14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <HAL_Init+0x24>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_Init+0x24>)
 8000a1e:	2110      	movs	r1, #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f809 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2a:	f7ff fe6d 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_InitTick+0x60>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	23fa      	movs	r3, #250	; 0xfa
 8000a50:	0098      	lsls	r0, r3, #2
 8000a52:	f7ff fb63 	bl	800011c <__udivsi3>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f7ff fb5e 	bl	800011c <__udivsi3>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f92f 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e00f      	b.n	8000a90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d80b      	bhi.n	8000a8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f8fc 	bl	8000c7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_InitTick+0x64>)
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b003      	add	sp, #12
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x1c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	001a      	movs	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	18d2      	adds	r2, r2, r3
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab6:	601a      	str	r2, [r3, #0]
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	200001bc 	.word	0x200001bc

08000ac8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <HAL_GetTick+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	200001bc 	.word	0x200001bc

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff fff0 	bl	8000ac8 <HAL_GetTick>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	001a      	movs	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	189b      	adds	r3, r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	f7ff ffe0 	bl	8000ac8 <HAL_GetTick>
 8000b08:	0002      	movs	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b004      	add	sp, #16
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000008 	.word	0x20000008

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b7f      	cmp	r3, #127	; 0x7f
 8000b36:	d809      	bhi.n	8000b4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	231f      	movs	r3, #31
 8000b40:	401a      	ands	r2, r3
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_EnableIRQ+0x30>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	4091      	lsls	r1, r2
 8000b48:	000a      	movs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
  }
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	0002      	movs	r2, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b6c:	d828      	bhi.n	8000bc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6e:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <__NVIC_SetPriority+0xd4>)
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	33c0      	adds	r3, #192	; 0xc0
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	589b      	ldr	r3, [r3, r2]
 8000b7e:	1dfa      	adds	r2, r7, #7
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	0011      	movs	r1, r2
 8000b84:	2203      	movs	r2, #3
 8000b86:	400a      	ands	r2, r1
 8000b88:	00d2      	lsls	r2, r2, #3
 8000b8a:	21ff      	movs	r1, #255	; 0xff
 8000b8c:	4091      	lsls	r1, r2
 8000b8e:	000a      	movs	r2, r1
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	401a      	ands	r2, r3
 8000b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	019b      	lsls	r3, r3, #6
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	4003      	ands	r3, r0
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bac:	481f      	ldr	r0, [pc, #124]	; (8000c2c <__NVIC_SetPriority+0xd4>)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	33c0      	adds	r3, #192	; 0xc0
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bbe:	e031      	b.n	8000c24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <__NVIC_SetPriority+0xd8>)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	230f      	movs	r3, #15
 8000bca:	400b      	ands	r3, r1
 8000bcc:	3b08      	subs	r3, #8
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3306      	adds	r3, #6
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	1dfa      	adds	r2, r7, #7
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	0011      	movs	r1, r2
 8000be0:	2203      	movs	r2, #3
 8000be2:	400a      	ands	r2, r1
 8000be4:	00d2      	lsls	r2, r2, #3
 8000be6:	21ff      	movs	r1, #255	; 0xff
 8000be8:	4091      	lsls	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	401a      	ands	r2, r3
 8000bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	019b      	lsls	r3, r3, #6
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2303      	movs	r3, #3
 8000c02:	4003      	ands	r3, r0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <__NVIC_SetPriority+0xd8>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	001c      	movs	r4, r3
 8000c10:	230f      	movs	r3, #15
 8000c12:	4023      	ands	r3, r4
 8000c14:	3b08      	subs	r3, #8
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	18c3      	adds	r3, r0, r3
 8000c20:	3304      	adds	r3, #4
 8000c22:	601a      	str	r2, [r3, #0]
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b003      	add	sp, #12
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	045b      	lsls	r3, r3, #17
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d301      	bcc.n	8000c4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e010      	b.n	8000c6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <SysTick_Config+0x44>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	3a01      	subs	r2, #1
 8000c52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c54:	2301      	movs	r3, #1
 8000c56:	425b      	negs	r3, r3
 8000c58:	2103      	movs	r1, #3
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff ff7c 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SysTick_Config+0x44>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <SysTick_Config+0x44>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	210f      	movs	r1, #15
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	1c02      	adds	r2, r0, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ff5d 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	0002      	movs	r2, r0
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff ff33 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff ffaf 	bl	8000c34 <SysTick_Config>
 8000cd6:	0003      	movs	r3, r0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e036      	b.n	8000d64 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2221      	movs	r2, #33	; 0x21
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <HAL_DMA_Init+0x8c>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f932 	bl	8000fb0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2221      	movs	r2, #33	; 0x21
 8000d56:	2101      	movs	r1, #1
 8000d58:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}  
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	ffffc00f 	.word	0xffffc00f

08000d70 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2221      	movs	r2, #33	; 0x21
 8000d7c:	5c9b      	ldrb	r3, [r3, r2]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d008      	beq.n	8000d96 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2204      	movs	r2, #4
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	2100      	movs	r1, #0
 8000d90:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e020      	b.n	8000dd8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	210e      	movs	r1, #14
 8000da2:	438a      	bics	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	438a      	bics	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2221      	movs	r2, #33	; 0x21
 8000dca:	2101      	movs	r1, #1
 8000dcc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de8:	210f      	movs	r1, #15
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2221      	movs	r2, #33	; 0x21
 8000df4:	5c9b      	ldrb	r3, [r3, r2]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d006      	beq.n	8000e0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2204      	movs	r2, #4
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e028      	b.n	8000e5c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	210e      	movs	r1, #14
 8000e16:	438a      	bics	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	438a      	bics	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e32:	2101      	movs	r1, #1
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2221      	movs	r2, #33	; 0x21
 8000e3e:	2101      	movs	r1, #1
 8000e40:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	2100      	movs	r1, #0
 8000e48:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	0010      	movs	r0, r2
 8000e5a:	4798      	blx	r3
    } 
  }
  return status;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	781b      	ldrb	r3, [r3, #0]
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	2204      	movs	r2, #4
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d024      	beq.n	8000edc <HAL_DMA_IRQHandler+0x72>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2204      	movs	r2, #4
 8000e96:	4013      	ands	r3, r2
 8000e98:	d020      	beq.n	8000edc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d107      	bne.n	8000eb6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <HAL_DMA_IRQHandler+0x66>
 8000ece:	e06a      	b.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000eda:	e064      	b.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d02b      	beq.n	8000f44 <HAL_DMA_IRQHandler+0xda>
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d027      	beq.n	8000f44 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2220      	movs	r2, #32
 8000efc:	4013      	ands	r3, r2
 8000efe:	d10b      	bne.n	8000f18 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	210a      	movs	r1, #10
 8000f0c:	438a      	bics	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2221      	movs	r2, #33	; 0x21
 8000f14:	2101      	movs	r1, #1
 8000f16:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f20:	2102      	movs	r1, #2
 8000f22:	4091      	lsls	r1, r2
 8000f24:	000a      	movs	r2, r1
 8000f26:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d036      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	0010      	movs	r0, r2
 8000f40:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f42:	e030      	b.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	2208      	movs	r2, #8
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4013      	ands	r3, r2
 8000f52:	d028      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	2208      	movs	r2, #8
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d024      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	210e      	movs	r1, #14
 8000f68:	438a      	bics	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f74:	2101      	movs	r1, #1
 8000f76:	4091      	lsls	r1, r2
 8000f78:	000a      	movs	r2, r1
 8000f7a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2221      	movs	r2, #33	; 0x21
 8000f86:	2101      	movs	r1, #1
 8000f88:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	0010      	movs	r0, r2
 8000fa2:	4798      	blx	r3
    }
   }
}  
 8000fa4:	e7ff      	b.n	8000fa6 <HAL_DMA_IRQHandler+0x13c>
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <DMA_CalcBaseAndBitshift+0x30>)
 8000fbe:	4694      	mov	ip, r2
 8000fc0:	4463      	add	r3, ip
 8000fc2:	2114      	movs	r1, #20
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff f8a9 	bl	800011c <__udivsi3>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	009a      	lsls	r2, r3, #2
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <DMA_CalcBaseAndBitshift+0x34>)
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	bffdfff8 	.word	0xbffdfff8
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff6:	e14f      	b.n	8001298 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d100      	bne.n	8001010 <HAL_GPIO_Init+0x28>
 800100e:	e140      	b.n	8001292 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	4013      	ands	r3, r2
 8001018:	2b01      	cmp	r3, #1
 800101a:	d005      	beq.n	8001028 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001024:	2b02      	cmp	r3, #2
 8001026:	d130      	bne.n	800108a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	2201      	movs	r2, #1
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	4013      	ands	r3, r2
 8001092:	2b03      	cmp	r3, #3
 8001094:	d017      	beq.n	80010c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d123      	bne.n	800111a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	58d3      	ldr	r3, [r2, r3]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2207      	movs	r2, #7
 80010e4:	4013      	ands	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2107      	movs	r1, #7
 80010fe:	400b      	ands	r3, r1
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	6939      	ldr	r1, [r7, #16]
 8001118:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	401a      	ands	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	23c0      	movs	r3, #192	; 0xc0
 8001154:	029b      	lsls	r3, r3, #10
 8001156:	4013      	ands	r3, r2
 8001158:	d100      	bne.n	800115c <HAL_GPIO_Init+0x174>
 800115a:	e09a      	b.n	8001292 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115c:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 8001162:	2101      	movs	r1, #1
 8001164:	430a      	orrs	r2, r1
 8001166:	619a      	str	r2, [r3, #24]
 8001168:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	2201      	movs	r2, #1
 800116e:	4013      	ands	r3, r2
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001174:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x2cc>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	589b      	ldr	r3, [r3, r2]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2203      	movs	r2, #3
 8001186:	4013      	ands	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	409a      	lsls	r2, r3
 800118e:	0013      	movs	r3, r2
 8001190:	43da      	mvns	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	2390      	movs	r3, #144	; 0x90
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	429a      	cmp	r2, r3
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x1e2>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x1de>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a43      	ldr	r2, [pc, #268]	; (80012bc <HAL_GPIO_Init+0x2d4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x1da>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x1d6>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x1e4>
 80011be:	2305      	movs	r3, #5
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x1e4>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x1e4>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x1e4>
 80011ca:	2300      	movs	r3, #0
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	2103      	movs	r1, #3
 80011d0:	400a      	ands	r2, r1
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	; (80012b4 <HAL_GPIO_Init+0x2cc>)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ea:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	025b      	lsls	r3, r3, #9
 8001202:	4013      	ands	r3, r2
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4013      	ands	r3, r2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	035b      	lsls	r3, r3, #13
 8001256:	4013      	ands	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	039b      	lsls	r3, r3, #14
 8001280:	4013      	ands	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	40da      	lsrs	r2, r3
 80012a0:	1e13      	subs	r3, r2, #0
 80012a2:	d000      	beq.n	80012a6 <HAL_GPIO_Init+0x2be>
 80012a4:	e6a8      	b.n	8000ff8 <HAL_GPIO_Init+0x10>
  } 
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b006      	add	sp, #24
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	48000c00 	.word	0x48000c00
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	0008      	movs	r0, r1
 80012d2:	0011      	movs	r1, r2
 80012d4:	1cbb      	adds	r3, r7, #2
 80012d6:	1c02      	adds	r2, r0, #0
 80012d8:	801a      	strh	r2, [r3, #0]
 80012da:	1c7b      	adds	r3, r7, #1
 80012dc:	1c0a      	adds	r2, r1, #0
 80012de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e0:	1c7b      	adds	r3, r7, #1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e8:	1cbb      	adds	r3, r7, #2
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f2:	1cbb      	adds	r3, r7, #2
 80012f4:	881a      	ldrh	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	000a      	movs	r2, r1
 800130c:	1cbb      	adds	r3, r7, #2
 800130e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001316:	1cbb      	adds	r3, r7, #2
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	041a      	lsls	r2, r3, #16
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	1cb9      	adds	r1, r7, #2
 8001326:	8809      	ldrh	r1, [r1, #0]
 8001328:	400b      	ands	r3, r1
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b004      	add	sp, #16
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e082      	b.n	8001450 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2241      	movs	r2, #65	; 0x41
 800134e:	5c9b      	ldrb	r3, [r3, r2]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2240      	movs	r2, #64	; 0x40
 800135a:	2100      	movs	r1, #0
 800135c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff f9f5 	bl	8000750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2241      	movs	r2, #65	; 0x41
 800136a:	2124      	movs	r1, #36	; 0x24
 800136c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	438a      	bics	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4934      	ldr	r1, [pc, #208]	; (8001458 <HAL_I2C_Init+0x120>)
 8001388:	400a      	ands	r2, r1
 800138a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4931      	ldr	r1, [pc, #196]	; (800145c <HAL_I2C_Init+0x124>)
 8001398:	400a      	ands	r2, r1
 800139a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d108      	bne.n	80013b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0209      	lsls	r1, r1, #8
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e007      	b.n	80013c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2184      	movs	r1, #132	; 0x84
 80013c0:	0209      	lsls	r1, r1, #8
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d104      	bne.n	80013d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	491f      	ldr	r1, [pc, #124]	; (8001460 <HAL_I2C_Init+0x128>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	491a      	ldr	r1, [pc, #104]	; (800145c <HAL_I2C_Init+0x124>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	431a      	orrs	r2, r3
 8001402:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69d9      	ldr	r1, [r3, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2241      	movs	r2, #65	; 0x41
 800143c:	2120      	movs	r1, #32
 800143e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2242      	movs	r2, #66	; 0x42
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}
 8001458:	f0ffffff 	.word	0xf0ffffff
 800145c:	ffff7fff 	.word	0xffff7fff
 8001460:	02008000 	.word	0x02008000

08001464 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af02      	add	r7, sp, #8
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	000c      	movs	r4, r1
 800146e:	0010      	movs	r0, r2
 8001470:	0019      	movs	r1, r3
 8001472:	230a      	movs	r3, #10
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	1c22      	adds	r2, r4, #0
 8001478:	801a      	strh	r2, [r3, #0]
 800147a:	2308      	movs	r3, #8
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	1c02      	adds	r2, r0, #0
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	1dbb      	adds	r3, r7, #6
 8001484:	1c0a      	adds	r2, r1, #0
 8001486:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2241      	movs	r2, #65	; 0x41
 800148c:	5c9b      	ldrb	r3, [r3, r2]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b20      	cmp	r3, #32
 8001492:	d000      	beq.n	8001496 <HAL_I2C_Mem_Read+0x32>
 8001494:	e110      	b.n	80016b8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <HAL_I2C_Mem_Read+0x42>
 800149c:	232c      	movs	r3, #44	; 0x2c
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e103      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2240      	movs	r2, #64	; 0x40
 80014b6:	5c9b      	ldrb	r3, [r3, r2]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_I2C_Mem_Read+0x5c>
 80014bc:	2302      	movs	r3, #2
 80014be:	e0fc      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	2101      	movs	r1, #1
 80014c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014c8:	f7ff fafe 	bl	8000ac8 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	0219      	lsls	r1, r3, #8
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2319      	movs	r3, #25
 80014dc:	2201      	movs	r2, #1
 80014de:	f000 f979 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0e7      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2241      	movs	r2, #65	; 0x41
 80014ee:	2122      	movs	r1, #34	; 0x22
 80014f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2242      	movs	r2, #66	; 0x42
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	222c      	movs	r2, #44	; 0x2c
 800150a:	18ba      	adds	r2, r7, r2
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001516:	1dbb      	adds	r3, r7, #6
 8001518:	881c      	ldrh	r4, [r3, #0]
 800151a:	2308      	movs	r3, #8
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	230a      	movs	r3, #10
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	8819      	ldrh	r1, [r3, #0]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	0023      	movs	r3, r4
 8001532:	f000 f8cb 	bl	80016cc <I2C_RequestMemoryRead>
 8001536:	1e03      	subs	r3, r0, #0
 8001538:	d005      	beq.n	8001546 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	2100      	movs	r1, #0
 8001540:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0b9      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29b      	uxth	r3, r3
 800154c:	2bff      	cmp	r3, #255	; 0xff
 800154e:	d911      	bls.n	8001574 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	b2da      	uxtb	r2, r3
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	045c      	lsls	r4, r3, #17
 8001560:	230a      	movs	r3, #10
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	8819      	ldrh	r1, [r3, #0]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_I2C_Mem_Read+0x260>)
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	0023      	movs	r3, r4
 800156e:	f000 fa65 	bl	8001a3c <I2C_TransferConfig>
 8001572:	e012      	b.n	800159a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001578:	b29a      	uxth	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	b2da      	uxtb	r2, r3
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	049c      	lsls	r4, r3, #18
 8001588:	230a      	movs	r3, #10
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	8819      	ldrh	r1, [r3, #0]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <HAL_I2C_Mem_Read+0x260>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	0023      	movs	r3, r4
 8001596:	f000 fa51 	bl	8001a3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800159a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	0013      	movs	r3, r2
 80015a4:	2200      	movs	r2, #0
 80015a6:	2104      	movs	r1, #4
 80015a8:	f000 f914 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e082      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03a      	beq.n	8001666 <HAL_I2C_Mem_Read+0x202>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d136      	bne.n	8001666 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	0013      	movs	r3, r2
 8001602:	2200      	movs	r2, #0
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	f000 f8e5 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e053      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	2bff      	cmp	r3, #255	; 0xff
 800161a:	d911      	bls.n	8001640 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001626:	b2da      	uxtb	r2, r3
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	045c      	lsls	r4, r3, #17
 800162c:	230a      	movs	r3, #10
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	0023      	movs	r3, r4
 800163a:	f000 f9ff 	bl	8001a3c <I2C_TransferConfig>
 800163e:	e012      	b.n	8001666 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164e:	b2da      	uxtb	r2, r3
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	049c      	lsls	r4, r3, #18
 8001654:	230a      	movs	r3, #10
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	0023      	movs	r3, r4
 8001662:	f000 f9eb 	bl	8001a3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d194      	bne.n	800159a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f92a 	bl	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e01a      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <HAL_I2C_Mem_Read+0x264>)
 8001698:	400a      	ands	r2, r1
 800169a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2241      	movs	r2, #65	; 0x41
 80016a0:	2120      	movs	r1, #32
 80016a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2242      	movs	r2, #66	; 0x42
 80016a8:	2100      	movs	r1, #0
 80016aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
  }
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b007      	add	sp, #28
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	80002400 	.word	0x80002400
 80016c8:	fe00e800 	.word	0xfe00e800

080016cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	000c      	movs	r4, r1
 80016d6:	0010      	movs	r0, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	250a      	movs	r5, #10
 80016dc:	197b      	adds	r3, r7, r5
 80016de:	1c22      	adds	r2, r4, #0
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	2308      	movs	r3, #8
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	1c02      	adds	r2, r0, #0
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	1c0a      	adds	r2, r1, #0
 80016ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	8819      	ldrh	r1, [r3, #0]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <I2C_RequestMemoryRead+0xc0>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	f000 f99b 	bl	8001a3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	6a39      	ldr	r1, [r7, #32]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 f8a0 	bl	8001852 <I2C_WaitOnTXISFlagUntilTimeout>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e033      	b.n	8001782 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800171a:	1dbb      	adds	r3, r7, #6
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001722:	2308      	movs	r3, #8
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
 8001730:	e019      	b.n	8001766 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001732:	2308      	movs	r3, #8
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b29b      	uxth	r3, r3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001746:	6a39      	ldr	r1, [r7, #32]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	0018      	movs	r0, r3
 800174c:	f000 f881 	bl	8001852 <I2C_WaitOnTXISFlagUntilTimeout>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e014      	b.n	8001782 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001758:	2308      	movs	r3, #8
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001766:	6a3a      	ldr	r2, [r7, #32]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	0013      	movs	r3, r2
 8001770:	2200      	movs	r2, #0
 8001772:	2140      	movs	r1, #64	; 0x40
 8001774:	f000 f82e 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b004      	add	sp, #16
 8001788:	bdb0      	pop	{r4, r5, r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	80002000 	.word	0x80002000

08001790 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d103      	bne.n	80017ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d007      	beq.n	80017cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	619a      	str	r2, [r3, #24]
  }
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e4:	e021      	b.n	800182a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	d01e      	beq.n	800182a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ec:	f7ff f96c 	bl	8000ac8 <HAL_GetTick>
 80017f0:	0002      	movs	r2, r0
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d302      	bcc.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d113      	bne.n	800182a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	2220      	movs	r2, #32
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2241      	movs	r2, #65	; 0x41
 8001812:	2120      	movs	r1, #32
 8001814:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2242      	movs	r2, #66	; 0x42
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4013      	ands	r3, r2
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	425a      	negs	r2, r3
 800183a:	4153      	adcs	r3, r2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	001a      	movs	r2, r3
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d0ce      	beq.n	80017e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}

08001852 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800185e:	e02b      	b.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	0018      	movs	r0, r3
 8001868:	f000 f86e 	bl	8001948 <I2C_IsAcknowledgeFailed>
 800186c:	1e03      	subs	r3, r0, #0
 800186e:	d001      	beq.n	8001874 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e029      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3301      	adds	r3, #1
 8001878:	d01e      	beq.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187a:	f7ff f925 	bl	8000ac8 <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	429a      	cmp	r2, r3
 8001888:	d302      	bcc.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	2220      	movs	r2, #32
 8001896:	431a      	orrs	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2241      	movs	r2, #65	; 0x41
 80018a0:	2120      	movs	r1, #32
 80018a2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2242      	movs	r2, #66	; 0x42
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e007      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d1cc      	bne.n	8001860 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018dc:	e028      	b.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f82f 	bl	8001948 <I2C_IsAcknowledgeFailed>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e026      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f2:	f7ff f8e9 	bl	8000ac8 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d302      	bcc.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d113      	bne.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	2220      	movs	r2, #32
 800190e:	431a      	orrs	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2241      	movs	r2, #65	; 0x41
 8001918:	2120      	movs	r1, #32
 800191a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2242      	movs	r2, #66	; 0x42
 8001920:	2100      	movs	r1, #0
 8001922:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	2100      	movs	r1, #0
 800192a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e007      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2220      	movs	r2, #32
 8001938:	4013      	ands	r3, r2
 800193a:	2b20      	cmp	r3, #32
 800193c:	d1cf      	bne.n	80018de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2210      	movs	r2, #16
 800195c:	4013      	ands	r3, r2
 800195e:	2b10      	cmp	r3, #16
 8001960:	d164      	bne.n	8001a2c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	049b      	lsls	r3, r3, #18
 800196c:	401a      	ands	r2, r3
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049b      	lsls	r3, r3, #18
 8001972:	429a      	cmp	r2, r3
 8001974:	d02b      	beq.n	80019ce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	01c9      	lsls	r1, r1, #7
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001988:	e021      	b.n	80019ce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	d01e      	beq.n	80019ce <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001990:	f7ff f89a 	bl	8000ac8 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	d302      	bcc.n	80019a6 <I2C_IsAcknowledgeFailed+0x5e>
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d113      	bne.n	80019ce <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	2220      	movs	r2, #32
 80019ac:	431a      	orrs	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2241      	movs	r2, #65	; 0x41
 80019b6:	2120      	movs	r1, #32
 80019b8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2242      	movs	r2, #66	; 0x42
 80019be:	2100      	movs	r1, #0
 80019c0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e02f      	b.n	8001a2e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2220      	movs	r2, #32
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d1d6      	bne.n	800198a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2210      	movs	r2, #16
 80019e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2220      	movs	r2, #32
 80019ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff fece 	bl	8001790 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	490e      	ldr	r1, [pc, #56]	; (8001a38 <I2C_IsAcknowledgeFailed+0xf0>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	2204      	movs	r2, #4
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2241      	movs	r2, #65	; 0x41
 8001a14:	2120      	movs	r1, #32
 8001a16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2242      	movs	r2, #66	; 0x42
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	2100      	movs	r1, #0
 8001a26:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	0018      	movs	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	fe00e800 	.word	0xfe00e800

08001a3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	0008      	movs	r0, r1
 8001a46:	0011      	movs	r1, r2
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	240a      	movs	r4, #10
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	2009      	movs	r0, #9
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	1c0a      	adds	r2, r1, #0
 8001a58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	0d51      	lsrs	r1, r2, #21
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	00d2      	lsls	r2, r2, #3
 8001a68:	400a      	ands	r2, r1
 8001a6a:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <I2C_TransferConfig+0x68>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	43d2      	mvns	r2, r2
 8001a70:	401a      	ands	r2, r3
 8001a72:	0011      	movs	r1, r2
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	059b      	lsls	r3, r3, #22
 8001a7a:	0d9a      	lsrs	r2, r3, #22
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	0418      	lsls	r0, r3, #16
 8001a82:	23ff      	movs	r3, #255	; 0xff
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	4003      	ands	r3, r0
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b005      	add	sp, #20
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	03ff63ff 	.word	0x03ff63ff

08001aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2241      	movs	r2, #65	; 0x41
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d138      	bne.n	8001b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	5c9b      	ldrb	r3, [r3, r2]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e032      	b.n	8001b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2241      	movs	r2, #65	; 0x41
 8001ad8:	2124      	movs	r1, #36	; 0x24
 8001ada:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	438a      	bics	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4911      	ldr	r1, [pc, #68]	; (8001b3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2101      	movs	r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2241      	movs	r2, #65	; 0x41
 8001b20:	2120      	movs	r1, #32
 8001b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b002      	add	sp, #8
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	ffffefff 	.word	0xffffefff

08001b40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2241      	movs	r2, #65	; 0x41
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d139      	bne.n	8001bca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2240      	movs	r2, #64	; 0x40
 8001b5a:	5c9b      	ldrb	r3, [r3, r2]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e033      	b.n	8001bcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	2101      	movs	r1, #1
 8001b6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2241      	movs	r2, #65	; 0x41
 8001b70:	2124      	movs	r1, #36	; 0x24
 8001b72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	438a      	bics	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2241      	movs	r2, #65	; 0x41
 8001bba:	2120      	movs	r1, #32
 8001bbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2240      	movs	r2, #64	; 0x40
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
  }
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b004      	add	sp, #16
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	fffff0ff 	.word	0xfffff0ff

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b08f      	sub	sp, #60	; 0x3c
 8001bdc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bde:	2314      	movs	r3, #20
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001be6:	c313      	stmia	r3!, {r0, r1, r4}
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bf2:	c313      	stmia	r3!, {r0, r1, r4}
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	220c      	movs	r2, #12
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d002      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x4a>
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d003      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x50>
 8001c20:	e02d      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c26:	e02d      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	0c9b      	lsrs	r3, r3, #18
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2214      	movs	r2, #20
 8001c32:	18ba      	adds	r2, r7, r2
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	4013      	ands	r3, r2
 8001c40:	1d3a      	adds	r2, r7, #4
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c52:	4812      	ldr	r0, [pc, #72]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c54:	f7fe fa62 	bl	800011c <__udivsi3>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	4353      	muls	r3, r2
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
 8001c62:	e009      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c66:	000a      	movs	r2, r1
 8001c68:	0152      	lsls	r2, r2, #5
 8001c6a:	1a52      	subs	r2, r2, r1
 8001c6c:	0193      	lsls	r3, r2, #6
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	185b      	adds	r3, r3, r1
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c7c:	e002      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c82:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b00f      	add	sp, #60	; 0x3c
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	080035a0 	.word	0x080035a0
 8001c94:	080035b0 	.word	0x080035b0
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	007a1200 	.word	0x007a1200

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cb8:	f7ff fff2 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cbc:	0001      	movs	r1, r0
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	40d9      	lsrs	r1, r3
 8001cce:	000b      	movs	r3, r1
}    
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	080035f4 	.word	0x080035f4

08001ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e044      	b.n	8001d7c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d107      	bne.n	8001d0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2274      	movs	r2, #116	; 0x74
 8001cfe:	2100      	movs	r1, #0
 8001d00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7fe fd71 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2224      	movs	r2, #36	; 0x24
 8001d0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fbce 	bl	80024c4 <UART_SetConfig>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e024      	b.n	8001d7c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 fd01 	bl	8002744 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	490d      	ldr	r1, [pc, #52]	; (8001d84 <HAL_UART_Init+0xa4>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	212a      	movs	r1, #42	; 0x2a
 8001d5e:	438a      	bics	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 fd99 	bl	80028ac <UART_CheckIdleState>
 8001d7a:	0003      	movs	r3, r0
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	ffffb7ff 	.word	0xffffb7ff

08001d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	1dbb      	adds	r3, r7, #6
 8001d96:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d000      	beq.n	8001da2 <HAL_UART_Transmit+0x1a>
 8001da0:	e096      	b.n	8001ed0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_UART_Transmit+0x28>
 8001da8:	1dbb      	adds	r3, r7, #6
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e08e      	b.n	8001ed2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	015b      	lsls	r3, r3, #5
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d109      	bne.n	8001dd4 <HAL_UART_Transmit+0x4c>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d001      	beq.n	8001dd4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e07e      	b.n	8001ed2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2274      	movs	r2, #116	; 0x74
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Transmit+0x5a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e077      	b.n	8001ed2 <HAL_UART_Transmit+0x14a>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2274      	movs	r2, #116	; 0x74
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	2100      	movs	r1, #0
 8001df0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2221      	movs	r2, #33	; 0x21
 8001df6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001df8:	f7fe fe66 	bl	8000ac8 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1dba      	adds	r2, r7, #6
 8001e04:	2150      	movs	r1, #80	; 0x50
 8001e06:	8812      	ldrh	r2, [r2, #0]
 8001e08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1dba      	adds	r2, r7, #6
 8001e0e:	2152      	movs	r1, #82	; 0x52
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	015b      	lsls	r3, r3, #5
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d108      	bne.n	8001e32 <HAL_UART_Transmit+0xaa>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d104      	bne.n	8001e32 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	e003      	b.n	8001e3a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2274      	movs	r2, #116	; 0x74
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001e42:	e02d      	b.n	8001ea0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	f000 fd73 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e039      	b.n	8001ed2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	881a      	ldrh	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	05d2      	lsls	r2, r2, #23
 8001e6e:	0dd2      	lsrs	r2, r2, #23
 8001e70:	b292      	uxth	r2, r2
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	3302      	adds	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	e008      	b.n	8001e8e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b292      	uxth	r2, r2
 8001e86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2252      	movs	r2, #82	; 0x52
 8001e92:	5a9b      	ldrh	r3, [r3, r2]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2252      	movs	r2, #82	; 0x52
 8001e9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2252      	movs	r2, #82	; 0x52
 8001ea4:	5a9b      	ldrh	r3, [r3, r2]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1cb      	bne.n	8001e44 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	f000 fd3f 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e005      	b.n	8001ed2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b008      	add	sp, #32
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b0ab      	sub	sp, #172	; 0xac
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	22a4      	movs	r2, #164	; 0xa4
 8001eec:	18b9      	adds	r1, r7, r2
 8001eee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	20a0      	movs	r0, #160	; 0xa0
 8001ef8:	1839      	adds	r1, r7, r0
 8001efa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	219c      	movs	r1, #156	; 0x9c
 8001f04:	1879      	adds	r1, r7, r1
 8001f06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f08:	0011      	movs	r1, r2
 8001f0a:	18bb      	adds	r3, r7, r2
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a99      	ldr	r2, [pc, #612]	; (8002174 <HAL_UART_IRQHandler+0x298>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	2298      	movs	r2, #152	; 0x98
 8001f14:	18bc      	adds	r4, r7, r2
 8001f16:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001f18:	18bb      	adds	r3, r7, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d114      	bne.n	8001f4a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f2a:	183b      	adds	r3, r7, r0
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	4013      	ands	r3, r2
 8001f32:	d00a      	beq.n	8001f4a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d100      	bne.n	8001f3e <HAL_UART_IRQHandler+0x62>
 8001f3c:	e296      	b.n	800246c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	0010      	movs	r0, r2
 8001f46:	4798      	blx	r3
      }
      return;
 8001f48:	e290      	b.n	800246c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001f4a:	2398      	movs	r3, #152	; 0x98
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d100      	bne.n	8001f56 <HAL_UART_IRQHandler+0x7a>
 8001f54:	e114      	b.n	8002180 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f56:	239c      	movs	r3, #156	; 0x9c
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d106      	bne.n	8001f70 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f62:	23a0      	movs	r3, #160	; 0xa0
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a83      	ldr	r2, [pc, #524]	; (8002178 <HAL_UART_IRQHandler+0x29c>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d100      	bne.n	8001f70 <HAL_UART_IRQHandler+0x94>
 8001f6e:	e107      	b.n	8002180 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f70:	23a4      	movs	r3, #164	; 0xa4
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d012      	beq.n	8001fa2 <HAL_UART_IRQHandler+0xc6>
 8001f7c:	23a0      	movs	r3, #160	; 0xa0
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	589b      	ldr	r3, [r3, r2]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fa2:	23a4      	movs	r3, #164	; 0xa4
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d011      	beq.n	8001fd2 <HAL_UART_IRQHandler+0xf6>
 8001fae:	239c      	movs	r3, #156	; 0x9c
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	589b      	ldr	r3, [r3, r2]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fd2:	23a4      	movs	r3, #164	; 0xa4
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d011      	beq.n	8002002 <HAL_UART_IRQHandler+0x126>
 8001fde:	239c      	movs	r3, #156	; 0x9c
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d00b      	beq.n	8002002 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	589b      	ldr	r3, [r3, r2]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002002:	23a4      	movs	r3, #164	; 0xa4
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2208      	movs	r2, #8
 800200a:	4013      	ands	r3, r2
 800200c:	d017      	beq.n	800203e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800200e:	23a0      	movs	r3, #160	; 0xa0
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2220      	movs	r2, #32
 8002016:	4013      	ands	r3, r2
 8002018:	d105      	bne.n	8002026 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800201a:	239c      	movs	r3, #156	; 0x9c
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002024:	d00b      	beq.n	800203e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2208      	movs	r2, #8
 800202c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	589b      	ldr	r3, [r3, r2]
 8002034:	2208      	movs	r2, #8
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800203e:	23a4      	movs	r3, #164	; 0xa4
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4013      	ands	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_UART_IRQHandler+0x198>
 800204c:	23a0      	movs	r3, #160	; 0xa0
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	04db      	lsls	r3, r3, #19
 8002056:	4013      	ands	r3, r2
 8002058:	d00c      	beq.n	8002074 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	589b      	ldr	r3, [r3, r2]
 800206a:	2220      	movs	r2, #32
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	589b      	ldr	r3, [r3, r2]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <HAL_UART_IRQHandler+0x1a4>
 800207e:	e1f7      	b.n	8002470 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002080:	23a4      	movs	r3, #164	; 0xa4
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2220      	movs	r2, #32
 8002088:	4013      	ands	r3, r2
 800208a:	d00e      	beq.n	80020aa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800208c:	23a0      	movs	r3, #160	; 0xa0
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2220      	movs	r2, #32
 8002094:	4013      	ands	r3, r2
 8002096:	d008      	beq.n	80020aa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	0010      	movs	r0, r2
 80020a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	589b      	ldr	r3, [r3, r2]
 80020b0:	2194      	movs	r1, #148	; 0x94
 80020b2:	187a      	adds	r2, r7, r1
 80020b4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	4013      	ands	r3, r2
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d004      	beq.n	80020ce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2228      	movs	r2, #40	; 0x28
 80020ca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80020cc:	d047      	beq.n	800215e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fcf7 	bl	8002ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	4013      	ands	r3, r2
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d137      	bne.n	8002154 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e4:	f3ef 8310 	mrs	r3, PRIMASK
 80020e8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80020ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ec:	2090      	movs	r0, #144	; 0x90
 80020ee:	183a      	adds	r2, r7, r0
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f8:	f383 8810 	msr	PRIMASK, r3
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	438a      	bics	r2, r1
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	183b      	adds	r3, r7, r0
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002116:	f383 8810 	msr	PRIMASK, r3
}
 800211a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	2b00      	cmp	r3, #0
 8002122:	d012      	beq.n	800214a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_UART_IRQHandler+0x2a0>)
 800212a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe fe55 	bl	8000de0 <HAL_DMA_Abort_IT>
 8002136:	1e03      	subs	r3, r0, #0
 8002138:	d01a      	beq.n	8002170 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	0018      	movs	r0, r3
 8002146:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002148:	e012      	b.n	8002170 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 f9a5 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002152:	e00d      	b.n	8002170 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f9a0 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800215c:	e008      	b.n	8002170 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f000 f99b 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	2100      	movs	r1, #0
 800216c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800216e:	e17f      	b.n	8002470 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	46c0      	nop			; (mov r8, r8)
    return;
 8002172:	e17d      	b.n	8002470 <HAL_UART_IRQHandler+0x594>
 8002174:	0000080f 	.word	0x0000080f
 8002178:	04000120 	.word	0x04000120
 800217c:	08002b89 	.word	0x08002b89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002184:	2b01      	cmp	r3, #1
 8002186:	d000      	beq.n	800218a <HAL_UART_IRQHandler+0x2ae>
 8002188:	e131      	b.n	80023ee <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800218a:	23a4      	movs	r3, #164	; 0xa4
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2210      	movs	r2, #16
 8002192:	4013      	ands	r3, r2
 8002194:	d100      	bne.n	8002198 <HAL_UART_IRQHandler+0x2bc>
 8002196:	e12a      	b.n	80023ee <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002198:	23a0      	movs	r3, #160	; 0xa0
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2210      	movs	r2, #16
 80021a0:	4013      	ands	r3, r2
 80021a2:	d100      	bne.n	80021a6 <HAL_UART_IRQHandler+0x2ca>
 80021a4:	e123      	b.n	80023ee <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2210      	movs	r2, #16
 80021ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2240      	movs	r2, #64	; 0x40
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d000      	beq.n	80021be <HAL_UART_IRQHandler+0x2e2>
 80021bc:	e09b      	b.n	80022f6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	217e      	movs	r1, #126	; 0x7e
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d100      	bne.n	80021d6 <HAL_UART_IRQHandler+0x2fa>
 80021d4:	e14e      	b.n	8002474 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2258      	movs	r2, #88	; 0x58
 80021da:	5a9b      	ldrh	r3, [r3, r2]
 80021dc:	187a      	adds	r2, r7, r1
 80021de:	8812      	ldrh	r2, [r2, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d300      	bcc.n	80021e6 <HAL_UART_IRQHandler+0x30a>
 80021e4:	e146      	b.n	8002474 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	187a      	adds	r2, r7, r1
 80021ea:	215a      	movs	r1, #90	; 0x5a
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d06e      	beq.n	80022d8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fa:	f3ef 8310 	mrs	r3, PRIMASK
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002202:	67bb      	str	r3, [r7, #120]	; 0x78
 8002204:	2301      	movs	r3, #1
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	f383 8810 	msr	PRIMASK, r3
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	499a      	ldr	r1, [pc, #616]	; (8002484 <HAL_UART_IRQHandler+0x5a8>)
 800221c:	400a      	ands	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002226:	f383 8810 	msr	PRIMASK, r3
}
 800222a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800222c:	f3ef 8310 	mrs	r3, PRIMASK
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002234:	677b      	str	r3, [r7, #116]	; 0x74
 8002236:	2301      	movs	r3, #1
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	f383 8810 	msr	PRIMASK, r3
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2101      	movs	r1, #1
 800224e:	438a      	bics	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002254:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002258:	f383 8810 	msr	PRIMASK, r3
}
 800225c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800225e:	f3ef 8310 	mrs	r3, PRIMASK
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002264:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002266:	673b      	str	r3, [r7, #112]	; 0x70
 8002268:	2301      	movs	r3, #1
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226e:	f383 8810 	msr	PRIMASK, r3
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	438a      	bics	r2, r1
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002286:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800228a:	f383 8810 	msr	PRIMASK, r3
}
 800228e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229c:	f3ef 8310 	mrs	r3, PRIMASK
 80022a0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80022a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022a6:	2301      	movs	r3, #1
 80022a8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ac:	f383 8810 	msr	PRIMASK, r3
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2110      	movs	r1, #16
 80022be:	438a      	bics	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c8:	f383 8810 	msr	PRIMASK, r3
}
 80022cc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fe fd4c 	bl	8000d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2258      	movs	r2, #88	; 0x58
 80022dc:	5a9a      	ldrh	r2, [r3, r2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	215a      	movs	r1, #90	; 0x5a
 80022e2:	5a5b      	ldrh	r3, [r3, r1]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0011      	movs	r1, r2
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 f8dc 	bl	80024ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80022f4:	e0be      	b.n	8002474 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2258      	movs	r2, #88	; 0x58
 80022fa:	5a99      	ldrh	r1, [r3, r2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	225a      	movs	r2, #90	; 0x5a
 8002300:	5a9b      	ldrh	r3, [r3, r2]
 8002302:	b29a      	uxth	r2, r3
 8002304:	208e      	movs	r0, #142	; 0x8e
 8002306:	183b      	adds	r3, r7, r0
 8002308:	1a8a      	subs	r2, r1, r2
 800230a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	225a      	movs	r2, #90	; 0x5a
 8002310:	5a9b      	ldrh	r3, [r3, r2]
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d100      	bne.n	800231a <HAL_UART_IRQHandler+0x43e>
 8002318:	e0ae      	b.n	8002478 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800231a:	183b      	adds	r3, r7, r0
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d100      	bne.n	8002324 <HAL_UART_IRQHandler+0x448>
 8002322:	e0a9      	b.n	8002478 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002324:	f3ef 8310 	mrs	r3, PRIMASK
 8002328:	60fb      	str	r3, [r7, #12]
  return(result);
 800232a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800232c:	2488      	movs	r4, #136	; 0x88
 800232e:	193a      	adds	r2, r7, r4
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f383 8810 	msr	PRIMASK, r3
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	494f      	ldr	r1, [pc, #316]	; (8002488 <HAL_UART_IRQHandler+0x5ac>)
 800234a:	400a      	ands	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	193b      	adds	r3, r7, r4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f383 8810 	msr	PRIMASK, r3
}
 800235a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235c:	f3ef 8310 	mrs	r3, PRIMASK
 8002360:	61bb      	str	r3, [r7, #24]
  return(result);
 8002362:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002364:	2484      	movs	r4, #132	; 0x84
 8002366:	193a      	adds	r2, r7, r4
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	2301      	movs	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f383 8810 	msr	PRIMASK, r3
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	438a      	bics	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	193b      	adds	r3, r7, r4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	f383 8810 	msr	PRIMASK, r3
}
 8002392:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a6:	f3ef 8310 	mrs	r3, PRIMASK
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ae:	2480      	movs	r4, #128	; 0x80
 80023b0:	193a      	adds	r2, r7, r4
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	2301      	movs	r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	f383 8810 	msr	PRIMASK, r3
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2110      	movs	r1, #16
 80023cc:	438a      	bics	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	f383 8810 	msr	PRIMASK, r3
}
 80023dc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023de:	183b      	adds	r3, r7, r0
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0011      	movs	r1, r2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 f860 	bl	80024ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023ec:	e044      	b.n	8002478 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80023ee:	23a4      	movs	r3, #164	; 0xa4
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	035b      	lsls	r3, r3, #13
 80023f8:	4013      	ands	r3, r2
 80023fa:	d010      	beq.n	800241e <HAL_UART_IRQHandler+0x542>
 80023fc:	239c      	movs	r3, #156	; 0x9c
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	03db      	lsls	r3, r3, #15
 8002406:	4013      	ands	r3, r2
 8002408:	d009      	beq.n	800241e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0352      	lsls	r2, r2, #13
 8002412:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 fbf8 	bl	8002c0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800241c:	e02f      	b.n	800247e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800241e:	23a4      	movs	r3, #164	; 0xa4
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	4013      	ands	r3, r2
 8002428:	d00f      	beq.n	800244a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800242a:	23a0      	movs	r3, #160	; 0xa0
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01e      	beq.n	800247c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	0010      	movs	r0, r2
 8002446:	4798      	blx	r3
    }
    return;
 8002448:	e018      	b.n	800247c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800244a:	23a4      	movs	r3, #164	; 0xa4
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	4013      	ands	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_UART_IRQHandler+0x5a2>
 8002456:	23a0      	movs	r3, #160	; 0xa0
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	4013      	ands	r3, r2
 8002460:	d00d      	beq.n	800247e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fba6 	bl	8002bb6 <UART_EndTransmit_IT>
    return;
 800246a:	e008      	b.n	800247e <HAL_UART_IRQHandler+0x5a2>
      return;
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	e006      	b.n	800247e <HAL_UART_IRQHandler+0x5a2>
    return;
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	e004      	b.n	800247e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	e002      	b.n	800247e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	e000      	b.n	800247e <HAL_UART_IRQHandler+0x5a2>
    return;
 800247c:	46c0      	nop			; (mov r8, r8)
  }

}
 800247e:	46bd      	mov	sp, r7
 8002480:	b02b      	add	sp, #172	; 0xac
 8002482:	bd90      	pop	{r4, r7, pc}
 8002484:	fffffeff 	.word	0xfffffeff
 8002488:	fffffedf 	.word	0xfffffedf

0800248c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	000a      	movs	r2, r1
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024cc:	231e      	movs	r3, #30
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a8d      	ldr	r2, [pc, #564]	; (8002728 <UART_SetConfig+0x264>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a88      	ldr	r2, [pc, #544]	; (800272c <UART_SetConfig+0x268>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a7f      	ldr	r2, [pc, #508]	; (8002730 <UART_SetConfig+0x26c>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7b      	ldr	r2, [pc, #492]	; (8002734 <UART_SetConfig+0x270>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d127      	bne.n	800259a <UART_SetConfig+0xd6>
 800254a:	4b7b      	ldr	r3, [pc, #492]	; (8002738 <UART_SetConfig+0x274>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	2203      	movs	r2, #3
 8002550:	4013      	ands	r3, r2
 8002552:	2b03      	cmp	r3, #3
 8002554:	d00d      	beq.n	8002572 <UART_SetConfig+0xae>
 8002556:	d81b      	bhi.n	8002590 <UART_SetConfig+0xcc>
 8002558:	2b02      	cmp	r3, #2
 800255a:	d014      	beq.n	8002586 <UART_SetConfig+0xc2>
 800255c:	d818      	bhi.n	8002590 <UART_SetConfig+0xcc>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <UART_SetConfig+0xa4>
 8002562:	2b01      	cmp	r3, #1
 8002564:	d00a      	beq.n	800257c <UART_SetConfig+0xb8>
 8002566:	e013      	b.n	8002590 <UART_SetConfig+0xcc>
 8002568:	231f      	movs	r3, #31
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	e021      	b.n	80025b6 <UART_SetConfig+0xf2>
 8002572:	231f      	movs	r3, #31
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2202      	movs	r2, #2
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e01c      	b.n	80025b6 <UART_SetConfig+0xf2>
 800257c:	231f      	movs	r3, #31
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2204      	movs	r2, #4
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e017      	b.n	80025b6 <UART_SetConfig+0xf2>
 8002586:	231f      	movs	r3, #31
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2208      	movs	r2, #8
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e012      	b.n	80025b6 <UART_SetConfig+0xf2>
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2210      	movs	r2, #16
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e00d      	b.n	80025b6 <UART_SetConfig+0xf2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a67      	ldr	r2, [pc, #412]	; (800273c <UART_SetConfig+0x278>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d104      	bne.n	80025ae <UART_SetConfig+0xea>
 80025a4:	231f      	movs	r3, #31
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e003      	b.n	80025b6 <UART_SetConfig+0xf2>
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2210      	movs	r2, #16
 80025b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	429a      	cmp	r2, r3
 80025c0:	d15d      	bne.n	800267e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80025c2:	231f      	movs	r3, #31
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d015      	beq.n	80025f8 <UART_SetConfig+0x134>
 80025cc:	dc18      	bgt.n	8002600 <UART_SetConfig+0x13c>
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d00d      	beq.n	80025ee <UART_SetConfig+0x12a>
 80025d2:	dc15      	bgt.n	8002600 <UART_SetConfig+0x13c>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <UART_SetConfig+0x11a>
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d005      	beq.n	80025e8 <UART_SetConfig+0x124>
 80025dc:	e010      	b.n	8002600 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025de:	f7ff fb69 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 80025e2:	0003      	movs	r3, r0
 80025e4:	61bb      	str	r3, [r7, #24]
        break;
 80025e6:	e012      	b.n	800260e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <UART_SetConfig+0x27c>)
 80025ea:	61bb      	str	r3, [r7, #24]
        break;
 80025ec:	e00f      	b.n	800260e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ee:	f7ff faf3 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80025f2:	0003      	movs	r3, r0
 80025f4:	61bb      	str	r3, [r7, #24]
        break;
 80025f6:	e00a      	b.n	800260e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	61bb      	str	r3, [r7, #24]
        break;
 80025fe:	e006      	b.n	800260e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002604:	231e      	movs	r3, #30
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
        break;
 800260c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d100      	bne.n	8002616 <UART_SetConfig+0x152>
 8002614:	e07b      	b.n	800270e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	005a      	lsls	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	18d2      	adds	r2, r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	0019      	movs	r1, r3
 8002628:	0010      	movs	r0, r2
 800262a:	f7fd fd77 	bl	800011c <__udivsi3>
 800262e:	0003      	movs	r3, r0
 8002630:	b29b      	uxth	r3, r3
 8002632:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	d91c      	bls.n	8002674 <UART_SetConfig+0x1b0>
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	429a      	cmp	r2, r3
 8002642:	d217      	bcs.n	8002674 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	b29a      	uxth	r2, r3
 8002648:	200e      	movs	r0, #14
 800264a:	183b      	adds	r3, r7, r0
 800264c:	210f      	movs	r1, #15
 800264e:	438a      	bics	r2, r1
 8002650:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	b29b      	uxth	r3, r3
 8002658:	2207      	movs	r2, #7
 800265a:	4013      	ands	r3, r2
 800265c:	b299      	uxth	r1, r3
 800265e:	183b      	adds	r3, r7, r0
 8002660:	183a      	adds	r2, r7, r0
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	183a      	adds	r2, r7, r0
 800266e:	8812      	ldrh	r2, [r2, #0]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	e04c      	b.n	800270e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002674:	231e      	movs	r3, #30
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e047      	b.n	800270e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800267e:	231f      	movs	r3, #31
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d015      	beq.n	80026b4 <UART_SetConfig+0x1f0>
 8002688:	dc18      	bgt.n	80026bc <UART_SetConfig+0x1f8>
 800268a:	2b04      	cmp	r3, #4
 800268c:	d00d      	beq.n	80026aa <UART_SetConfig+0x1e6>
 800268e:	dc15      	bgt.n	80026bc <UART_SetConfig+0x1f8>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <UART_SetConfig+0x1d6>
 8002694:	2b02      	cmp	r3, #2
 8002696:	d005      	beq.n	80026a4 <UART_SetConfig+0x1e0>
 8002698:	e010      	b.n	80026bc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800269a:	f7ff fb0b 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 800269e:	0003      	movs	r3, r0
 80026a0:	61bb      	str	r3, [r7, #24]
        break;
 80026a2:	e012      	b.n	80026ca <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026a4:	4b26      	ldr	r3, [pc, #152]	; (8002740 <UART_SetConfig+0x27c>)
 80026a6:	61bb      	str	r3, [r7, #24]
        break;
 80026a8:	e00f      	b.n	80026ca <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026aa:	f7ff fa95 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80026ae:	0003      	movs	r3, r0
 80026b0:	61bb      	str	r3, [r7, #24]
        break;
 80026b2:	e00a      	b.n	80026ca <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	61bb      	str	r3, [r7, #24]
        break;
 80026ba:	e006      	b.n	80026ca <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026c0:	231e      	movs	r3, #30
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
        break;
 80026c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01e      	beq.n	800270e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	085a      	lsrs	r2, r3, #1
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	18d2      	adds	r2, r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0019      	movs	r1, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	f7fd fd1b 	bl	800011c <__udivsi3>
 80026e6:	0003      	movs	r3, r0
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	d909      	bls.n	8002706 <UART_SetConfig+0x242>
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d204      	bcs.n	8002706 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	e003      	b.n	800270e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002706:	231e      	movs	r3, #30
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800271a:	231e      	movs	r3, #30
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b008      	add	sp, #32
 8002726:	bd80      	pop	{r7, pc}
 8002728:	ffff69f3 	.word	0xffff69f3
 800272c:	ffffcfff 	.word	0xffffcfff
 8002730:	fffff4ff 	.word	0xfffff4ff
 8002734:	40013800 	.word	0x40013800
 8002738:	40021000 	.word	0x40021000
 800273c:	40004400 	.word	0x40004400
 8002740:	007a1200 	.word	0x007a1200

08002744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d00b      	beq.n	800276e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a4a      	ldr	r2, [pc, #296]	; (8002888 <UART_AdvFeatureConfig+0x144>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d00b      	beq.n	8002790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a43      	ldr	r2, [pc, #268]	; (800288c <UART_AdvFeatureConfig+0x148>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2204      	movs	r2, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d00b      	beq.n	80027b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a3b      	ldr	r2, [pc, #236]	; (8002890 <UART_AdvFeatureConfig+0x14c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2208      	movs	r2, #8
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <UART_AdvFeatureConfig+0x150>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2210      	movs	r2, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <UART_AdvFeatureConfig+0x154>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2220      	movs	r2, #32
 80027fc:	4013      	ands	r3, r2
 80027fe:	d00b      	beq.n	8002818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <UART_AdvFeatureConfig+0x158>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	4013      	ands	r3, r2
 8002820:	d01d      	beq.n	800285e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <UART_AdvFeatureConfig+0x15c>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	035b      	lsls	r3, r3, #13
 8002842:	429a      	cmp	r2, r3
 8002844:	d10b      	bne.n	800285e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <UART_AdvFeatureConfig+0x160>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	4013      	ands	r3, r2
 8002866:	d00b      	beq.n	8002880 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <UART_AdvFeatureConfig+0x164>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}
 8002888:	fffdffff 	.word	0xfffdffff
 800288c:	fffeffff 	.word	0xfffeffff
 8002890:	fffbffff 	.word	0xfffbffff
 8002894:	ffff7fff 	.word	0xffff7fff
 8002898:	ffffefff 	.word	0xffffefff
 800289c:	ffffdfff 	.word	0xffffdfff
 80028a0:	ffefffff 	.word	0xffefffff
 80028a4:	ff9fffff 	.word	0xff9fffff
 80028a8:	fff7ffff 	.word	0xfff7ffff

080028ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	2100      	movs	r1, #0
 80028ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028bc:	f7fe f904 	bl	8000ac8 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d10c      	bne.n	80028ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	0391      	lsls	r1, r2, #14
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <UART_CheckIdleState+0x8c>)
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	f000 f82c 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e021      	b.n	8002930 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2204      	movs	r2, #4
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d10c      	bne.n	8002914 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	03d1      	lsls	r1, r2, #15
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <UART_CheckIdleState+0x8c>)
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	f000 f818 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800290c:	1e03      	subs	r3, r0, #0
 800290e:	d001      	beq.n	8002914 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e00d      	b.n	8002930 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2274      	movs	r2, #116	; 0x74
 800292a:	2100      	movs	r1, #0
 800292c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bd80      	pop	{r7, pc}
 8002938:	01ffffff 	.word	0x01ffffff

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b094      	sub	sp, #80	; 0x50
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e0a3      	b.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002950:	3301      	adds	r3, #1
 8002952:	d100      	bne.n	8002956 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002954:	e09f      	b.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe f8b7 	bl	8000ac8 <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13d      	bne.n	80029e8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296c:	f3ef 8310 	mrs	r3, PRIMASK
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002974:	647b      	str	r3, [r7, #68]	; 0x44
 8002976:	2301      	movs	r3, #1
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	f383 8810 	msr	PRIMASK, r3
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	494c      	ldr	r1, [pc, #304]	; (8002ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800298e:	400a      	ands	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	f383 8810 	msr	PRIMASK, r3
}
 800299c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299e:	f3ef 8310 	mrs	r3, PRIMASK
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40
 80029a8:	2301      	movs	r3, #1
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	f383 8810 	msr	PRIMASK, r3
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	438a      	bics	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ca:	f383 8810 	msr	PRIMASK, r3
}
 80029ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2274      	movs	r2, #116	; 0x74
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e067      	b.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d050      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	401a      	ands	r2, r3
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d146      	bne.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a12:	f3ef 8310 	mrs	r3, PRIMASK
 8002a16:	613b      	str	r3, [r7, #16]
  return(result);
 8002a18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f383 8810 	msr	PRIMASK, r3
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4923      	ldr	r1, [pc, #140]	; (8002ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a44:	f3ef 8310 	mrs	r3, PRIMASK
 8002a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a4e:	2301      	movs	r3, #1
 8002a50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	438a      	bics	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	2120      	movs	r1, #32
 8002a88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2274      	movs	r2, #116	; 0x74
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e010      	b.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	425a      	negs	r2, r3
 8002aa6:	4153      	adcs	r3, r2
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	001a      	movs	r2, r3
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d100      	bne.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002ab4:	e74b      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b014      	add	sp, #80	; 0x50
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	fffffe5f 	.word	0xfffffe5f

08002ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002acc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8002ad2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4925      	ldr	r1, [pc, #148]	; (8002b84 <UART_EndRxTransfer+0xc0>)
 8002aee:	400a      	ands	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afe:	f3ef 8310 	mrs	r3, PRIMASK
 8002b02:	623b      	str	r3, [r7, #32]
  return(result);
 8002b04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f383 8810 	msr	PRIMASK, r3
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	438a      	bics	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d118      	bne.n	8002b6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b38:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b42:	2301      	movs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2110      	movs	r1, #16
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b00e      	add	sp, #56	; 0x38
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	fffffedf 	.word	0xfffffedf

08002b88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	225a      	movs	r2, #90	; 0x5a
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2252      	movs	r2, #82	; 0x52
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff fc77 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f383 8810 	msr	PRIMASK, r3
}
 8002bee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff fc44 	bl	800248c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <__errno>:
 8002c1c:	4b01      	ldr	r3, [pc, #4]	; (8002c24 <__errno+0x8>)
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	4770      	bx	lr
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	2000000c 	.word	0x2000000c

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	2600      	movs	r6, #0
 8002c2c:	4d0c      	ldr	r5, [pc, #48]	; (8002c60 <__libc_init_array+0x38>)
 8002c2e:	4c0d      	ldr	r4, [pc, #52]	; (8002c64 <__libc_init_array+0x3c>)
 8002c30:	1b64      	subs	r4, r4, r5
 8002c32:	10a4      	asrs	r4, r4, #2
 8002c34:	42a6      	cmp	r6, r4
 8002c36:	d109      	bne.n	8002c4c <__libc_init_array+0x24>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	f000 fc8b 	bl	8003554 <_init>
 8002c3e:	4d0a      	ldr	r5, [pc, #40]	; (8002c68 <__libc_init_array+0x40>)
 8002c40:	4c0a      	ldr	r4, [pc, #40]	; (8002c6c <__libc_init_array+0x44>)
 8002c42:	1b64      	subs	r4, r4, r5
 8002c44:	10a4      	asrs	r4, r4, #2
 8002c46:	42a6      	cmp	r6, r4
 8002c48:	d105      	bne.n	8002c56 <__libc_init_array+0x2e>
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	00b3      	lsls	r3, r6, #2
 8002c4e:	58eb      	ldr	r3, [r5, r3]
 8002c50:	4798      	blx	r3
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7ee      	b.n	8002c34 <__libc_init_array+0xc>
 8002c56:	00b3      	lsls	r3, r6, #2
 8002c58:	58eb      	ldr	r3, [r5, r3]
 8002c5a:	4798      	blx	r3
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	e7f2      	b.n	8002c46 <__libc_init_array+0x1e>
 8002c60:	08003630 	.word	0x08003630
 8002c64:	08003630 	.word	0x08003630
 8002c68:	08003630 	.word	0x08003630
 8002c6c:	08003634 	.word	0x08003634

08002c70 <memset>:
 8002c70:	0003      	movs	r3, r0
 8002c72:	1882      	adds	r2, r0, r2
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d100      	bne.n	8002c7a <memset+0xa>
 8002c78:	4770      	bx	lr
 8002c7a:	7019      	strb	r1, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	e7f9      	b.n	8002c74 <memset+0x4>

08002c80 <siprintf>:
 8002c80:	b40e      	push	{r1, r2, r3}
 8002c82:	b500      	push	{lr}
 8002c84:	490b      	ldr	r1, [pc, #44]	; (8002cb4 <siprintf+0x34>)
 8002c86:	b09c      	sub	sp, #112	; 0x70
 8002c88:	ab1d      	add	r3, sp, #116	; 0x74
 8002c8a:	9002      	str	r0, [sp, #8]
 8002c8c:	9006      	str	r0, [sp, #24]
 8002c8e:	9107      	str	r1, [sp, #28]
 8002c90:	9104      	str	r1, [sp, #16]
 8002c92:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <siprintf+0x38>)
 8002c94:	4909      	ldr	r1, [pc, #36]	; (8002cbc <siprintf+0x3c>)
 8002c96:	cb04      	ldmia	r3!, {r2}
 8002c98:	9105      	str	r1, [sp, #20]
 8002c9a:	6800      	ldr	r0, [r0, #0]
 8002c9c:	a902      	add	r1, sp, #8
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	f000 f870 	bl	8002d84 <_svfiprintf_r>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9a02      	ldr	r2, [sp, #8]
 8002ca8:	7013      	strb	r3, [r2, #0]
 8002caa:	b01c      	add	sp, #112	; 0x70
 8002cac:	bc08      	pop	{r3}
 8002cae:	b003      	add	sp, #12
 8002cb0:	4718      	bx	r3
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	7fffffff 	.word	0x7fffffff
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	ffff0208 	.word	0xffff0208

08002cc0 <__ssputs_r>:
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	688e      	ldr	r6, [r1, #8]
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	0007      	movs	r7, r0
 8002cc8:	000c      	movs	r4, r1
 8002cca:	9203      	str	r2, [sp, #12]
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	429e      	cmp	r6, r3
 8002cd0:	d83c      	bhi.n	8002d4c <__ssputs_r+0x8c>
 8002cd2:	2390      	movs	r3, #144	; 0x90
 8002cd4:	898a      	ldrh	r2, [r1, #12]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	421a      	tst	r2, r3
 8002cda:	d034      	beq.n	8002d46 <__ssputs_r+0x86>
 8002cdc:	6909      	ldr	r1, [r1, #16]
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	6960      	ldr	r0, [r4, #20]
 8002ce2:	1a5b      	subs	r3, r3, r1
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	4343      	muls	r3, r0
 8002cea:	0fdd      	lsrs	r5, r3, #31
 8002cec:	18ed      	adds	r5, r5, r3
 8002cee:	9b01      	ldr	r3, [sp, #4]
 8002cf0:	9802      	ldr	r0, [sp, #8]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	181b      	adds	r3, r3, r0
 8002cf6:	106d      	asrs	r5, r5, #1
 8002cf8:	42ab      	cmp	r3, r5
 8002cfa:	d900      	bls.n	8002cfe <__ssputs_r+0x3e>
 8002cfc:	001d      	movs	r5, r3
 8002cfe:	0553      	lsls	r3, r2, #21
 8002d00:	d532      	bpl.n	8002d68 <__ssputs_r+0xa8>
 8002d02:	0029      	movs	r1, r5
 8002d04:	0038      	movs	r0, r7
 8002d06:	f000 fb53 	bl	80033b0 <_malloc_r>
 8002d0a:	1e06      	subs	r6, r0, #0
 8002d0c:	d109      	bne.n	8002d22 <__ssputs_r+0x62>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	2340      	movs	r3, #64	; 0x40
 8002d14:	2001      	movs	r0, #1
 8002d16:	89a2      	ldrh	r2, [r4, #12]
 8002d18:	4240      	negs	r0, r0
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	81a3      	strh	r3, [r4, #12]
 8002d1e:	b005      	add	sp, #20
 8002d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d22:	9a02      	ldr	r2, [sp, #8]
 8002d24:	6921      	ldr	r1, [r4, #16]
 8002d26:	f000 faba 	bl	800329e <memcpy>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <__ssputs_r+0xc0>)
 8002d2e:	401a      	ands	r2, r3
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	4313      	orrs	r3, r2
 8002d34:	81a3      	strh	r3, [r4, #12]
 8002d36:	9b02      	ldr	r3, [sp, #8]
 8002d38:	6126      	str	r6, [r4, #16]
 8002d3a:	18f6      	adds	r6, r6, r3
 8002d3c:	6026      	str	r6, [r4, #0]
 8002d3e:	6165      	str	r5, [r4, #20]
 8002d40:	9e01      	ldr	r6, [sp, #4]
 8002d42:	1aed      	subs	r5, r5, r3
 8002d44:	60a5      	str	r5, [r4, #8]
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	429e      	cmp	r6, r3
 8002d4a:	d900      	bls.n	8002d4e <__ssputs_r+0x8e>
 8002d4c:	9e01      	ldr	r6, [sp, #4]
 8002d4e:	0032      	movs	r2, r6
 8002d50:	9903      	ldr	r1, [sp, #12]
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	f000 faac 	bl	80032b0 <memmove>
 8002d58:	68a3      	ldr	r3, [r4, #8]
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	1b9b      	subs	r3, r3, r6
 8002d5e:	60a3      	str	r3, [r4, #8]
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	199e      	adds	r6, r3, r6
 8002d64:	6026      	str	r6, [r4, #0]
 8002d66:	e7da      	b.n	8002d1e <__ssputs_r+0x5e>
 8002d68:	002a      	movs	r2, r5
 8002d6a:	0038      	movs	r0, r7
 8002d6c:	f000 fb96 	bl	800349c <_realloc_r>
 8002d70:	1e06      	subs	r6, r0, #0
 8002d72:	d1e0      	bne.n	8002d36 <__ssputs_r+0x76>
 8002d74:	0038      	movs	r0, r7
 8002d76:	6921      	ldr	r1, [r4, #16]
 8002d78:	f000 faae 	bl	80032d8 <_free_r>
 8002d7c:	e7c7      	b.n	8002d0e <__ssputs_r+0x4e>
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	fffffb7f 	.word	0xfffffb7f

08002d84 <_svfiprintf_r>:
 8002d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d86:	b0a1      	sub	sp, #132	; 0x84
 8002d88:	9003      	str	r0, [sp, #12]
 8002d8a:	001d      	movs	r5, r3
 8002d8c:	898b      	ldrh	r3, [r1, #12]
 8002d8e:	000f      	movs	r7, r1
 8002d90:	0016      	movs	r6, r2
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	d511      	bpl.n	8002dba <_svfiprintf_r+0x36>
 8002d96:	690b      	ldr	r3, [r1, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10e      	bne.n	8002dba <_svfiprintf_r+0x36>
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	f000 fb07 	bl	80033b0 <_malloc_r>
 8002da2:	6038      	str	r0, [r7, #0]
 8002da4:	6138      	str	r0, [r7, #16]
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d105      	bne.n	8002db6 <_svfiprintf_r+0x32>
 8002daa:	230c      	movs	r3, #12
 8002dac:	9a03      	ldr	r2, [sp, #12]
 8002dae:	3801      	subs	r0, #1
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	b021      	add	sp, #132	; 0x84
 8002db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db6:	2340      	movs	r3, #64	; 0x40
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	ac08      	add	r4, sp, #32
 8002dbe:	6163      	str	r3, [r4, #20]
 8002dc0:	3320      	adds	r3, #32
 8002dc2:	7663      	strb	r3, [r4, #25]
 8002dc4:	3310      	adds	r3, #16
 8002dc6:	76a3      	strb	r3, [r4, #26]
 8002dc8:	9507      	str	r5, [sp, #28]
 8002dca:	0035      	movs	r5, r6
 8002dcc:	782b      	ldrb	r3, [r5, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <_svfiprintf_r+0x52>
 8002dd2:	2b25      	cmp	r3, #37	; 0x25
 8002dd4:	d147      	bne.n	8002e66 <_svfiprintf_r+0xe2>
 8002dd6:	1bab      	subs	r3, r5, r6
 8002dd8:	9305      	str	r3, [sp, #20]
 8002dda:	42b5      	cmp	r5, r6
 8002ddc:	d00c      	beq.n	8002df8 <_svfiprintf_r+0x74>
 8002dde:	0032      	movs	r2, r6
 8002de0:	0039      	movs	r1, r7
 8002de2:	9803      	ldr	r0, [sp, #12]
 8002de4:	f7ff ff6c 	bl	8002cc0 <__ssputs_r>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d100      	bne.n	8002dee <_svfiprintf_r+0x6a>
 8002dec:	e0ae      	b.n	8002f4c <_svfiprintf_r+0x1c8>
 8002dee:	6962      	ldr	r2, [r4, #20]
 8002df0:	9b05      	ldr	r3, [sp, #20]
 8002df2:	4694      	mov	ip, r2
 8002df4:	4463      	add	r3, ip
 8002df6:	6163      	str	r3, [r4, #20]
 8002df8:	782b      	ldrb	r3, [r5, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d100      	bne.n	8002e00 <_svfiprintf_r+0x7c>
 8002dfe:	e0a5      	b.n	8002f4c <_svfiprintf_r+0x1c8>
 8002e00:	2201      	movs	r2, #1
 8002e02:	2300      	movs	r3, #0
 8002e04:	4252      	negs	r2, r2
 8002e06:	6062      	str	r2, [r4, #4]
 8002e08:	a904      	add	r1, sp, #16
 8002e0a:	3254      	adds	r2, #84	; 0x54
 8002e0c:	1852      	adds	r2, r2, r1
 8002e0e:	1c6e      	adds	r6, r5, #1
 8002e10:	6023      	str	r3, [r4, #0]
 8002e12:	60e3      	str	r3, [r4, #12]
 8002e14:	60a3      	str	r3, [r4, #8]
 8002e16:	7013      	strb	r3, [r2, #0]
 8002e18:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e1a:	2205      	movs	r2, #5
 8002e1c:	7831      	ldrb	r1, [r6, #0]
 8002e1e:	4854      	ldr	r0, [pc, #336]	; (8002f70 <_svfiprintf_r+0x1ec>)
 8002e20:	f000 fa32 	bl	8003288 <memchr>
 8002e24:	1c75      	adds	r5, r6, #1
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d11f      	bne.n	8002e6a <_svfiprintf_r+0xe6>
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	06d3      	lsls	r3, r2, #27
 8002e2e:	d504      	bpl.n	8002e3a <_svfiprintf_r+0xb6>
 8002e30:	2353      	movs	r3, #83	; 0x53
 8002e32:	a904      	add	r1, sp, #16
 8002e34:	185b      	adds	r3, r3, r1
 8002e36:	2120      	movs	r1, #32
 8002e38:	7019      	strb	r1, [r3, #0]
 8002e3a:	0713      	lsls	r3, r2, #28
 8002e3c:	d504      	bpl.n	8002e48 <_svfiprintf_r+0xc4>
 8002e3e:	2353      	movs	r3, #83	; 0x53
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	185b      	adds	r3, r3, r1
 8002e44:	212b      	movs	r1, #43	; 0x2b
 8002e46:	7019      	strb	r1, [r3, #0]
 8002e48:	7833      	ldrb	r3, [r6, #0]
 8002e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e4c:	d016      	beq.n	8002e7c <_svfiprintf_r+0xf8>
 8002e4e:	0035      	movs	r5, r6
 8002e50:	2100      	movs	r1, #0
 8002e52:	200a      	movs	r0, #10
 8002e54:	68e3      	ldr	r3, [r4, #12]
 8002e56:	782a      	ldrb	r2, [r5, #0]
 8002e58:	1c6e      	adds	r6, r5, #1
 8002e5a:	3a30      	subs	r2, #48	; 0x30
 8002e5c:	2a09      	cmp	r2, #9
 8002e5e:	d94e      	bls.n	8002efe <_svfiprintf_r+0x17a>
 8002e60:	2900      	cmp	r1, #0
 8002e62:	d111      	bne.n	8002e88 <_svfiprintf_r+0x104>
 8002e64:	e017      	b.n	8002e96 <_svfiprintf_r+0x112>
 8002e66:	3501      	adds	r5, #1
 8002e68:	e7b0      	b.n	8002dcc <_svfiprintf_r+0x48>
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <_svfiprintf_r+0x1ec>)
 8002e6c:	6822      	ldr	r2, [r4, #0]
 8002e6e:	1ac0      	subs	r0, r0, r3
 8002e70:	2301      	movs	r3, #1
 8002e72:	4083      	lsls	r3, r0
 8002e74:	4313      	orrs	r3, r2
 8002e76:	002e      	movs	r6, r5
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	e7ce      	b.n	8002e1a <_svfiprintf_r+0x96>
 8002e7c:	9b07      	ldr	r3, [sp, #28]
 8002e7e:	1d19      	adds	r1, r3, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	9107      	str	r1, [sp, #28]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	db01      	blt.n	8002e8c <_svfiprintf_r+0x108>
 8002e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e8a:	e004      	b.n	8002e96 <_svfiprintf_r+0x112>
 8002e8c:	425b      	negs	r3, r3
 8002e8e:	60e3      	str	r3, [r4, #12]
 8002e90:	2302      	movs	r3, #2
 8002e92:	4313      	orrs	r3, r2
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	782b      	ldrb	r3, [r5, #0]
 8002e98:	2b2e      	cmp	r3, #46	; 0x2e
 8002e9a:	d10a      	bne.n	8002eb2 <_svfiprintf_r+0x12e>
 8002e9c:	786b      	ldrb	r3, [r5, #1]
 8002e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002ea0:	d135      	bne.n	8002f0e <_svfiprintf_r+0x18a>
 8002ea2:	9b07      	ldr	r3, [sp, #28]
 8002ea4:	3502      	adds	r5, #2
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	9207      	str	r2, [sp, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db2b      	blt.n	8002f08 <_svfiprintf_r+0x184>
 8002eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb2:	4e30      	ldr	r6, [pc, #192]	; (8002f74 <_svfiprintf_r+0x1f0>)
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	0030      	movs	r0, r6
 8002eb8:	7829      	ldrb	r1, [r5, #0]
 8002eba:	f000 f9e5 	bl	8003288 <memchr>
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d006      	beq.n	8002ed0 <_svfiprintf_r+0x14c>
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	1b80      	subs	r0, r0, r6
 8002ec6:	4083      	lsls	r3, r0
 8002ec8:	6822      	ldr	r2, [r4, #0]
 8002eca:	3501      	adds	r5, #1
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	7829      	ldrb	r1, [r5, #0]
 8002ed2:	2206      	movs	r2, #6
 8002ed4:	4828      	ldr	r0, [pc, #160]	; (8002f78 <_svfiprintf_r+0x1f4>)
 8002ed6:	1c6e      	adds	r6, r5, #1
 8002ed8:	7621      	strb	r1, [r4, #24]
 8002eda:	f000 f9d5 	bl	8003288 <memchr>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d03c      	beq.n	8002f5c <_svfiprintf_r+0x1d8>
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <_svfiprintf_r+0x1f8>)
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d125      	bne.n	8002f34 <_svfiprintf_r+0x1b0>
 8002ee8:	2207      	movs	r2, #7
 8002eea:	9b07      	ldr	r3, [sp, #28]
 8002eec:	3307      	adds	r3, #7
 8002eee:	4393      	bics	r3, r2
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	9307      	str	r3, [sp, #28]
 8002ef4:	6963      	ldr	r3, [r4, #20]
 8002ef6:	9a04      	ldr	r2, [sp, #16]
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	6163      	str	r3, [r4, #20]
 8002efc:	e765      	b.n	8002dca <_svfiprintf_r+0x46>
 8002efe:	4343      	muls	r3, r0
 8002f00:	0035      	movs	r5, r6
 8002f02:	2101      	movs	r1, #1
 8002f04:	189b      	adds	r3, r3, r2
 8002f06:	e7a6      	b.n	8002e56 <_svfiprintf_r+0xd2>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	425b      	negs	r3, r3
 8002f0c:	e7d0      	b.n	8002eb0 <_svfiprintf_r+0x12c>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	200a      	movs	r0, #10
 8002f12:	001a      	movs	r2, r3
 8002f14:	3501      	adds	r5, #1
 8002f16:	6063      	str	r3, [r4, #4]
 8002f18:	7829      	ldrb	r1, [r5, #0]
 8002f1a:	1c6e      	adds	r6, r5, #1
 8002f1c:	3930      	subs	r1, #48	; 0x30
 8002f1e:	2909      	cmp	r1, #9
 8002f20:	d903      	bls.n	8002f2a <_svfiprintf_r+0x1a6>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0c5      	beq.n	8002eb2 <_svfiprintf_r+0x12e>
 8002f26:	9209      	str	r2, [sp, #36]	; 0x24
 8002f28:	e7c3      	b.n	8002eb2 <_svfiprintf_r+0x12e>
 8002f2a:	4342      	muls	r2, r0
 8002f2c:	0035      	movs	r5, r6
 8002f2e:	2301      	movs	r3, #1
 8002f30:	1852      	adds	r2, r2, r1
 8002f32:	e7f1      	b.n	8002f18 <_svfiprintf_r+0x194>
 8002f34:	ab07      	add	r3, sp, #28
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	003a      	movs	r2, r7
 8002f3a:	0021      	movs	r1, r4
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <_svfiprintf_r+0x1fc>)
 8002f3e:	9803      	ldr	r0, [sp, #12]
 8002f40:	e000      	b.n	8002f44 <_svfiprintf_r+0x1c0>
 8002f42:	bf00      	nop
 8002f44:	9004      	str	r0, [sp, #16]
 8002f46:	9b04      	ldr	r3, [sp, #16]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	d1d3      	bne.n	8002ef4 <_svfiprintf_r+0x170>
 8002f4c:	89bb      	ldrh	r3, [r7, #12]
 8002f4e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f50:	065b      	lsls	r3, r3, #25
 8002f52:	d400      	bmi.n	8002f56 <_svfiprintf_r+0x1d2>
 8002f54:	e72d      	b.n	8002db2 <_svfiprintf_r+0x2e>
 8002f56:	2001      	movs	r0, #1
 8002f58:	4240      	negs	r0, r0
 8002f5a:	e72a      	b.n	8002db2 <_svfiprintf_r+0x2e>
 8002f5c:	ab07      	add	r3, sp, #28
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	003a      	movs	r2, r7
 8002f62:	0021      	movs	r1, r4
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <_svfiprintf_r+0x1fc>)
 8002f66:	9803      	ldr	r0, [sp, #12]
 8002f68:	f000 f87c 	bl	8003064 <_printf_i>
 8002f6c:	e7ea      	b.n	8002f44 <_svfiprintf_r+0x1c0>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	080035fc 	.word	0x080035fc
 8002f74:	08003602 	.word	0x08003602
 8002f78:	08003606 	.word	0x08003606
 8002f7c:	00000000 	.word	0x00000000
 8002f80:	08002cc1 	.word	0x08002cc1

08002f84 <_printf_common>:
 8002f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f86:	0015      	movs	r5, r2
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	688a      	ldr	r2, [r1, #8]
 8002f8c:	690b      	ldr	r3, [r1, #16]
 8002f8e:	000c      	movs	r4, r1
 8002f90:	9000      	str	r0, [sp, #0]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	da00      	bge.n	8002f98 <_printf_common+0x14>
 8002f96:	0013      	movs	r3, r2
 8002f98:	0022      	movs	r2, r4
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	3243      	adds	r2, #67	; 0x43
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	2a00      	cmp	r2, #0
 8002fa2:	d001      	beq.n	8002fa8 <_printf_common+0x24>
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	602b      	str	r3, [r5, #0]
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	069b      	lsls	r3, r3, #26
 8002fac:	d502      	bpl.n	8002fb4 <_printf_common+0x30>
 8002fae:	682b      	ldr	r3, [r5, #0]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	0017      	movs	r7, r2
 8002fba:	401f      	ands	r7, r3
 8002fbc:	421a      	tst	r2, r3
 8002fbe:	d027      	beq.n	8003010 <_printf_common+0x8c>
 8002fc0:	0023      	movs	r3, r4
 8002fc2:	3343      	adds	r3, #67	; 0x43
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	1e5a      	subs	r2, r3, #1
 8002fc8:	4193      	sbcs	r3, r2
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	0692      	lsls	r2, r2, #26
 8002fce:	d430      	bmi.n	8003032 <_printf_common+0xae>
 8002fd0:	0022      	movs	r2, r4
 8002fd2:	9901      	ldr	r1, [sp, #4]
 8002fd4:	9800      	ldr	r0, [sp, #0]
 8002fd6:	9e08      	ldr	r6, [sp, #32]
 8002fd8:	3243      	adds	r2, #67	; 0x43
 8002fda:	47b0      	blx	r6
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d025      	beq.n	800302c <_printf_common+0xa8>
 8002fe0:	2306      	movs	r3, #6
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	682a      	ldr	r2, [r5, #0]
 8002fe6:	68e1      	ldr	r1, [r4, #12]
 8002fe8:	2500      	movs	r5, #0
 8002fea:	4003      	ands	r3, r0
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d103      	bne.n	8002ff8 <_printf_common+0x74>
 8002ff0:	1a8d      	subs	r5, r1, r2
 8002ff2:	43eb      	mvns	r3, r5
 8002ff4:	17db      	asrs	r3, r3, #31
 8002ff6:	401d      	ands	r5, r3
 8002ff8:	68a3      	ldr	r3, [r4, #8]
 8002ffa:	6922      	ldr	r2, [r4, #16]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	dd01      	ble.n	8003004 <_printf_common+0x80>
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	18ed      	adds	r5, r5, r3
 8003004:	2700      	movs	r7, #0
 8003006:	42bd      	cmp	r5, r7
 8003008:	d120      	bne.n	800304c <_printf_common+0xc8>
 800300a:	2000      	movs	r0, #0
 800300c:	e010      	b.n	8003030 <_printf_common+0xac>
 800300e:	3701      	adds	r7, #1
 8003010:	68e3      	ldr	r3, [r4, #12]
 8003012:	682a      	ldr	r2, [r5, #0]
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	42bb      	cmp	r3, r7
 8003018:	ddd2      	ble.n	8002fc0 <_printf_common+0x3c>
 800301a:	0022      	movs	r2, r4
 800301c:	2301      	movs	r3, #1
 800301e:	9901      	ldr	r1, [sp, #4]
 8003020:	9800      	ldr	r0, [sp, #0]
 8003022:	9e08      	ldr	r6, [sp, #32]
 8003024:	3219      	adds	r2, #25
 8003026:	47b0      	blx	r6
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d1f0      	bne.n	800300e <_printf_common+0x8a>
 800302c:	2001      	movs	r0, #1
 800302e:	4240      	negs	r0, r0
 8003030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003032:	2030      	movs	r0, #48	; 0x30
 8003034:	18e1      	adds	r1, r4, r3
 8003036:	3143      	adds	r1, #67	; 0x43
 8003038:	7008      	strb	r0, [r1, #0]
 800303a:	0021      	movs	r1, r4
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	3145      	adds	r1, #69	; 0x45
 8003040:	7809      	ldrb	r1, [r1, #0]
 8003042:	18a2      	adds	r2, r4, r2
 8003044:	3243      	adds	r2, #67	; 0x43
 8003046:	3302      	adds	r3, #2
 8003048:	7011      	strb	r1, [r2, #0]
 800304a:	e7c1      	b.n	8002fd0 <_printf_common+0x4c>
 800304c:	0022      	movs	r2, r4
 800304e:	2301      	movs	r3, #1
 8003050:	9901      	ldr	r1, [sp, #4]
 8003052:	9800      	ldr	r0, [sp, #0]
 8003054:	9e08      	ldr	r6, [sp, #32]
 8003056:	321a      	adds	r2, #26
 8003058:	47b0      	blx	r6
 800305a:	1c43      	adds	r3, r0, #1
 800305c:	d0e6      	beq.n	800302c <_printf_common+0xa8>
 800305e:	3701      	adds	r7, #1
 8003060:	e7d1      	b.n	8003006 <_printf_common+0x82>
	...

08003064 <_printf_i>:
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	b08b      	sub	sp, #44	; 0x2c
 8003068:	9206      	str	r2, [sp, #24]
 800306a:	000a      	movs	r2, r1
 800306c:	3243      	adds	r2, #67	; 0x43
 800306e:	9307      	str	r3, [sp, #28]
 8003070:	9005      	str	r0, [sp, #20]
 8003072:	9204      	str	r2, [sp, #16]
 8003074:	7e0a      	ldrb	r2, [r1, #24]
 8003076:	000c      	movs	r4, r1
 8003078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800307a:	2a78      	cmp	r2, #120	; 0x78
 800307c:	d807      	bhi.n	800308e <_printf_i+0x2a>
 800307e:	2a62      	cmp	r2, #98	; 0x62
 8003080:	d809      	bhi.n	8003096 <_printf_i+0x32>
 8003082:	2a00      	cmp	r2, #0
 8003084:	d100      	bne.n	8003088 <_printf_i+0x24>
 8003086:	e0c1      	b.n	800320c <_printf_i+0x1a8>
 8003088:	2a58      	cmp	r2, #88	; 0x58
 800308a:	d100      	bne.n	800308e <_printf_i+0x2a>
 800308c:	e08c      	b.n	80031a8 <_printf_i+0x144>
 800308e:	0026      	movs	r6, r4
 8003090:	3642      	adds	r6, #66	; 0x42
 8003092:	7032      	strb	r2, [r6, #0]
 8003094:	e022      	b.n	80030dc <_printf_i+0x78>
 8003096:	0010      	movs	r0, r2
 8003098:	3863      	subs	r0, #99	; 0x63
 800309a:	2815      	cmp	r0, #21
 800309c:	d8f7      	bhi.n	800308e <_printf_i+0x2a>
 800309e:	f7fd f833 	bl	8000108 <__gnu_thumb1_case_shi>
 80030a2:	0016      	.short	0x0016
 80030a4:	fff6001f 	.word	0xfff6001f
 80030a8:	fff6fff6 	.word	0xfff6fff6
 80030ac:	001ffff6 	.word	0x001ffff6
 80030b0:	fff6fff6 	.word	0xfff6fff6
 80030b4:	fff6fff6 	.word	0xfff6fff6
 80030b8:	003600a8 	.word	0x003600a8
 80030bc:	fff6009a 	.word	0xfff6009a
 80030c0:	00b9fff6 	.word	0x00b9fff6
 80030c4:	0036fff6 	.word	0x0036fff6
 80030c8:	fff6fff6 	.word	0xfff6fff6
 80030cc:	009e      	.short	0x009e
 80030ce:	0026      	movs	r6, r4
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	3642      	adds	r6, #66	; 0x42
 80030d4:	1d11      	adds	r1, r2, #4
 80030d6:	6019      	str	r1, [r3, #0]
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	7033      	strb	r3, [r6, #0]
 80030dc:	2301      	movs	r3, #1
 80030de:	e0a7      	b.n	8003230 <_printf_i+0x1cc>
 80030e0:	6808      	ldr	r0, [r1, #0]
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	1d0a      	adds	r2, r1, #4
 80030e6:	0605      	lsls	r5, r0, #24
 80030e8:	d50b      	bpl.n	8003102 <_printf_i+0x9e>
 80030ea:	680d      	ldr	r5, [r1, #0]
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	2d00      	cmp	r5, #0
 80030f0:	da03      	bge.n	80030fa <_printf_i+0x96>
 80030f2:	232d      	movs	r3, #45	; 0x2d
 80030f4:	9a04      	ldr	r2, [sp, #16]
 80030f6:	426d      	negs	r5, r5
 80030f8:	7013      	strb	r3, [r2, #0]
 80030fa:	4b61      	ldr	r3, [pc, #388]	; (8003280 <_printf_i+0x21c>)
 80030fc:	270a      	movs	r7, #10
 80030fe:	9303      	str	r3, [sp, #12]
 8003100:	e01b      	b.n	800313a <_printf_i+0xd6>
 8003102:	680d      	ldr	r5, [r1, #0]
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	0641      	lsls	r1, r0, #25
 8003108:	d5f1      	bpl.n	80030ee <_printf_i+0x8a>
 800310a:	b22d      	sxth	r5, r5
 800310c:	e7ef      	b.n	80030ee <_printf_i+0x8a>
 800310e:	680d      	ldr	r5, [r1, #0]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	1d08      	adds	r0, r1, #4
 8003114:	6018      	str	r0, [r3, #0]
 8003116:	062e      	lsls	r6, r5, #24
 8003118:	d501      	bpl.n	800311e <_printf_i+0xba>
 800311a:	680d      	ldr	r5, [r1, #0]
 800311c:	e003      	b.n	8003126 <_printf_i+0xc2>
 800311e:	066d      	lsls	r5, r5, #25
 8003120:	d5fb      	bpl.n	800311a <_printf_i+0xb6>
 8003122:	680d      	ldr	r5, [r1, #0]
 8003124:	b2ad      	uxth	r5, r5
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <_printf_i+0x21c>)
 8003128:	2708      	movs	r7, #8
 800312a:	9303      	str	r3, [sp, #12]
 800312c:	2a6f      	cmp	r2, #111	; 0x6f
 800312e:	d000      	beq.n	8003132 <_printf_i+0xce>
 8003130:	3702      	adds	r7, #2
 8003132:	0023      	movs	r3, r4
 8003134:	2200      	movs	r2, #0
 8003136:	3343      	adds	r3, #67	; 0x43
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	6863      	ldr	r3, [r4, #4]
 800313c:	60a3      	str	r3, [r4, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db03      	blt.n	800314a <_printf_i+0xe6>
 8003142:	2204      	movs	r2, #4
 8003144:	6821      	ldr	r1, [r4, #0]
 8003146:	4391      	bics	r1, r2
 8003148:	6021      	str	r1, [r4, #0]
 800314a:	2d00      	cmp	r5, #0
 800314c:	d102      	bne.n	8003154 <_printf_i+0xf0>
 800314e:	9e04      	ldr	r6, [sp, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <_printf_i+0x10a>
 8003154:	9e04      	ldr	r6, [sp, #16]
 8003156:	0028      	movs	r0, r5
 8003158:	0039      	movs	r1, r7
 800315a:	f7fd f865 	bl	8000228 <__aeabi_uidivmod>
 800315e:	9b03      	ldr	r3, [sp, #12]
 8003160:	3e01      	subs	r6, #1
 8003162:	5c5b      	ldrb	r3, [r3, r1]
 8003164:	7033      	strb	r3, [r6, #0]
 8003166:	002b      	movs	r3, r5
 8003168:	0005      	movs	r5, r0
 800316a:	429f      	cmp	r7, r3
 800316c:	d9f3      	bls.n	8003156 <_printf_i+0xf2>
 800316e:	2f08      	cmp	r7, #8
 8003170:	d109      	bne.n	8003186 <_printf_i+0x122>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	07db      	lsls	r3, r3, #31
 8003176:	d506      	bpl.n	8003186 <_printf_i+0x122>
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	6922      	ldr	r2, [r4, #16]
 800317c:	4293      	cmp	r3, r2
 800317e:	dc02      	bgt.n	8003186 <_printf_i+0x122>
 8003180:	2330      	movs	r3, #48	; 0x30
 8003182:	3e01      	subs	r6, #1
 8003184:	7033      	strb	r3, [r6, #0]
 8003186:	9b04      	ldr	r3, [sp, #16]
 8003188:	1b9b      	subs	r3, r3, r6
 800318a:	6123      	str	r3, [r4, #16]
 800318c:	9b07      	ldr	r3, [sp, #28]
 800318e:	0021      	movs	r1, r4
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	9805      	ldr	r0, [sp, #20]
 8003194:	9b06      	ldr	r3, [sp, #24]
 8003196:	aa09      	add	r2, sp, #36	; 0x24
 8003198:	f7ff fef4 	bl	8002f84 <_printf_common>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d14c      	bne.n	800323a <_printf_i+0x1d6>
 80031a0:	2001      	movs	r0, #1
 80031a2:	4240      	negs	r0, r0
 80031a4:	b00b      	add	sp, #44	; 0x2c
 80031a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a8:	3145      	adds	r1, #69	; 0x45
 80031aa:	700a      	strb	r2, [r1, #0]
 80031ac:	4a34      	ldr	r2, [pc, #208]	; (8003280 <_printf_i+0x21c>)
 80031ae:	9203      	str	r2, [sp, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	6821      	ldr	r1, [r4, #0]
 80031b4:	ca20      	ldmia	r2!, {r5}
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	0608      	lsls	r0, r1, #24
 80031ba:	d516      	bpl.n	80031ea <_printf_i+0x186>
 80031bc:	07cb      	lsls	r3, r1, #31
 80031be:	d502      	bpl.n	80031c6 <_printf_i+0x162>
 80031c0:	2320      	movs	r3, #32
 80031c2:	4319      	orrs	r1, r3
 80031c4:	6021      	str	r1, [r4, #0]
 80031c6:	2710      	movs	r7, #16
 80031c8:	2d00      	cmp	r5, #0
 80031ca:	d1b2      	bne.n	8003132 <_printf_i+0xce>
 80031cc:	2320      	movs	r3, #32
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	439a      	bics	r2, r3
 80031d2:	6022      	str	r2, [r4, #0]
 80031d4:	e7ad      	b.n	8003132 <_printf_i+0xce>
 80031d6:	2220      	movs	r2, #32
 80031d8:	6809      	ldr	r1, [r1, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	6022      	str	r2, [r4, #0]
 80031de:	0022      	movs	r2, r4
 80031e0:	2178      	movs	r1, #120	; 0x78
 80031e2:	3245      	adds	r2, #69	; 0x45
 80031e4:	7011      	strb	r1, [r2, #0]
 80031e6:	4a27      	ldr	r2, [pc, #156]	; (8003284 <_printf_i+0x220>)
 80031e8:	e7e1      	b.n	80031ae <_printf_i+0x14a>
 80031ea:	0648      	lsls	r0, r1, #25
 80031ec:	d5e6      	bpl.n	80031bc <_printf_i+0x158>
 80031ee:	b2ad      	uxth	r5, r5
 80031f0:	e7e4      	b.n	80031bc <_printf_i+0x158>
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	680d      	ldr	r5, [r1, #0]
 80031f6:	1d10      	adds	r0, r2, #4
 80031f8:	6949      	ldr	r1, [r1, #20]
 80031fa:	6018      	str	r0, [r3, #0]
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	062e      	lsls	r6, r5, #24
 8003200:	d501      	bpl.n	8003206 <_printf_i+0x1a2>
 8003202:	6019      	str	r1, [r3, #0]
 8003204:	e002      	b.n	800320c <_printf_i+0x1a8>
 8003206:	066d      	lsls	r5, r5, #25
 8003208:	d5fb      	bpl.n	8003202 <_printf_i+0x19e>
 800320a:	8019      	strh	r1, [r3, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	9e04      	ldr	r6, [sp, #16]
 8003210:	6123      	str	r3, [r4, #16]
 8003212:	e7bb      	b.n	800318c <_printf_i+0x128>
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	1d11      	adds	r1, r2, #4
 8003218:	6019      	str	r1, [r3, #0]
 800321a:	6816      	ldr	r6, [r2, #0]
 800321c:	2100      	movs	r1, #0
 800321e:	0030      	movs	r0, r6
 8003220:	6862      	ldr	r2, [r4, #4]
 8003222:	f000 f831 	bl	8003288 <memchr>
 8003226:	2800      	cmp	r0, #0
 8003228:	d001      	beq.n	800322e <_printf_i+0x1ca>
 800322a:	1b80      	subs	r0, r0, r6
 800322c:	6060      	str	r0, [r4, #4]
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	6123      	str	r3, [r4, #16]
 8003232:	2300      	movs	r3, #0
 8003234:	9a04      	ldr	r2, [sp, #16]
 8003236:	7013      	strb	r3, [r2, #0]
 8003238:	e7a8      	b.n	800318c <_printf_i+0x128>
 800323a:	6923      	ldr	r3, [r4, #16]
 800323c:	0032      	movs	r2, r6
 800323e:	9906      	ldr	r1, [sp, #24]
 8003240:	9805      	ldr	r0, [sp, #20]
 8003242:	9d07      	ldr	r5, [sp, #28]
 8003244:	47a8      	blx	r5
 8003246:	1c43      	adds	r3, r0, #1
 8003248:	d0aa      	beq.n	80031a0 <_printf_i+0x13c>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	079b      	lsls	r3, r3, #30
 800324e:	d415      	bmi.n	800327c <_printf_i+0x218>
 8003250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003252:	68e0      	ldr	r0, [r4, #12]
 8003254:	4298      	cmp	r0, r3
 8003256:	daa5      	bge.n	80031a4 <_printf_i+0x140>
 8003258:	0018      	movs	r0, r3
 800325a:	e7a3      	b.n	80031a4 <_printf_i+0x140>
 800325c:	0022      	movs	r2, r4
 800325e:	2301      	movs	r3, #1
 8003260:	9906      	ldr	r1, [sp, #24]
 8003262:	9805      	ldr	r0, [sp, #20]
 8003264:	9e07      	ldr	r6, [sp, #28]
 8003266:	3219      	adds	r2, #25
 8003268:	47b0      	blx	r6
 800326a:	1c43      	adds	r3, r0, #1
 800326c:	d098      	beq.n	80031a0 <_printf_i+0x13c>
 800326e:	3501      	adds	r5, #1
 8003270:	68e3      	ldr	r3, [r4, #12]
 8003272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	42ab      	cmp	r3, r5
 8003278:	dcf0      	bgt.n	800325c <_printf_i+0x1f8>
 800327a:	e7e9      	b.n	8003250 <_printf_i+0x1ec>
 800327c:	2500      	movs	r5, #0
 800327e:	e7f7      	b.n	8003270 <_printf_i+0x20c>
 8003280:	0800360d 	.word	0x0800360d
 8003284:	0800361e 	.word	0x0800361e

08003288 <memchr>:
 8003288:	b2c9      	uxtb	r1, r1
 800328a:	1882      	adds	r2, r0, r2
 800328c:	4290      	cmp	r0, r2
 800328e:	d101      	bne.n	8003294 <memchr+0xc>
 8003290:	2000      	movs	r0, #0
 8003292:	4770      	bx	lr
 8003294:	7803      	ldrb	r3, [r0, #0]
 8003296:	428b      	cmp	r3, r1
 8003298:	d0fb      	beq.n	8003292 <memchr+0xa>
 800329a:	3001      	adds	r0, #1
 800329c:	e7f6      	b.n	800328c <memchr+0x4>

0800329e <memcpy>:
 800329e:	2300      	movs	r3, #0
 80032a0:	b510      	push	{r4, lr}
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d100      	bne.n	80032a8 <memcpy+0xa>
 80032a6:	bd10      	pop	{r4, pc}
 80032a8:	5ccc      	ldrb	r4, [r1, r3]
 80032aa:	54c4      	strb	r4, [r0, r3]
 80032ac:	3301      	adds	r3, #1
 80032ae:	e7f8      	b.n	80032a2 <memcpy+0x4>

080032b0 <memmove>:
 80032b0:	b510      	push	{r4, lr}
 80032b2:	4288      	cmp	r0, r1
 80032b4:	d902      	bls.n	80032bc <memmove+0xc>
 80032b6:	188b      	adds	r3, r1, r2
 80032b8:	4298      	cmp	r0, r3
 80032ba:	d303      	bcc.n	80032c4 <memmove+0x14>
 80032bc:	2300      	movs	r3, #0
 80032be:	e007      	b.n	80032d0 <memmove+0x20>
 80032c0:	5c8b      	ldrb	r3, [r1, r2]
 80032c2:	5483      	strb	r3, [r0, r2]
 80032c4:	3a01      	subs	r2, #1
 80032c6:	d2fb      	bcs.n	80032c0 <memmove+0x10>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	5ccc      	ldrb	r4, [r1, r3]
 80032cc:	54c4      	strb	r4, [r0, r3]
 80032ce:	3301      	adds	r3, #1
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1fa      	bne.n	80032ca <memmove+0x1a>
 80032d4:	e7f8      	b.n	80032c8 <memmove+0x18>
	...

080032d8 <_free_r>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	0005      	movs	r5, r0
 80032dc:	2900      	cmp	r1, #0
 80032de:	d010      	beq.n	8003302 <_free_r+0x2a>
 80032e0:	1f0c      	subs	r4, r1, #4
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da00      	bge.n	80032ea <_free_r+0x12>
 80032e8:	18e4      	adds	r4, r4, r3
 80032ea:	0028      	movs	r0, r5
 80032ec:	f000 f918 	bl	8003520 <__malloc_lock>
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <_free_r+0x90>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <_free_r+0x2c>
 80032f8:	6063      	str	r3, [r4, #4]
 80032fa:	6014      	str	r4, [r2, #0]
 80032fc:	0028      	movs	r0, r5
 80032fe:	f000 f917 	bl	8003530 <__malloc_unlock>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	42a3      	cmp	r3, r4
 8003306:	d908      	bls.n	800331a <_free_r+0x42>
 8003308:	6821      	ldr	r1, [r4, #0]
 800330a:	1860      	adds	r0, r4, r1
 800330c:	4283      	cmp	r3, r0
 800330e:	d1f3      	bne.n	80032f8 <_free_r+0x20>
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	1841      	adds	r1, r0, r1
 8003316:	6021      	str	r1, [r4, #0]
 8003318:	e7ee      	b.n	80032f8 <_free_r+0x20>
 800331a:	001a      	movs	r2, r3
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <_free_r+0x4e>
 8003322:	42a3      	cmp	r3, r4
 8003324:	d9f9      	bls.n	800331a <_free_r+0x42>
 8003326:	6811      	ldr	r1, [r2, #0]
 8003328:	1850      	adds	r0, r2, r1
 800332a:	42a0      	cmp	r0, r4
 800332c:	d10b      	bne.n	8003346 <_free_r+0x6e>
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	1809      	adds	r1, r1, r0
 8003332:	1850      	adds	r0, r2, r1
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	4283      	cmp	r3, r0
 8003338:	d1e0      	bne.n	80032fc <_free_r+0x24>
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	1841      	adds	r1, r0, r1
 8003340:	6011      	str	r1, [r2, #0]
 8003342:	6053      	str	r3, [r2, #4]
 8003344:	e7da      	b.n	80032fc <_free_r+0x24>
 8003346:	42a0      	cmp	r0, r4
 8003348:	d902      	bls.n	8003350 <_free_r+0x78>
 800334a:	230c      	movs	r3, #12
 800334c:	602b      	str	r3, [r5, #0]
 800334e:	e7d5      	b.n	80032fc <_free_r+0x24>
 8003350:	6821      	ldr	r1, [r4, #0]
 8003352:	1860      	adds	r0, r4, r1
 8003354:	4283      	cmp	r3, r0
 8003356:	d103      	bne.n	8003360 <_free_r+0x88>
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	1841      	adds	r1, r0, r1
 800335e:	6021      	str	r1, [r4, #0]
 8003360:	6063      	str	r3, [r4, #4]
 8003362:	6054      	str	r4, [r2, #4]
 8003364:	e7ca      	b.n	80032fc <_free_r+0x24>
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	200001c0 	.word	0x200001c0

0800336c <sbrk_aligned>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	4e0f      	ldr	r6, [pc, #60]	; (80033ac <sbrk_aligned+0x40>)
 8003370:	000d      	movs	r5, r1
 8003372:	6831      	ldr	r1, [r6, #0]
 8003374:	0004      	movs	r4, r0
 8003376:	2900      	cmp	r1, #0
 8003378:	d102      	bne.n	8003380 <sbrk_aligned+0x14>
 800337a:	f000 f8bf 	bl	80034fc <_sbrk_r>
 800337e:	6030      	str	r0, [r6, #0]
 8003380:	0029      	movs	r1, r5
 8003382:	0020      	movs	r0, r4
 8003384:	f000 f8ba 	bl	80034fc <_sbrk_r>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d00a      	beq.n	80033a2 <sbrk_aligned+0x36>
 800338c:	2303      	movs	r3, #3
 800338e:	1cc5      	adds	r5, r0, #3
 8003390:	439d      	bics	r5, r3
 8003392:	42a8      	cmp	r0, r5
 8003394:	d007      	beq.n	80033a6 <sbrk_aligned+0x3a>
 8003396:	1a29      	subs	r1, r5, r0
 8003398:	0020      	movs	r0, r4
 800339a:	f000 f8af 	bl	80034fc <_sbrk_r>
 800339e:	1c43      	adds	r3, r0, #1
 80033a0:	d101      	bne.n	80033a6 <sbrk_aligned+0x3a>
 80033a2:	2501      	movs	r5, #1
 80033a4:	426d      	negs	r5, r5
 80033a6:	0028      	movs	r0, r5
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	200001c4 	.word	0x200001c4

080033b0 <_malloc_r>:
 80033b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b2:	2203      	movs	r2, #3
 80033b4:	1ccb      	adds	r3, r1, #3
 80033b6:	4393      	bics	r3, r2
 80033b8:	3308      	adds	r3, #8
 80033ba:	0006      	movs	r6, r0
 80033bc:	001f      	movs	r7, r3
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d232      	bcs.n	8003428 <_malloc_r+0x78>
 80033c2:	270c      	movs	r7, #12
 80033c4:	42b9      	cmp	r1, r7
 80033c6:	d831      	bhi.n	800342c <_malloc_r+0x7c>
 80033c8:	0030      	movs	r0, r6
 80033ca:	f000 f8a9 	bl	8003520 <__malloc_lock>
 80033ce:	4d32      	ldr	r5, [pc, #200]	; (8003498 <_malloc_r+0xe8>)
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	001c      	movs	r4, r3
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d12e      	bne.n	8003436 <_malloc_r+0x86>
 80033d8:	0039      	movs	r1, r7
 80033da:	0030      	movs	r0, r6
 80033dc:	f7ff ffc6 	bl	800336c <sbrk_aligned>
 80033e0:	0004      	movs	r4, r0
 80033e2:	1c43      	adds	r3, r0, #1
 80033e4:	d11e      	bne.n	8003424 <_malloc_r+0x74>
 80033e6:	682c      	ldr	r4, [r5, #0]
 80033e8:	0025      	movs	r5, r4
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	d14a      	bne.n	8003484 <_malloc_r+0xd4>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	0029      	movs	r1, r5
 80033f2:	18e3      	adds	r3, r4, r3
 80033f4:	0030      	movs	r0, r6
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	f000 f880 	bl	80034fc <_sbrk_r>
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	4283      	cmp	r3, r0
 8003400:	d143      	bne.n	800348a <_malloc_r+0xda>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	3703      	adds	r7, #3
 8003406:	1aff      	subs	r7, r7, r3
 8003408:	2303      	movs	r3, #3
 800340a:	439f      	bics	r7, r3
 800340c:	3708      	adds	r7, #8
 800340e:	2f0c      	cmp	r7, #12
 8003410:	d200      	bcs.n	8003414 <_malloc_r+0x64>
 8003412:	270c      	movs	r7, #12
 8003414:	0039      	movs	r1, r7
 8003416:	0030      	movs	r0, r6
 8003418:	f7ff ffa8 	bl	800336c <sbrk_aligned>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d034      	beq.n	800348a <_malloc_r+0xda>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	19df      	adds	r7, r3, r7
 8003424:	6027      	str	r7, [r4, #0]
 8003426:	e013      	b.n	8003450 <_malloc_r+0xa0>
 8003428:	2b00      	cmp	r3, #0
 800342a:	dacb      	bge.n	80033c4 <_malloc_r+0x14>
 800342c:	230c      	movs	r3, #12
 800342e:	2500      	movs	r5, #0
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	0028      	movs	r0, r5
 8003434:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	1bd1      	subs	r1, r2, r7
 800343a:	d420      	bmi.n	800347e <_malloc_r+0xce>
 800343c:	290b      	cmp	r1, #11
 800343e:	d917      	bls.n	8003470 <_malloc_r+0xc0>
 8003440:	19e2      	adds	r2, r4, r7
 8003442:	6027      	str	r7, [r4, #0]
 8003444:	42a3      	cmp	r3, r4
 8003446:	d111      	bne.n	800346c <_malloc_r+0xbc>
 8003448:	602a      	str	r2, [r5, #0]
 800344a:	6863      	ldr	r3, [r4, #4]
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	6053      	str	r3, [r2, #4]
 8003450:	0030      	movs	r0, r6
 8003452:	0025      	movs	r5, r4
 8003454:	f000 f86c 	bl	8003530 <__malloc_unlock>
 8003458:	2207      	movs	r2, #7
 800345a:	350b      	adds	r5, #11
 800345c:	1d23      	adds	r3, r4, #4
 800345e:	4395      	bics	r5, r2
 8003460:	1aea      	subs	r2, r5, r3
 8003462:	429d      	cmp	r5, r3
 8003464:	d0e5      	beq.n	8003432 <_malloc_r+0x82>
 8003466:	1b5b      	subs	r3, r3, r5
 8003468:	50a3      	str	r3, [r4, r2]
 800346a:	e7e2      	b.n	8003432 <_malloc_r+0x82>
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	e7ec      	b.n	800344a <_malloc_r+0x9a>
 8003470:	6862      	ldr	r2, [r4, #4]
 8003472:	42a3      	cmp	r3, r4
 8003474:	d101      	bne.n	800347a <_malloc_r+0xca>
 8003476:	602a      	str	r2, [r5, #0]
 8003478:	e7ea      	b.n	8003450 <_malloc_r+0xa0>
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	e7e8      	b.n	8003450 <_malloc_r+0xa0>
 800347e:	0023      	movs	r3, r4
 8003480:	6864      	ldr	r4, [r4, #4]
 8003482:	e7a7      	b.n	80033d4 <_malloc_r+0x24>
 8003484:	002c      	movs	r4, r5
 8003486:	686d      	ldr	r5, [r5, #4]
 8003488:	e7af      	b.n	80033ea <_malloc_r+0x3a>
 800348a:	230c      	movs	r3, #12
 800348c:	0030      	movs	r0, r6
 800348e:	6033      	str	r3, [r6, #0]
 8003490:	f000 f84e 	bl	8003530 <__malloc_unlock>
 8003494:	e7cd      	b.n	8003432 <_malloc_r+0x82>
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	200001c0 	.word	0x200001c0

0800349c <_realloc_r>:
 800349c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800349e:	0007      	movs	r7, r0
 80034a0:	000e      	movs	r6, r1
 80034a2:	0014      	movs	r4, r2
 80034a4:	2900      	cmp	r1, #0
 80034a6:	d105      	bne.n	80034b4 <_realloc_r+0x18>
 80034a8:	0011      	movs	r1, r2
 80034aa:	f7ff ff81 	bl	80033b0 <_malloc_r>
 80034ae:	0005      	movs	r5, r0
 80034b0:	0028      	movs	r0, r5
 80034b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	d103      	bne.n	80034c0 <_realloc_r+0x24>
 80034b8:	f7ff ff0e 	bl	80032d8 <_free_r>
 80034bc:	0025      	movs	r5, r4
 80034be:	e7f7      	b.n	80034b0 <_realloc_r+0x14>
 80034c0:	f000 f83e 	bl	8003540 <_malloc_usable_size_r>
 80034c4:	9001      	str	r0, [sp, #4]
 80034c6:	4284      	cmp	r4, r0
 80034c8:	d803      	bhi.n	80034d2 <_realloc_r+0x36>
 80034ca:	0035      	movs	r5, r6
 80034cc:	0843      	lsrs	r3, r0, #1
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	d3ee      	bcc.n	80034b0 <_realloc_r+0x14>
 80034d2:	0021      	movs	r1, r4
 80034d4:	0038      	movs	r0, r7
 80034d6:	f7ff ff6b 	bl	80033b0 <_malloc_r>
 80034da:	1e05      	subs	r5, r0, #0
 80034dc:	d0e8      	beq.n	80034b0 <_realloc_r+0x14>
 80034de:	9b01      	ldr	r3, [sp, #4]
 80034e0:	0022      	movs	r2, r4
 80034e2:	429c      	cmp	r4, r3
 80034e4:	d900      	bls.n	80034e8 <_realloc_r+0x4c>
 80034e6:	001a      	movs	r2, r3
 80034e8:	0031      	movs	r1, r6
 80034ea:	0028      	movs	r0, r5
 80034ec:	f7ff fed7 	bl	800329e <memcpy>
 80034f0:	0031      	movs	r1, r6
 80034f2:	0038      	movs	r0, r7
 80034f4:	f7ff fef0 	bl	80032d8 <_free_r>
 80034f8:	e7da      	b.n	80034b0 <_realloc_r+0x14>
	...

080034fc <_sbrk_r>:
 80034fc:	2300      	movs	r3, #0
 80034fe:	b570      	push	{r4, r5, r6, lr}
 8003500:	4d06      	ldr	r5, [pc, #24]	; (800351c <_sbrk_r+0x20>)
 8003502:	0004      	movs	r4, r0
 8003504:	0008      	movs	r0, r1
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	f7fd fa1e 	bl	8000948 <_sbrk>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d103      	bne.n	8003518 <_sbrk_r+0x1c>
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d000      	beq.n	8003518 <_sbrk_r+0x1c>
 8003516:	6023      	str	r3, [r4, #0]
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	200001c8 	.word	0x200001c8

08003520 <__malloc_lock>:
 8003520:	b510      	push	{r4, lr}
 8003522:	4802      	ldr	r0, [pc, #8]	; (800352c <__malloc_lock+0xc>)
 8003524:	f000 f814 	bl	8003550 <__retarget_lock_acquire_recursive>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	200001cc 	.word	0x200001cc

08003530 <__malloc_unlock>:
 8003530:	b510      	push	{r4, lr}
 8003532:	4802      	ldr	r0, [pc, #8]	; (800353c <__malloc_unlock+0xc>)
 8003534:	f000 f80d 	bl	8003552 <__retarget_lock_release_recursive>
 8003538:	bd10      	pop	{r4, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	200001cc 	.word	0x200001cc

08003540 <_malloc_usable_size_r>:
 8003540:	1f0b      	subs	r3, r1, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1f18      	subs	r0, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	da01      	bge.n	800354e <_malloc_usable_size_r+0xe>
 800354a:	580b      	ldr	r3, [r1, r0]
 800354c:	18c0      	adds	r0, r0, r3
 800354e:	4770      	bx	lr

08003550 <__retarget_lock_acquire_recursive>:
 8003550:	4770      	bx	lr

08003552 <__retarget_lock_release_recursive>:
 8003552:	4770      	bx	lr

08003554 <_init>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr

08003560 <_fini>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr
