
EEE3096S_2022_Prac_2_Delays_and_I2C_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f4  080044f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080044f4  080044f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f4  080044f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  0800456c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800456c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c434  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cec  00000000  00000000  0002c4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f4d  00000000  00000000  0002f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d091  00000000  00000000  000413fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a1c0  00000000  00000000  0004e48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b864e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000b86a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043b0 	.word	0x080043b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080043b0 	.word	0x080043b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 fa3d 	bl	8000890 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f9c9 	bl	80007b8 <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fa2f 	bl	8000890 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fa25 	bl	8000890 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f9d5 	bl	8000804 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 f9cb 	bl	8000804 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_fadd>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	46c6      	mov	lr, r8
 8000480:	0243      	lsls	r3, r0, #9
 8000482:	0a5b      	lsrs	r3, r3, #9
 8000484:	024e      	lsls	r6, r1, #9
 8000486:	0045      	lsls	r5, r0, #1
 8000488:	004f      	lsls	r7, r1, #1
 800048a:	00da      	lsls	r2, r3, #3
 800048c:	0fc4      	lsrs	r4, r0, #31
 800048e:	469c      	mov	ip, r3
 8000490:	0a70      	lsrs	r0, r6, #9
 8000492:	4690      	mov	r8, r2
 8000494:	b500      	push	{lr}
 8000496:	0e2d      	lsrs	r5, r5, #24
 8000498:	0e3f      	lsrs	r7, r7, #24
 800049a:	0fc9      	lsrs	r1, r1, #31
 800049c:	09b6      	lsrs	r6, r6, #6
 800049e:	428c      	cmp	r4, r1
 80004a0:	d04b      	beq.n	800053a <__aeabi_fadd+0xbe>
 80004a2:	1bea      	subs	r2, r5, r7
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	dd36      	ble.n	8000516 <__aeabi_fadd+0x9a>
 80004a8:	2f00      	cmp	r7, #0
 80004aa:	d061      	beq.n	8000570 <__aeabi_fadd+0xf4>
 80004ac:	2dff      	cmp	r5, #255	; 0xff
 80004ae:	d100      	bne.n	80004b2 <__aeabi_fadd+0x36>
 80004b0:	e0ad      	b.n	800060e <__aeabi_fadd+0x192>
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	04db      	lsls	r3, r3, #19
 80004b6:	431e      	orrs	r6, r3
 80004b8:	2a1b      	cmp	r2, #27
 80004ba:	dc00      	bgt.n	80004be <__aeabi_fadd+0x42>
 80004bc:	e0d3      	b.n	8000666 <__aeabi_fadd+0x1ea>
 80004be:	2001      	movs	r0, #1
 80004c0:	4643      	mov	r3, r8
 80004c2:	1a18      	subs	r0, r3, r0
 80004c4:	0143      	lsls	r3, r0, #5
 80004c6:	d400      	bmi.n	80004ca <__aeabi_fadd+0x4e>
 80004c8:	e08c      	b.n	80005e4 <__aeabi_fadd+0x168>
 80004ca:	0180      	lsls	r0, r0, #6
 80004cc:	0987      	lsrs	r7, r0, #6
 80004ce:	0038      	movs	r0, r7
 80004d0:	f000 fb48 	bl	8000b64 <__clzsi2>
 80004d4:	3805      	subs	r0, #5
 80004d6:	4087      	lsls	r7, r0
 80004d8:	4285      	cmp	r5, r0
 80004da:	dc00      	bgt.n	80004de <__aeabi_fadd+0x62>
 80004dc:	e0b6      	b.n	800064c <__aeabi_fadd+0x1d0>
 80004de:	1a2d      	subs	r5, r5, r0
 80004e0:	48b3      	ldr	r0, [pc, #716]	; (80007b0 <__aeabi_fadd+0x334>)
 80004e2:	4038      	ands	r0, r7
 80004e4:	0743      	lsls	r3, r0, #29
 80004e6:	d004      	beq.n	80004f2 <__aeabi_fadd+0x76>
 80004e8:	230f      	movs	r3, #15
 80004ea:	4003      	ands	r3, r0
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d000      	beq.n	80004f2 <__aeabi_fadd+0x76>
 80004f0:	3004      	adds	r0, #4
 80004f2:	0143      	lsls	r3, r0, #5
 80004f4:	d400      	bmi.n	80004f8 <__aeabi_fadd+0x7c>
 80004f6:	e078      	b.n	80005ea <__aeabi_fadd+0x16e>
 80004f8:	1c6a      	adds	r2, r5, #1
 80004fa:	2dfe      	cmp	r5, #254	; 0xfe
 80004fc:	d065      	beq.n	80005ca <__aeabi_fadd+0x14e>
 80004fe:	0180      	lsls	r0, r0, #6
 8000500:	0a43      	lsrs	r3, r0, #9
 8000502:	469c      	mov	ip, r3
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	4663      	mov	r3, ip
 8000508:	05d0      	lsls	r0, r2, #23
 800050a:	4318      	orrs	r0, r3
 800050c:	07e4      	lsls	r4, r4, #31
 800050e:	4320      	orrs	r0, r4
 8000510:	bc80      	pop	{r7}
 8000512:	46b8      	mov	r8, r7
 8000514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000516:	2a00      	cmp	r2, #0
 8000518:	d035      	beq.n	8000586 <__aeabi_fadd+0x10a>
 800051a:	1b7a      	subs	r2, r7, r5
 800051c:	2d00      	cmp	r5, #0
 800051e:	d000      	beq.n	8000522 <__aeabi_fadd+0xa6>
 8000520:	e0af      	b.n	8000682 <__aeabi_fadd+0x206>
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0xae>
 8000528:	e0a7      	b.n	800067a <__aeabi_fadd+0x1fe>
 800052a:	1e53      	subs	r3, r2, #1
 800052c:	2a01      	cmp	r2, #1
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0xb6>
 8000530:	e12f      	b.n	8000792 <__aeabi_fadd+0x316>
 8000532:	2aff      	cmp	r2, #255	; 0xff
 8000534:	d069      	beq.n	800060a <__aeabi_fadd+0x18e>
 8000536:	001a      	movs	r2, r3
 8000538:	e0aa      	b.n	8000690 <__aeabi_fadd+0x214>
 800053a:	1be9      	subs	r1, r5, r7
 800053c:	2900      	cmp	r1, #0
 800053e:	dd70      	ble.n	8000622 <__aeabi_fadd+0x1a6>
 8000540:	2f00      	cmp	r7, #0
 8000542:	d037      	beq.n	80005b4 <__aeabi_fadd+0x138>
 8000544:	2dff      	cmp	r5, #255	; 0xff
 8000546:	d062      	beq.n	800060e <__aeabi_fadd+0x192>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	04db      	lsls	r3, r3, #19
 800054c:	431e      	orrs	r6, r3
 800054e:	291b      	cmp	r1, #27
 8000550:	dc00      	bgt.n	8000554 <__aeabi_fadd+0xd8>
 8000552:	e0b0      	b.n	80006b6 <__aeabi_fadd+0x23a>
 8000554:	2001      	movs	r0, #1
 8000556:	4440      	add	r0, r8
 8000558:	0143      	lsls	r3, r0, #5
 800055a:	d543      	bpl.n	80005e4 <__aeabi_fadd+0x168>
 800055c:	3501      	adds	r5, #1
 800055e:	2dff      	cmp	r5, #255	; 0xff
 8000560:	d033      	beq.n	80005ca <__aeabi_fadd+0x14e>
 8000562:	2301      	movs	r3, #1
 8000564:	4a93      	ldr	r2, [pc, #588]	; (80007b4 <__aeabi_fadd+0x338>)
 8000566:	4003      	ands	r3, r0
 8000568:	0840      	lsrs	r0, r0, #1
 800056a:	4010      	ands	r0, r2
 800056c:	4318      	orrs	r0, r3
 800056e:	e7b9      	b.n	80004e4 <__aeabi_fadd+0x68>
 8000570:	2e00      	cmp	r6, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0xfa>
 8000574:	e083      	b.n	800067e <__aeabi_fadd+0x202>
 8000576:	1e51      	subs	r1, r2, #1
 8000578:	2a01      	cmp	r2, #1
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0x102>
 800057c:	e0d8      	b.n	8000730 <__aeabi_fadd+0x2b4>
 800057e:	2aff      	cmp	r2, #255	; 0xff
 8000580:	d045      	beq.n	800060e <__aeabi_fadd+0x192>
 8000582:	000a      	movs	r2, r1
 8000584:	e798      	b.n	80004b8 <__aeabi_fadd+0x3c>
 8000586:	27fe      	movs	r7, #254	; 0xfe
 8000588:	1c6a      	adds	r2, r5, #1
 800058a:	4217      	tst	r7, r2
 800058c:	d000      	beq.n	8000590 <__aeabi_fadd+0x114>
 800058e:	e086      	b.n	800069e <__aeabi_fadd+0x222>
 8000590:	2d00      	cmp	r5, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_fadd+0x11a>
 8000594:	e0b7      	b.n	8000706 <__aeabi_fadd+0x28a>
 8000596:	4643      	mov	r3, r8
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x122>
 800059c:	e0f3      	b.n	8000786 <__aeabi_fadd+0x30a>
 800059e:	2200      	movs	r2, #0
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d0b0      	beq.n	8000506 <__aeabi_fadd+0x8a>
 80005a4:	1b98      	subs	r0, r3, r6
 80005a6:	0143      	lsls	r3, r0, #5
 80005a8:	d400      	bmi.n	80005ac <__aeabi_fadd+0x130>
 80005aa:	e0fa      	b.n	80007a2 <__aeabi_fadd+0x326>
 80005ac:	4643      	mov	r3, r8
 80005ae:	000c      	movs	r4, r1
 80005b0:	1af0      	subs	r0, r6, r3
 80005b2:	e797      	b.n	80004e4 <__aeabi_fadd+0x68>
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x13e>
 80005b8:	e0c8      	b.n	800074c <__aeabi_fadd+0x2d0>
 80005ba:	1e4a      	subs	r2, r1, #1
 80005bc:	2901      	cmp	r1, #1
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x146>
 80005c0:	e0ae      	b.n	8000720 <__aeabi_fadd+0x2a4>
 80005c2:	29ff      	cmp	r1, #255	; 0xff
 80005c4:	d023      	beq.n	800060e <__aeabi_fadd+0x192>
 80005c6:	0011      	movs	r1, r2
 80005c8:	e7c1      	b.n	800054e <__aeabi_fadd+0xd2>
 80005ca:	2300      	movs	r3, #0
 80005cc:	22ff      	movs	r2, #255	; 0xff
 80005ce:	469c      	mov	ip, r3
 80005d0:	e799      	b.n	8000506 <__aeabi_fadd+0x8a>
 80005d2:	21fe      	movs	r1, #254	; 0xfe
 80005d4:	1c6a      	adds	r2, r5, #1
 80005d6:	4211      	tst	r1, r2
 80005d8:	d077      	beq.n	80006ca <__aeabi_fadd+0x24e>
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d0f5      	beq.n	80005ca <__aeabi_fadd+0x14e>
 80005de:	0015      	movs	r5, r2
 80005e0:	4446      	add	r6, r8
 80005e2:	0870      	lsrs	r0, r6, #1
 80005e4:	0743      	lsls	r3, r0, #29
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x16e>
 80005e8:	e77e      	b.n	80004e8 <__aeabi_fadd+0x6c>
 80005ea:	08c3      	lsrs	r3, r0, #3
 80005ec:	2dff      	cmp	r5, #255	; 0xff
 80005ee:	d00e      	beq.n	800060e <__aeabi_fadd+0x192>
 80005f0:	025b      	lsls	r3, r3, #9
 80005f2:	0a5b      	lsrs	r3, r3, #9
 80005f4:	469c      	mov	ip, r3
 80005f6:	b2ea      	uxtb	r2, r5
 80005f8:	e785      	b.n	8000506 <__aeabi_fadd+0x8a>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d007      	beq.n	800060e <__aeabi_fadd+0x192>
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	03d2      	lsls	r2, r2, #15
 8000602:	4213      	tst	r3, r2
 8000604:	d003      	beq.n	800060e <__aeabi_fadd+0x192>
 8000606:	4210      	tst	r0, r2
 8000608:	d101      	bne.n	800060e <__aeabi_fadd+0x192>
 800060a:	000c      	movs	r4, r1
 800060c:	0003      	movs	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0db      	beq.n	80005ca <__aeabi_fadd+0x14e>
 8000612:	2080      	movs	r0, #128	; 0x80
 8000614:	03c0      	lsls	r0, r0, #15
 8000616:	4318      	orrs	r0, r3
 8000618:	0240      	lsls	r0, r0, #9
 800061a:	0a43      	lsrs	r3, r0, #9
 800061c:	469c      	mov	ip, r3
 800061e:	22ff      	movs	r2, #255	; 0xff
 8000620:	e771      	b.n	8000506 <__aeabi_fadd+0x8a>
 8000622:	2900      	cmp	r1, #0
 8000624:	d0d5      	beq.n	80005d2 <__aeabi_fadd+0x156>
 8000626:	1b7a      	subs	r2, r7, r5
 8000628:	2d00      	cmp	r5, #0
 800062a:	d160      	bne.n	80006ee <__aeabi_fadd+0x272>
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d024      	beq.n	800067c <__aeabi_fadd+0x200>
 8000632:	1e53      	subs	r3, r2, #1
 8000634:	2a01      	cmp	r2, #1
 8000636:	d073      	beq.n	8000720 <__aeabi_fadd+0x2a4>
 8000638:	2aff      	cmp	r2, #255	; 0xff
 800063a:	d0e7      	beq.n	800060c <__aeabi_fadd+0x190>
 800063c:	001a      	movs	r2, r3
 800063e:	2a1b      	cmp	r2, #27
 8000640:	dc00      	bgt.n	8000644 <__aeabi_fadd+0x1c8>
 8000642:	e085      	b.n	8000750 <__aeabi_fadd+0x2d4>
 8000644:	2001      	movs	r0, #1
 8000646:	003d      	movs	r5, r7
 8000648:	1980      	adds	r0, r0, r6
 800064a:	e785      	b.n	8000558 <__aeabi_fadd+0xdc>
 800064c:	2320      	movs	r3, #32
 800064e:	003a      	movs	r2, r7
 8000650:	1b45      	subs	r5, r0, r5
 8000652:	0038      	movs	r0, r7
 8000654:	3501      	adds	r5, #1
 8000656:	40ea      	lsrs	r2, r5
 8000658:	1b5d      	subs	r5, r3, r5
 800065a:	40a8      	lsls	r0, r5
 800065c:	1e43      	subs	r3, r0, #1
 800065e:	4198      	sbcs	r0, r3
 8000660:	2500      	movs	r5, #0
 8000662:	4310      	orrs	r0, r2
 8000664:	e73e      	b.n	80004e4 <__aeabi_fadd+0x68>
 8000666:	2320      	movs	r3, #32
 8000668:	0030      	movs	r0, r6
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	0031      	movs	r1, r6
 800066e:	4098      	lsls	r0, r3
 8000670:	40d1      	lsrs	r1, r2
 8000672:	1e43      	subs	r3, r0, #1
 8000674:	4198      	sbcs	r0, r3
 8000676:	4308      	orrs	r0, r1
 8000678:	e722      	b.n	80004c0 <__aeabi_fadd+0x44>
 800067a:	000c      	movs	r4, r1
 800067c:	0003      	movs	r3, r0
 800067e:	0015      	movs	r5, r2
 8000680:	e7b4      	b.n	80005ec <__aeabi_fadd+0x170>
 8000682:	2fff      	cmp	r7, #255	; 0xff
 8000684:	d0c1      	beq.n	800060a <__aeabi_fadd+0x18e>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4640      	mov	r0, r8
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4318      	orrs	r0, r3
 800068e:	4680      	mov	r8, r0
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dd51      	ble.n	8000738 <__aeabi_fadd+0x2bc>
 8000694:	2001      	movs	r0, #1
 8000696:	000c      	movs	r4, r1
 8000698:	003d      	movs	r5, r7
 800069a:	1a30      	subs	r0, r6, r0
 800069c:	e712      	b.n	80004c4 <__aeabi_fadd+0x48>
 800069e:	4643      	mov	r3, r8
 80006a0:	1b9f      	subs	r7, r3, r6
 80006a2:	017b      	lsls	r3, r7, #5
 80006a4:	d42b      	bmi.n	80006fe <__aeabi_fadd+0x282>
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x230>
 80006aa:	e710      	b.n	80004ce <__aeabi_fadd+0x52>
 80006ac:	2300      	movs	r3, #0
 80006ae:	2400      	movs	r4, #0
 80006b0:	2200      	movs	r2, #0
 80006b2:	469c      	mov	ip, r3
 80006b4:	e727      	b.n	8000506 <__aeabi_fadd+0x8a>
 80006b6:	2320      	movs	r3, #32
 80006b8:	0032      	movs	r2, r6
 80006ba:	0030      	movs	r0, r6
 80006bc:	40ca      	lsrs	r2, r1
 80006be:	1a59      	subs	r1, r3, r1
 80006c0:	4088      	lsls	r0, r1
 80006c2:	1e43      	subs	r3, r0, #1
 80006c4:	4198      	sbcs	r0, r3
 80006c6:	4310      	orrs	r0, r2
 80006c8:	e745      	b.n	8000556 <__aeabi_fadd+0xda>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d14a      	bne.n	8000764 <__aeabi_fadd+0x2e8>
 80006ce:	4643      	mov	r3, r8
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d063      	beq.n	800079c <__aeabi_fadd+0x320>
 80006d4:	2200      	movs	r2, #0
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_fadd+0x260>
 80006da:	e714      	b.n	8000506 <__aeabi_fadd+0x8a>
 80006dc:	0030      	movs	r0, r6
 80006de:	4440      	add	r0, r8
 80006e0:	0143      	lsls	r3, r0, #5
 80006e2:	d400      	bmi.n	80006e6 <__aeabi_fadd+0x26a>
 80006e4:	e77e      	b.n	80005e4 <__aeabi_fadd+0x168>
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <__aeabi_fadd+0x334>)
 80006e8:	3501      	adds	r5, #1
 80006ea:	4018      	ands	r0, r3
 80006ec:	e77a      	b.n	80005e4 <__aeabi_fadd+0x168>
 80006ee:	2fff      	cmp	r7, #255	; 0xff
 80006f0:	d08c      	beq.n	800060c <__aeabi_fadd+0x190>
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	4641      	mov	r1, r8
 80006f6:	04db      	lsls	r3, r3, #19
 80006f8:	4319      	orrs	r1, r3
 80006fa:	4688      	mov	r8, r1
 80006fc:	e79f      	b.n	800063e <__aeabi_fadd+0x1c2>
 80006fe:	4643      	mov	r3, r8
 8000700:	000c      	movs	r4, r1
 8000702:	1af7      	subs	r7, r6, r3
 8000704:	e6e3      	b.n	80004ce <__aeabi_fadd+0x52>
 8000706:	4642      	mov	r2, r8
 8000708:	2a00      	cmp	r2, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0x292>
 800070c:	e775      	b.n	80005fa <__aeabi_fadd+0x17e>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x298>
 8000712:	e77a      	b.n	800060a <__aeabi_fadd+0x18e>
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	03db      	lsls	r3, r3, #15
 8000718:	2400      	movs	r4, #0
 800071a:	469c      	mov	ip, r3
 800071c:	22ff      	movs	r2, #255	; 0xff
 800071e:	e6f2      	b.n	8000506 <__aeabi_fadd+0x8a>
 8000720:	0030      	movs	r0, r6
 8000722:	4440      	add	r0, r8
 8000724:	2501      	movs	r5, #1
 8000726:	0143      	lsls	r3, r0, #5
 8000728:	d400      	bmi.n	800072c <__aeabi_fadd+0x2b0>
 800072a:	e75b      	b.n	80005e4 <__aeabi_fadd+0x168>
 800072c:	2502      	movs	r5, #2
 800072e:	e718      	b.n	8000562 <__aeabi_fadd+0xe6>
 8000730:	4643      	mov	r3, r8
 8000732:	2501      	movs	r5, #1
 8000734:	1b98      	subs	r0, r3, r6
 8000736:	e6c5      	b.n	80004c4 <__aeabi_fadd+0x48>
 8000738:	2320      	movs	r3, #32
 800073a:	4644      	mov	r4, r8
 800073c:	4640      	mov	r0, r8
 800073e:	40d4      	lsrs	r4, r2
 8000740:	1a9a      	subs	r2, r3, r2
 8000742:	4090      	lsls	r0, r2
 8000744:	1e43      	subs	r3, r0, #1
 8000746:	4198      	sbcs	r0, r3
 8000748:	4320      	orrs	r0, r4
 800074a:	e7a4      	b.n	8000696 <__aeabi_fadd+0x21a>
 800074c:	000d      	movs	r5, r1
 800074e:	e74d      	b.n	80005ec <__aeabi_fadd+0x170>
 8000750:	2320      	movs	r3, #32
 8000752:	4641      	mov	r1, r8
 8000754:	4640      	mov	r0, r8
 8000756:	40d1      	lsrs	r1, r2
 8000758:	1a9a      	subs	r2, r3, r2
 800075a:	4090      	lsls	r0, r2
 800075c:	1e43      	subs	r3, r0, #1
 800075e:	4198      	sbcs	r0, r3
 8000760:	4308      	orrs	r0, r1
 8000762:	e770      	b.n	8000646 <__aeabi_fadd+0x1ca>
 8000764:	4642      	mov	r2, r8
 8000766:	2a00      	cmp	r2, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fadd+0x2f0>
 800076a:	e74f      	b.n	800060c <__aeabi_fadd+0x190>
 800076c:	2e00      	cmp	r6, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x2f6>
 8000770:	e74d      	b.n	800060e <__aeabi_fadd+0x192>
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	03d2      	lsls	r2, r2, #15
 8000776:	4213      	tst	r3, r2
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x300>
 800077a:	e748      	b.n	800060e <__aeabi_fadd+0x192>
 800077c:	4210      	tst	r0, r2
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x306>
 8000780:	e745      	b.n	800060e <__aeabi_fadd+0x192>
 8000782:	0003      	movs	r3, r0
 8000784:	e743      	b.n	800060e <__aeabi_fadd+0x192>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d090      	beq.n	80006ac <__aeabi_fadd+0x230>
 800078a:	000c      	movs	r4, r1
 800078c:	4684      	mov	ip, r0
 800078e:	2200      	movs	r2, #0
 8000790:	e6b9      	b.n	8000506 <__aeabi_fadd+0x8a>
 8000792:	4643      	mov	r3, r8
 8000794:	000c      	movs	r4, r1
 8000796:	1af0      	subs	r0, r6, r3
 8000798:	3501      	adds	r5, #1
 800079a:	e693      	b.n	80004c4 <__aeabi_fadd+0x48>
 800079c:	4684      	mov	ip, r0
 800079e:	2200      	movs	r2, #0
 80007a0:	e6b1      	b.n	8000506 <__aeabi_fadd+0x8a>
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x32c>
 80007a6:	e71d      	b.n	80005e4 <__aeabi_fadd+0x168>
 80007a8:	2300      	movs	r3, #0
 80007aa:	2400      	movs	r4, #0
 80007ac:	469c      	mov	ip, r3
 80007ae:	e6aa      	b.n	8000506 <__aeabi_fadd+0x8a>
 80007b0:	fbffffff 	.word	0xfbffffff
 80007b4:	7dffffff 	.word	0x7dffffff

080007b8 <__eqsf2>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0245      	lsls	r5, r0, #9
 80007be:	024e      	lsls	r6, r1, #9
 80007c0:	004c      	lsls	r4, r1, #1
 80007c2:	0fc3      	lsrs	r3, r0, #31
 80007c4:	0a6d      	lsrs	r5, r5, #9
 80007c6:	2001      	movs	r0, #1
 80007c8:	0e12      	lsrs	r2, r2, #24
 80007ca:	0a76      	lsrs	r6, r6, #9
 80007cc:	0e24      	lsrs	r4, r4, #24
 80007ce:	0fc9      	lsrs	r1, r1, #31
 80007d0:	2aff      	cmp	r2, #255	; 0xff
 80007d2:	d006      	beq.n	80007e2 <__eqsf2+0x2a>
 80007d4:	2cff      	cmp	r4, #255	; 0xff
 80007d6:	d003      	beq.n	80007e0 <__eqsf2+0x28>
 80007d8:	42a2      	cmp	r2, r4
 80007da:	d101      	bne.n	80007e0 <__eqsf2+0x28>
 80007dc:	42b5      	cmp	r5, r6
 80007de:	d006      	beq.n	80007ee <__eqsf2+0x36>
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d1fc      	bne.n	80007e0 <__eqsf2+0x28>
 80007e6:	2cff      	cmp	r4, #255	; 0xff
 80007e8:	d1fa      	bne.n	80007e0 <__eqsf2+0x28>
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d1f8      	bne.n	80007e0 <__eqsf2+0x28>
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d006      	beq.n	8000800 <__eqsf2+0x48>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d1f3      	bne.n	80007e0 <__eqsf2+0x28>
 80007f8:	0028      	movs	r0, r5
 80007fa:	1e43      	subs	r3, r0, #1
 80007fc:	4198      	sbcs	r0, r3
 80007fe:	e7ef      	b.n	80007e0 <__eqsf2+0x28>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ed      	b.n	80007e0 <__eqsf2+0x28>

08000804 <__gesf2>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	0042      	lsls	r2, r0, #1
 8000808:	0245      	lsls	r5, r0, #9
 800080a:	024e      	lsls	r6, r1, #9
 800080c:	004c      	lsls	r4, r1, #1
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a6d      	lsrs	r5, r5, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0a76      	lsrs	r6, r6, #9
 8000816:	0e24      	lsrs	r4, r4, #24
 8000818:	0fc8      	lsrs	r0, r1, #31
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d01b      	beq.n	8000856 <__gesf2+0x52>
 800081e:	2cff      	cmp	r4, #255	; 0xff
 8000820:	d00e      	beq.n	8000840 <__gesf2+0x3c>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d11b      	bne.n	800085e <__gesf2+0x5a>
 8000826:	2c00      	cmp	r4, #0
 8000828:	d101      	bne.n	800082e <__gesf2+0x2a>
 800082a:	2e00      	cmp	r6, #0
 800082c:	d01c      	beq.n	8000868 <__gesf2+0x64>
 800082e:	2d00      	cmp	r5, #0
 8000830:	d00c      	beq.n	800084c <__gesf2+0x48>
 8000832:	4283      	cmp	r3, r0
 8000834:	d01c      	beq.n	8000870 <__gesf2+0x6c>
 8000836:	2102      	movs	r1, #2
 8000838:	1e58      	subs	r0, r3, #1
 800083a:	4008      	ands	r0, r1
 800083c:	3801      	subs	r0, #1
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	2e00      	cmp	r6, #0
 8000842:	d122      	bne.n	800088a <__gesf2+0x86>
 8000844:	2a00      	cmp	r2, #0
 8000846:	d1f4      	bne.n	8000832 <__gesf2+0x2e>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d1f2      	bne.n	8000832 <__gesf2+0x2e>
 800084c:	2800      	cmp	r0, #0
 800084e:	d1f6      	bne.n	800083e <__gesf2+0x3a>
 8000850:	2001      	movs	r0, #1
 8000852:	4240      	negs	r0, r0
 8000854:	e7f3      	b.n	800083e <__gesf2+0x3a>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d117      	bne.n	800088a <__gesf2+0x86>
 800085a:	2cff      	cmp	r4, #255	; 0xff
 800085c:	d0f0      	beq.n	8000840 <__gesf2+0x3c>
 800085e:	2c00      	cmp	r4, #0
 8000860:	d1e7      	bne.n	8000832 <__gesf2+0x2e>
 8000862:	2e00      	cmp	r6, #0
 8000864:	d1e5      	bne.n	8000832 <__gesf2+0x2e>
 8000866:	e7e6      	b.n	8000836 <__gesf2+0x32>
 8000868:	2000      	movs	r0, #0
 800086a:	2d00      	cmp	r5, #0
 800086c:	d0e7      	beq.n	800083e <__gesf2+0x3a>
 800086e:	e7e2      	b.n	8000836 <__gesf2+0x32>
 8000870:	42a2      	cmp	r2, r4
 8000872:	dc05      	bgt.n	8000880 <__gesf2+0x7c>
 8000874:	dbea      	blt.n	800084c <__gesf2+0x48>
 8000876:	42b5      	cmp	r5, r6
 8000878:	d802      	bhi.n	8000880 <__gesf2+0x7c>
 800087a:	d3e7      	bcc.n	800084c <__gesf2+0x48>
 800087c:	2000      	movs	r0, #0
 800087e:	e7de      	b.n	800083e <__gesf2+0x3a>
 8000880:	4243      	negs	r3, r0
 8000882:	4158      	adcs	r0, r3
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	3801      	subs	r0, #1
 8000888:	e7d9      	b.n	800083e <__gesf2+0x3a>
 800088a:	2002      	movs	r0, #2
 800088c:	4240      	negs	r0, r0
 800088e:	e7d6      	b.n	800083e <__gesf2+0x3a>

08000890 <__lesf2>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	0042      	lsls	r2, r0, #1
 8000894:	0245      	lsls	r5, r0, #9
 8000896:	024e      	lsls	r6, r1, #9
 8000898:	004c      	lsls	r4, r1, #1
 800089a:	0fc3      	lsrs	r3, r0, #31
 800089c:	0a6d      	lsrs	r5, r5, #9
 800089e:	0e12      	lsrs	r2, r2, #24
 80008a0:	0a76      	lsrs	r6, r6, #9
 80008a2:	0e24      	lsrs	r4, r4, #24
 80008a4:	0fc8      	lsrs	r0, r1, #31
 80008a6:	2aff      	cmp	r2, #255	; 0xff
 80008a8:	d00b      	beq.n	80008c2 <__lesf2+0x32>
 80008aa:	2cff      	cmp	r4, #255	; 0xff
 80008ac:	d00d      	beq.n	80008ca <__lesf2+0x3a>
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d11f      	bne.n	80008f2 <__lesf2+0x62>
 80008b2:	2c00      	cmp	r4, #0
 80008b4:	d116      	bne.n	80008e4 <__lesf2+0x54>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d114      	bne.n	80008e4 <__lesf2+0x54>
 80008ba:	2000      	movs	r0, #0
 80008bc:	2d00      	cmp	r5, #0
 80008be:	d010      	beq.n	80008e2 <__lesf2+0x52>
 80008c0:	e009      	b.n	80008d6 <__lesf2+0x46>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d10c      	bne.n	80008e0 <__lesf2+0x50>
 80008c6:	2cff      	cmp	r4, #255	; 0xff
 80008c8:	d113      	bne.n	80008f2 <__lesf2+0x62>
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d108      	bne.n	80008e0 <__lesf2+0x50>
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d008      	beq.n	80008e4 <__lesf2+0x54>
 80008d2:	4283      	cmp	r3, r0
 80008d4:	d012      	beq.n	80008fc <__lesf2+0x6c>
 80008d6:	2102      	movs	r1, #2
 80008d8:	1e58      	subs	r0, r3, #1
 80008da:	4008      	ands	r0, r1
 80008dc:	3801      	subs	r0, #1
 80008de:	e000      	b.n	80008e2 <__lesf2+0x52>
 80008e0:	2002      	movs	r0, #2
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d1f4      	bne.n	80008d2 <__lesf2+0x42>
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d1fa      	bne.n	80008e2 <__lesf2+0x52>
 80008ec:	2001      	movs	r0, #1
 80008ee:	4240      	negs	r0, r0
 80008f0:	e7f7      	b.n	80008e2 <__lesf2+0x52>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d1ed      	bne.n	80008d2 <__lesf2+0x42>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d1eb      	bne.n	80008d2 <__lesf2+0x42>
 80008fa:	e7ec      	b.n	80008d6 <__lesf2+0x46>
 80008fc:	42a2      	cmp	r2, r4
 80008fe:	dc05      	bgt.n	800090c <__lesf2+0x7c>
 8000900:	dbf2      	blt.n	80008e8 <__lesf2+0x58>
 8000902:	42b5      	cmp	r5, r6
 8000904:	d802      	bhi.n	800090c <__lesf2+0x7c>
 8000906:	d3ef      	bcc.n	80008e8 <__lesf2+0x58>
 8000908:	2000      	movs	r0, #0
 800090a:	e7ea      	b.n	80008e2 <__lesf2+0x52>
 800090c:	4243      	negs	r3, r0
 800090e:	4158      	adcs	r0, r3
 8000910:	0040      	lsls	r0, r0, #1
 8000912:	3801      	subs	r0, #1
 8000914:	e7e5      	b.n	80008e2 <__lesf2+0x52>
 8000916:	46c0      	nop			; (mov r8, r8)

08000918 <__aeabi_fmul>:
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091a:	464f      	mov	r7, r9
 800091c:	4646      	mov	r6, r8
 800091e:	46d6      	mov	lr, sl
 8000920:	0244      	lsls	r4, r0, #9
 8000922:	0045      	lsls	r5, r0, #1
 8000924:	b5c0      	push	{r6, r7, lr}
 8000926:	0a64      	lsrs	r4, r4, #9
 8000928:	1c0f      	adds	r7, r1, #0
 800092a:	0e2d      	lsrs	r5, r5, #24
 800092c:	0fc6      	lsrs	r6, r0, #31
 800092e:	2d00      	cmp	r5, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_fmul+0x1c>
 8000932:	e08d      	b.n	8000a50 <__aeabi_fmul+0x138>
 8000934:	2dff      	cmp	r5, #255	; 0xff
 8000936:	d100      	bne.n	800093a <__aeabi_fmul+0x22>
 8000938:	e092      	b.n	8000a60 <__aeabi_fmul+0x148>
 800093a:	2300      	movs	r3, #0
 800093c:	2080      	movs	r0, #128	; 0x80
 800093e:	4699      	mov	r9, r3
 8000940:	469a      	mov	sl, r3
 8000942:	00e4      	lsls	r4, r4, #3
 8000944:	04c0      	lsls	r0, r0, #19
 8000946:	4304      	orrs	r4, r0
 8000948:	3d7f      	subs	r5, #127	; 0x7f
 800094a:	0278      	lsls	r0, r7, #9
 800094c:	0a43      	lsrs	r3, r0, #9
 800094e:	4698      	mov	r8, r3
 8000950:	007b      	lsls	r3, r7, #1
 8000952:	0e1b      	lsrs	r3, r3, #24
 8000954:	0fff      	lsrs	r7, r7, #31
 8000956:	2b00      	cmp	r3, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fmul+0x44>
 800095a:	e070      	b.n	8000a3e <__aeabi_fmul+0x126>
 800095c:	2bff      	cmp	r3, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fmul+0x4a>
 8000960:	e086      	b.n	8000a70 <__aeabi_fmul+0x158>
 8000962:	4642      	mov	r2, r8
 8000964:	00d0      	lsls	r0, r2, #3
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	3b7f      	subs	r3, #127	; 0x7f
 800096a:	18ed      	adds	r5, r5, r3
 800096c:	2300      	movs	r3, #0
 800096e:	04d2      	lsls	r2, r2, #19
 8000970:	4302      	orrs	r2, r0
 8000972:	4690      	mov	r8, r2
 8000974:	469c      	mov	ip, r3
 8000976:	0031      	movs	r1, r6
 8000978:	464b      	mov	r3, r9
 800097a:	4079      	eors	r1, r7
 800097c:	1c68      	adds	r0, r5, #1
 800097e:	2b0f      	cmp	r3, #15
 8000980:	d81c      	bhi.n	80009bc <__aeabi_fmul+0xa4>
 8000982:	4a76      	ldr	r2, [pc, #472]	; (8000b5c <__aeabi_fmul+0x244>)
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	58d3      	ldr	r3, [r2, r3]
 8000988:	469f      	mov	pc, r3
 800098a:	0039      	movs	r1, r7
 800098c:	4644      	mov	r4, r8
 800098e:	46e2      	mov	sl, ip
 8000990:	4653      	mov	r3, sl
 8000992:	2b02      	cmp	r3, #2
 8000994:	d00f      	beq.n	80009b6 <__aeabi_fmul+0x9e>
 8000996:	2b03      	cmp	r3, #3
 8000998:	d100      	bne.n	800099c <__aeabi_fmul+0x84>
 800099a:	e0d7      	b.n	8000b4c <__aeabi_fmul+0x234>
 800099c:	2b01      	cmp	r3, #1
 800099e:	d137      	bne.n	8000a10 <__aeabi_fmul+0xf8>
 80009a0:	2000      	movs	r0, #0
 80009a2:	2400      	movs	r4, #0
 80009a4:	05c0      	lsls	r0, r0, #23
 80009a6:	4320      	orrs	r0, r4
 80009a8:	07c9      	lsls	r1, r1, #31
 80009aa:	4308      	orrs	r0, r1
 80009ac:	bce0      	pop	{r5, r6, r7}
 80009ae:	46ba      	mov	sl, r7
 80009b0:	46b1      	mov	r9, r6
 80009b2:	46a8      	mov	r8, r5
 80009b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	2400      	movs	r4, #0
 80009ba:	e7f3      	b.n	80009a4 <__aeabi_fmul+0x8c>
 80009bc:	0c26      	lsrs	r6, r4, #16
 80009be:	0424      	lsls	r4, r4, #16
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	4644      	mov	r4, r8
 80009c4:	0424      	lsls	r4, r4, #16
 80009c6:	0c24      	lsrs	r4, r4, #16
 80009c8:	4643      	mov	r3, r8
 80009ca:	0027      	movs	r7, r4
 80009cc:	0c1b      	lsrs	r3, r3, #16
 80009ce:	4357      	muls	r7, r2
 80009d0:	4374      	muls	r4, r6
 80009d2:	435a      	muls	r2, r3
 80009d4:	435e      	muls	r6, r3
 80009d6:	1912      	adds	r2, r2, r4
 80009d8:	0c3b      	lsrs	r3, r7, #16
 80009da:	189b      	adds	r3, r3, r2
 80009dc:	429c      	cmp	r4, r3
 80009de:	d903      	bls.n	80009e8 <__aeabi_fmul+0xd0>
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	0252      	lsls	r2, r2, #9
 80009e4:	4694      	mov	ip, r2
 80009e6:	4466      	add	r6, ip
 80009e8:	043f      	lsls	r7, r7, #16
 80009ea:	041a      	lsls	r2, r3, #16
 80009ec:	0c3f      	lsrs	r7, r7, #16
 80009ee:	19d2      	adds	r2, r2, r7
 80009f0:	0194      	lsls	r4, r2, #6
 80009f2:	1e67      	subs	r7, r4, #1
 80009f4:	41bc      	sbcs	r4, r7
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	0e92      	lsrs	r2, r2, #26
 80009fa:	199b      	adds	r3, r3, r6
 80009fc:	4314      	orrs	r4, r2
 80009fe:	019b      	lsls	r3, r3, #6
 8000a00:	431c      	orrs	r4, r3
 8000a02:	011b      	lsls	r3, r3, #4
 8000a04:	d400      	bmi.n	8000a08 <__aeabi_fmul+0xf0>
 8000a06:	e09b      	b.n	8000b40 <__aeabi_fmul+0x228>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	0862      	lsrs	r2, r4, #1
 8000a0c:	401c      	ands	r4, r3
 8000a0e:	4314      	orrs	r4, r2
 8000a10:	0002      	movs	r2, r0
 8000a12:	327f      	adds	r2, #127	; 0x7f
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	dd64      	ble.n	8000ae2 <__aeabi_fmul+0x1ca>
 8000a18:	0763      	lsls	r3, r4, #29
 8000a1a:	d004      	beq.n	8000a26 <__aeabi_fmul+0x10e>
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4023      	ands	r3, r4
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fmul+0x10e>
 8000a24:	3404      	adds	r4, #4
 8000a26:	0123      	lsls	r3, r4, #4
 8000a28:	d503      	bpl.n	8000a32 <__aeabi_fmul+0x11a>
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <__aeabi_fmul+0x248>)
 8000a2e:	3280      	adds	r2, #128	; 0x80
 8000a30:	401c      	ands	r4, r3
 8000a32:	2afe      	cmp	r2, #254	; 0xfe
 8000a34:	dcbf      	bgt.n	80009b6 <__aeabi_fmul+0x9e>
 8000a36:	01a4      	lsls	r4, r4, #6
 8000a38:	0a64      	lsrs	r4, r4, #9
 8000a3a:	b2d0      	uxtb	r0, r2
 8000a3c:	e7b2      	b.n	80009a4 <__aeabi_fmul+0x8c>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d13d      	bne.n	8000ac0 <__aeabi_fmul+0x1a8>
 8000a44:	464a      	mov	r2, r9
 8000a46:	3301      	adds	r3, #1
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	4691      	mov	r9, r2
 8000a4c:	469c      	mov	ip, r3
 8000a4e:	e792      	b.n	8000976 <__aeabi_fmul+0x5e>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d129      	bne.n	8000aa8 <__aeabi_fmul+0x190>
 8000a54:	2304      	movs	r3, #4
 8000a56:	4699      	mov	r9, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	e774      	b.n	800094a <__aeabi_fmul+0x32>
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d11b      	bne.n	8000a9c <__aeabi_fmul+0x184>
 8000a64:	2308      	movs	r3, #8
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b06      	subs	r3, #6
 8000a6a:	25ff      	movs	r5, #255	; 0xff
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e76c      	b.n	800094a <__aeabi_fmul+0x32>
 8000a70:	4643      	mov	r3, r8
 8000a72:	35ff      	adds	r5, #255	; 0xff
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10b      	bne.n	8000a90 <__aeabi_fmul+0x178>
 8000a78:	2302      	movs	r3, #2
 8000a7a:	464a      	mov	r2, r9
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	4691      	mov	r9, r2
 8000a80:	469c      	mov	ip, r3
 8000a82:	e778      	b.n	8000976 <__aeabi_fmul+0x5e>
 8000a84:	4653      	mov	r3, sl
 8000a86:	0031      	movs	r1, r6
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_fmul+0x176>
 8000a8c:	e783      	b.n	8000996 <__aeabi_fmul+0x7e>
 8000a8e:	e792      	b.n	80009b6 <__aeabi_fmul+0x9e>
 8000a90:	2303      	movs	r3, #3
 8000a92:	464a      	mov	r2, r9
 8000a94:	431a      	orrs	r2, r3
 8000a96:	4691      	mov	r9, r2
 8000a98:	469c      	mov	ip, r3
 8000a9a:	e76c      	b.n	8000976 <__aeabi_fmul+0x5e>
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	3b09      	subs	r3, #9
 8000aa2:	25ff      	movs	r5, #255	; 0xff
 8000aa4:	469a      	mov	sl, r3
 8000aa6:	e750      	b.n	800094a <__aeabi_fmul+0x32>
 8000aa8:	0020      	movs	r0, r4
 8000aaa:	f000 f85b 	bl	8000b64 <__clzsi2>
 8000aae:	2576      	movs	r5, #118	; 0x76
 8000ab0:	1f43      	subs	r3, r0, #5
 8000ab2:	409c      	lsls	r4, r3
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	426d      	negs	r5, r5
 8000ab8:	4699      	mov	r9, r3
 8000aba:	469a      	mov	sl, r3
 8000abc:	1a2d      	subs	r5, r5, r0
 8000abe:	e744      	b.n	800094a <__aeabi_fmul+0x32>
 8000ac0:	4640      	mov	r0, r8
 8000ac2:	f000 f84f 	bl	8000b64 <__clzsi2>
 8000ac6:	4642      	mov	r2, r8
 8000ac8:	1f43      	subs	r3, r0, #5
 8000aca:	409a      	lsls	r2, r3
 8000acc:	2300      	movs	r3, #0
 8000ace:	1a2d      	subs	r5, r5, r0
 8000ad0:	4690      	mov	r8, r2
 8000ad2:	469c      	mov	ip, r3
 8000ad4:	3d76      	subs	r5, #118	; 0x76
 8000ad6:	e74e      	b.n	8000976 <__aeabi_fmul+0x5e>
 8000ad8:	2480      	movs	r4, #128	; 0x80
 8000ada:	2100      	movs	r1, #0
 8000adc:	20ff      	movs	r0, #255	; 0xff
 8000ade:	03e4      	lsls	r4, r4, #15
 8000ae0:	e760      	b.n	80009a4 <__aeabi_fmul+0x8c>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	1a9b      	subs	r3, r3, r2
 8000ae6:	2b1b      	cmp	r3, #27
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_fmul+0x1d4>
 8000aea:	e759      	b.n	80009a0 <__aeabi_fmul+0x88>
 8000aec:	0022      	movs	r2, r4
 8000aee:	309e      	adds	r0, #158	; 0x9e
 8000af0:	40da      	lsrs	r2, r3
 8000af2:	4084      	lsls	r4, r0
 8000af4:	0013      	movs	r3, r2
 8000af6:	1e62      	subs	r2, r4, #1
 8000af8:	4194      	sbcs	r4, r2
 8000afa:	431c      	orrs	r4, r3
 8000afc:	0763      	lsls	r3, r4, #29
 8000afe:	d004      	beq.n	8000b0a <__aeabi_fmul+0x1f2>
 8000b00:	230f      	movs	r3, #15
 8000b02:	4023      	ands	r3, r4
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fmul+0x1f2>
 8000b08:	3404      	adds	r4, #4
 8000b0a:	0163      	lsls	r3, r4, #5
 8000b0c:	d51a      	bpl.n	8000b44 <__aeabi_fmul+0x22c>
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2400      	movs	r4, #0
 8000b12:	e747      	b.n	80009a4 <__aeabi_fmul+0x8c>
 8000b14:	2080      	movs	r0, #128	; 0x80
 8000b16:	03c0      	lsls	r0, r0, #15
 8000b18:	4204      	tst	r4, r0
 8000b1a:	d009      	beq.n	8000b30 <__aeabi_fmul+0x218>
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	4203      	tst	r3, r0
 8000b20:	d106      	bne.n	8000b30 <__aeabi_fmul+0x218>
 8000b22:	4644      	mov	r4, r8
 8000b24:	4304      	orrs	r4, r0
 8000b26:	0264      	lsls	r4, r4, #9
 8000b28:	0039      	movs	r1, r7
 8000b2a:	20ff      	movs	r0, #255	; 0xff
 8000b2c:	0a64      	lsrs	r4, r4, #9
 8000b2e:	e739      	b.n	80009a4 <__aeabi_fmul+0x8c>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	03c0      	lsls	r0, r0, #15
 8000b34:	4304      	orrs	r4, r0
 8000b36:	0264      	lsls	r4, r4, #9
 8000b38:	0031      	movs	r1, r6
 8000b3a:	20ff      	movs	r0, #255	; 0xff
 8000b3c:	0a64      	lsrs	r4, r4, #9
 8000b3e:	e731      	b.n	80009a4 <__aeabi_fmul+0x8c>
 8000b40:	0028      	movs	r0, r5
 8000b42:	e765      	b.n	8000a10 <__aeabi_fmul+0xf8>
 8000b44:	01a4      	lsls	r4, r4, #6
 8000b46:	2000      	movs	r0, #0
 8000b48:	0a64      	lsrs	r4, r4, #9
 8000b4a:	e72b      	b.n	80009a4 <__aeabi_fmul+0x8c>
 8000b4c:	2080      	movs	r0, #128	; 0x80
 8000b4e:	03c0      	lsls	r0, r0, #15
 8000b50:	4304      	orrs	r4, r0
 8000b52:	0264      	lsls	r4, r4, #9
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	0a64      	lsrs	r4, r4, #9
 8000b58:	e724      	b.n	80009a4 <__aeabi_fmul+0x8c>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	08004444 	.word	0x08004444
 8000b60:	f7ffffff 	.word	0xf7ffffff

08000b64 <__clzsi2>:
 8000b64:	211c      	movs	r1, #28
 8000b66:	2301      	movs	r3, #1
 8000b68:	041b      	lsls	r3, r3, #16
 8000b6a:	4298      	cmp	r0, r3
 8000b6c:	d301      	bcc.n	8000b72 <__clzsi2+0xe>
 8000b6e:	0c00      	lsrs	r0, r0, #16
 8000b70:	3910      	subs	r1, #16
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	4298      	cmp	r0, r3
 8000b76:	d301      	bcc.n	8000b7c <__clzsi2+0x18>
 8000b78:	0a00      	lsrs	r0, r0, #8
 8000b7a:	3908      	subs	r1, #8
 8000b7c:	091b      	lsrs	r3, r3, #4
 8000b7e:	4298      	cmp	r0, r3
 8000b80:	d301      	bcc.n	8000b86 <__clzsi2+0x22>
 8000b82:	0900      	lsrs	r0, r0, #4
 8000b84:	3904      	subs	r1, #4
 8000b86:	a202      	add	r2, pc, #8	; (adr r2, 8000b90 <__clzsi2+0x2c>)
 8000b88:	5c10      	ldrb	r0, [r2, r0]
 8000b8a:	1840      	adds	r0, r0, r1
 8000b8c:	4770      	bx	lr
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	02020304 	.word	0x02020304
 8000b94:	01010101 	.word	0x01010101
	...

08000ba0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba6:	f000 fcf5 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000baa:	f000 f91d 	bl	8000de8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bae:	f000 f88d 	bl	8000ccc <MX_I2C1_Init>
  MX_DMA_Init();
 8000bb2:	f000 f8fb 	bl	8000dac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bb6:	f000 f8c9 	bl	8000d4c <MX_USART2_UART_Init>


  //TO DO
  //TASK 6
  //YOUR CODE HERE
  setTime(00, 00, 00, 2, 20, 9, 22);
 8000bba:	2316      	movs	r3, #22
 8000bbc:	9302      	str	r3, [sp, #8]
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	2314      	movs	r3, #20
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f9eb 	bl	8000fa8 <setTime>
  {
    /* USER CODE END WHILE */
	//TO DO:
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4a34      	ldr	r2, [pc, #208]	; (8000ca8 <main+0x108>)
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0010      	movs	r0, r2
 8000bdc:	f001 f92d 	bl	8001e3a <HAL_GPIO_TogglePin>

	//TO DO:
	//TASK 6

	//sprintf(buffer, "%s \r\n", "hello");
	sprintf(buffer, "decToBCD=%d\r\n\r\n", decToBcd(10));
 8000be0:	200a      	movs	r0, #10
 8000be2:	f000 f9ad 	bl	8000f40 <decToBcd>
 8000be6:	0003      	movs	r3, r0
 8000be8:	001a      	movs	r2, r3
 8000bea:	4930      	ldr	r1, [pc, #192]	; (8000cac <main+0x10c>)
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <main+0x110>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 ff74 	bl	8003adc <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	492d      	ldr	r1, [pc, #180]	; (8000cb0 <main+0x110>)
 8000bfa:	482e      	ldr	r0, [pc, #184]	; (8000cb4 <main+0x114>)
 8000bfc:	2212      	movs	r2, #18
 8000bfe:	f001 fff1 	bl	8002be4 <HAL_UART_Transmit>

	sprintf(buffer, "BCDToDec=%d\r\n\r\n", bcdToDec(16));
 8000c02:	2010      	movs	r0, #16
 8000c04:	f000 f9b6 	bl	8000f74 <bcdToDec>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	492b      	ldr	r1, [pc, #172]	; (8000cb8 <main+0x118>)
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <main+0x110>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 ff64 	bl	8003adc <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	4925      	ldr	r1, [pc, #148]	; (8000cb0 <main+0x110>)
 8000c1a:	4826      	ldr	r0, [pc, #152]	; (8000cb4 <main+0x114>)
 8000c1c:	2212      	movs	r2, #18
 8000c1e:	f001 ffe1 	bl	8002be4 <HAL_UART_Transmit>

	getTime();
 8000c22:	f000 fa2b 	bl	800107c <getTime>
	sprintf (buffer, "%02d:%02d:%02d\r\n\r\n", time.hour, time.minutes, time.seconds);
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <main+0x11c>)
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <main+0x11c>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	001c      	movs	r4, r3
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <main+0x11c>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4922      	ldr	r1, [pc, #136]	; (8000cc0 <main+0x120>)
 8000c38:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <main+0x110>)
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	0023      	movs	r3, r4
 8000c3e:	f002 ff4d 	bl	8003adc <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000c42:	2301      	movs	r3, #1
 8000c44:	425b      	negs	r3, r3
 8000c46:	491a      	ldr	r1, [pc, #104]	; (8000cb0 <main+0x110>)
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <main+0x114>)
 8000c4a:	2212      	movs	r2, #18
 8000c4c:	f001 ffca 	bl	8002be4 <HAL_UART_Transmit>



	sprintf (buffer, "%02d-%02d-20%02d\r\n\r\n", time.dayofmonth, time.month, time.year);
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <main+0x11c>)
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <main+0x11c>)
 8000c58:	795b      	ldrb	r3, [r3, #5]
 8000c5a:	001c      	movs	r4, r3
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <main+0x11c>)
 8000c5e:	799b      	ldrb	r3, [r3, #6]
 8000c60:	4918      	ldr	r1, [pc, #96]	; (8000cc4 <main+0x124>)
 8000c62:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <main+0x110>)
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	0023      	movs	r3, r4
 8000c68:	f002 ff38 	bl	8003adc <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	490f      	ldr	r1, [pc, #60]	; (8000cb0 <main+0x110>)
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <main+0x114>)
 8000c74:	2212      	movs	r2, #18
 8000c76:	f001 ffb5 	bl	8002be4 <HAL_UART_Transmit>


	//HAL_Delay(500);
	sprintf (buffer, "Epoch=%10d\r\n\r\n", epochFromTime(time));
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <main+0x11c>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	6859      	ldr	r1, [r3, #4]
 8000c80:	f000 fa54 	bl	800112c <epochFromTime>
 8000c84:	0002      	movs	r2, r0
 8000c86:	4910      	ldr	r1, [pc, #64]	; (8000cc8 <main+0x128>)
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <main+0x110>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 ff26 	bl	8003adc <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	4906      	ldr	r1, [pc, #24]	; (8000cb0 <main+0x110>)
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <main+0x114>)
 8000c98:	2212      	movs	r2, #18
 8000c9a:	f001 ffa3 	bl	8002be4 <HAL_UART_Transmit>




	//YOUR CODE HERE
	pause_sec(0); // adding a delay using nested for loops
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	1c18      	adds	r0, r3, #0
 8000ca2:	f000 f919 	bl	8000ed8 <pause_sec>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000ca6:	e794      	b.n	8000bd2 <main+0x32>
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	080043c8 	.word	0x080043c8
 8000cb0:	200001a0 	.word	0x200001a0
 8000cb4:	200000d8 	.word	0x200000d8
 8000cb8:	080043d8 	.word	0x080043d8
 8000cbc:	200001b4 	.word	0x200001b4
 8000cc0:	080043e8 	.word	0x080043e8
 8000cc4:	080043fc 	.word	0x080043fc
 8000cc8:	08004414 	.word	0x08004414

08000ccc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <MX_I2C1_Init+0x78>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <MX_I2C1_Init+0x7c>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 f8b1 	bl	8001e70 <HAL_I2C_Init>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d12:	f000 fab3 	bl	800127c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 fdf2 	bl	8002904 <HAL_I2CEx_ConfigAnalogFilter>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f000 faaa 	bl	800127c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f001 fe35 	bl	800299c <HAL_I2CEx_ConfigDigitalFilter>
 8000d32:	1e03      	subs	r3, r0, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 faa1 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000008c 	.word	0x2000008c
 8000d44:	40005400 	.word	0x40005400
 8000d48:	2000090e 	.word	0x2000090e

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <MX_USART2_UART_Init+0x5c>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d58:	2296      	movs	r2, #150	; 0x96
 8000d5a:	0192      	lsls	r2, r2, #6
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <MX_USART2_UART_Init+0x58>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 fed3 	bl	8002b3c <HAL_UART_Init>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f000 fa6f 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000d8 	.word	0x200000d8
 8000da8:	40004400 	.word	0x40004400

08000dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_DMA_Init+0x38>)
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_DMA_Init+0x38>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_DMA_Init+0x38>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f000 fcf0 	bl	80017b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f000 fd02 	bl	80017de <HAL_NVIC_EnableIRQ>

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b08b      	sub	sp, #44	; 0x2c
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	2414      	movs	r4, #20
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0018      	movs	r0, r3
 8000df4:	2314      	movs	r3, #20
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f002 fe67 	bl	8003acc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e00:	695a      	ldr	r2, [r3, #20]
 8000e02:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	03c9      	lsls	r1, r1, #15
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e0e:	695a      	ldr	r2, [r3, #20]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	03db      	lsls	r3, r3, #15
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	0289      	lsls	r1, r1, #10
 8000e24:	430a      	orrs	r2, r1
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	029b      	lsls	r3, r3, #10
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	0309      	lsls	r1, r1, #12
 8000e40:	430a      	orrs	r2, r1
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e46:	695a      	ldr	r2, [r3, #20]
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	031b      	lsls	r3, r3, #12
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e54:	695a      	ldr	r2, [r3, #20]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	02c9      	lsls	r1, r1, #11
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e62:	695a      	ldr	r2, [r3, #20]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	02db      	lsls	r3, r3, #11
 8000e68:	4013      	ands	r3, r2
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e6e:	23c0      	movs	r3, #192	; 0xc0
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <MX_GPIO_Init+0xec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	0019      	movs	r1, r3
 8000e78:	f000 ffc2 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2290      	movs	r2, #144	; 0x90
 8000e86:	0352      	lsls	r2, r2, #13
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e90:	193a      	adds	r2, r7, r4
 8000e92:	2390      	movs	r3, #144	; 0x90
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fe41 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000e9e:	0021      	movs	r1, r4
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	22c0      	movs	r2, #192	; 0xc0
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <MX_GPIO_Init+0xec>)
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	0010      	movs	r0, r2
 8000ec2:	f000 fe2d 	bl	8001b20 <HAL_GPIO_Init>

}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b00b      	add	sp, #44	; 0x2c
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000800 	.word	0x48000800

08000ed8 <pause_sec>:

/* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	//TO DO:
	//TASK 2
	//Make sure you've defined DELAY1 and DELAY2 in the private define section

	//YOUR CODE HERE
	for(float i = 1; i < DELAY1; i++){
 8000ee0:	23fe      	movs	r3, #254	; 0xfe
 8000ee2:	059b      	lsls	r3, r3, #22
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e01d      	b.n	8000f24 <pause_sec+0x4c>
		for(float j = 1; j < DELAY2*x; j++){}
 8000ee8:	23fe      	movs	r3, #254	; 0xfe
 8000eea:	059b      	lsls	r3, r3, #22
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	e006      	b.n	8000efe <pause_sec+0x26>
 8000ef0:	21fe      	movs	r1, #254	; 0xfe
 8000ef2:	0589      	lsls	r1, r1, #22
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f7ff fac1 	bl	800047c <__aeabi_fadd>
 8000efa:	1c03      	adds	r3, r0, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	2185      	movs	r1, #133	; 0x85
 8000f00:	05c9      	lsls	r1, r1, #23
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fd08 	bl	8000918 <__aeabi_fmul>
 8000f08:	1c03      	adds	r3, r0, #0
 8000f0a:	1c19      	adds	r1, r3, #0
 8000f0c:	68b8      	ldr	r0, [r7, #8]
 8000f0e:	f7ff fa8d 	bl	800042c <__aeabi_fcmplt>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d1ec      	bne.n	8000ef0 <pause_sec+0x18>
	for(float i = 1; i < DELAY1; i++){
 8000f16:	21fe      	movs	r1, #254	; 0xfe
 8000f18:	0589      	lsls	r1, r1, #22
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f7ff faae 	bl	800047c <__aeabi_fadd>
 8000f20:	1c03      	adds	r3, r0, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4905      	ldr	r1, [pc, #20]	; (8000f3c <pause_sec+0x64>)
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f7ff fa80 	bl	800042c <__aeabi_fcmplt>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d1db      	bne.n	8000ee8 <pause_sec+0x10>
	}
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46a98800 	.word	0x46a98800

08000f40 <decToBcd>:

uint8_t decToBcd(int val)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    /* Convert normal decimal numbers to binary coded decimal*/
	//TO DO:
	//TASK 3

	//YOUR CODE HERE
	return (uint8_t)((val/10 * 16) + (val%10));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff f96f 	bl	8000230 <__divsi3>
 8000f52:	0003      	movs	r3, r0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	b2dc      	uxtb	r4, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	210a      	movs	r1, #10
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fa4c 	bl	80003fc <__aeabi_idivmod>
 8000f64:	000b      	movs	r3, r1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	18e3      	adds	r3, r4, r3
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b003      	add	sp, #12
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <bcdToDec>:

int bcdToDec(uint8_t val)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	701a      	strb	r2, [r3, #0]
	//TASK 3
	//Complete the BCD to decimal function

	//YOUR CODE HERE
	//return (int)((val/16 *10) + (val%16));
	return ((val>>4)*10+(val&0x0F));
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	001a      	movs	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	0019      	movs	r1, r3
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	220f      	movs	r2, #15
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	18cb      	adds	r3, r1, r3

}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <setTime>:

void setTime (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	0005      	movs	r5, r0
 8000fb0:	000c      	movs	r4, r1
 8000fb2:	0010      	movs	r0, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	1c2a      	adds	r2, r5, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	1c22      	adds	r2, r4, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	1d7b      	adds	r3, r7, #5
 8000fc4:	1c02      	adds	r2, r0, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	1c0a      	adds	r2, r1, #0
 8000fcc:	701a      	strb	r2, [r3, #0]

	//fill in the address of the RTC, the address of the first register to write and the size of each register
	//The function and RTC supports multiwrite. That means we can give the function a buffer and first address
	//and it will write 1 byte of data, increment the register address, write another byte and so on

	set_time[0] = decToBcd(sec);
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff ffb4 	bl	8000f40 <decToBcd>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	001a      	movs	r2, r3
 8000fdc:	2408      	movs	r4, #8
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	701a      	strb	r2, [r3, #0]
	set_time[1] = decToBcd(min);
 8000fe2:	1dbb      	adds	r3, r7, #6
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ffaa 	bl	8000f40 <decToBcd>
 8000fec:	0003      	movs	r3, r0
 8000fee:	001a      	movs	r2, r3
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	705a      	strb	r2, [r3, #1]
	set_time[2] = decToBcd(hour);
 8000ff4:	1d7b      	adds	r3, r7, #5
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff ffa1 	bl	8000f40 <decToBcd>
 8000ffe:	0003      	movs	r3, r0
 8001000:	001a      	movs	r2, r3
 8001002:	193b      	adds	r3, r7, r4
 8001004:	709a      	strb	r2, [r3, #2]
	set_time[3] = decToBcd(dow);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff98 	bl	8000f40 <decToBcd>
 8001010:	0003      	movs	r3, r0
 8001012:	001a      	movs	r2, r3
 8001014:	193b      	adds	r3, r7, r4
 8001016:	70da      	strb	r2, [r3, #3]
	set_time[4] = decToBcd(dom);
 8001018:	2320      	movs	r3, #32
 800101a:	18fb      	adds	r3, r7, r3
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ff8e 	bl	8000f40 <decToBcd>
 8001024:	0003      	movs	r3, r0
 8001026:	001a      	movs	r2, r3
 8001028:	193b      	adds	r3, r7, r4
 800102a:	711a      	strb	r2, [r3, #4]
	set_time[5] = decToBcd(month);
 800102c:	2324      	movs	r3, #36	; 0x24
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff ff84 	bl	8000f40 <decToBcd>
 8001038:	0003      	movs	r3, r0
 800103a:	001a      	movs	r2, r3
 800103c:	193b      	adds	r3, r7, r4
 800103e:	715a      	strb	r2, [r3, #5]
	set_time[6] = decToBcd(year);
 8001040:	2328      	movs	r3, #40	; 0x28
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff ff7a 	bl	8000f40 <decToBcd>
 800104c:	0003      	movs	r3, r0
 800104e:	001a      	movs	r2, r3
 8001050:	193b      	adds	r3, r7, r4
 8001052:	719a      	strb	r2, [r3, #6]


	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <setTime+0xd0>)
 8001056:	23fa      	movs	r3, #250	; 0xfa
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2307      	movs	r3, #7
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	193b      	adds	r3, r7, r4
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2200      	movs	r2, #0
 8001068:	21d0      	movs	r1, #208	; 0xd0
 800106a:	f000 ff97 	bl	8001f9c <HAL_I2C_Mem_Write>
	//HAL_I2C_Mem_Write(&hi2c1, 0b1101000, FIRST_REG, REG_SIZE, set_time, 7, 1000);

}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bdb0      	pop	{r4, r5, r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	2000008c 	.word	0x2000008c

0800107c <getTime>:

void getTime (void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	//fill in the address of the RTC, the address of the first register to write anmd the size of each register
	//The function and RTC supports multiread. That means we can give the function a buffer and first address
	//and it will read 1 byte of data, increment the register address, write another byte and so on
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001082:	4828      	ldr	r0, [pc, #160]	; (8001124 <getTime+0xa8>)
 8001084:	23fa      	movs	r3, #250	; 0xfa
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2307      	movs	r3, #7
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	003b      	movs	r3, r7
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2200      	movs	r2, #0
 8001096:	21d0      	movs	r1, #208	; 0xd0
 8001098:	f001 f8ae 	bl	80021f8 <HAL_I2C_Mem_Read>


	//YOUR CODE HERE
	time.seconds = bcdToDec(get_time[0]);
 800109c:	003b      	movs	r3, r7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ff67 	bl	8000f74 <bcdToDec>
 80010a6:	0003      	movs	r3, r0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <getTime+0xac>)
 80010ac:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80010ae:	003b      	movs	r3, r7
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff ff5e 	bl	8000f74 <bcdToDec>
 80010b8:	0003      	movs	r3, r0
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <getTime+0xac>)
 80010be:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80010c0:	003b      	movs	r3, r7
 80010c2:	789b      	ldrb	r3, [r3, #2]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ff55 	bl	8000f74 <bcdToDec>
 80010ca:	0003      	movs	r3, r0
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <getTime+0xac>)
 80010d0:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80010d2:	003b      	movs	r3, r7
 80010d4:	78db      	ldrb	r3, [r3, #3]
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff ff4c 	bl	8000f74 <bcdToDec>
 80010dc:	0003      	movs	r3, r0
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <getTime+0xac>)
 80010e2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80010e4:	003b      	movs	r3, r7
 80010e6:	791b      	ldrb	r3, [r3, #4]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff43 	bl	8000f74 <bcdToDec>
 80010ee:	0003      	movs	r3, r0
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <getTime+0xac>)
 80010f4:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80010f6:	003b      	movs	r3, r7
 80010f8:	795b      	ldrb	r3, [r3, #5]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff ff3a 	bl	8000f74 <bcdToDec>
 8001100:	0003      	movs	r3, r0
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <getTime+0xac>)
 8001106:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001108:	003b      	movs	r3, r7
 800110a:	799b      	ldrb	r3, [r3, #6]
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff ff31 	bl	8000f74 <bcdToDec>
 8001112:	0003      	movs	r3, r0
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <getTime+0xac>)
 8001118:	719a      	strb	r2, [r3, #6]
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	2000008c 	.word	0x2000008c
 8001128:	200001b4 	.word	0x200001b4

0800112c <epochFromTime>:

int epochFromTime(TIME time){
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	003b      	movs	r3, r7
 8001134:	6018      	str	r0, [r3, #0]
 8001136:	6059      	str	r1, [r3, #4]
	//TASK 5
	//You have been given the epoch time for Saturday, January 1, 2022 12:00:00 AM GMT+02:00
	//It is define above as EPOCH_2022. You can work from that and ignore the effects of leap years/seconds

	//YOUR CODE HERE
	int months = time.month;
 8001138:	003b      	movs	r3, r7
 800113a:	795b      	ldrb	r3, [r3, #5]
 800113c:	617b      	str	r3, [r7, #20]
	int day = time.dayofmonth;
 800113e:	003b      	movs	r3, r7
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	61fb      	str	r3, [r7, #28]
	int hours = time.hour;
 8001144:	003b      	movs	r3, r7
 8001146:	789b      	ldrb	r3, [r3, #2]
 8001148:	613b      	str	r3, [r7, #16]
	int minutes = time.minutes;
 800114a:	003b      	movs	r3, r7
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	60fb      	str	r3, [r7, #12]
	int seconds = time.seconds;
 8001150:	003b      	movs	r3, r7
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	60bb      	str	r3, [r7, #8]

	int EPOCH = EPOCH_2022;
 8001156:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <epochFromTime+0x11c>)
 8001158:	61bb      	str	r3, [r7, #24]
	switch(months){
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b0c      	cmp	r3, #12
 800115e:	d847      	bhi.n	80011f0 <epochFromTime+0xc4>
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	009a      	lsls	r2, r3, #2
 8001164:	4b39      	ldr	r3, [pc, #228]	; (800124c <epochFromTime+0x120>)
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	469f      	mov	pc, r3

	case 2:

		EPOCH += 31*24*60*60;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4a38      	ldr	r2, [pc, #224]	; (8001250 <epochFromTime+0x124>)
 8001170:	4694      	mov	ip, r2
 8001172:	4463      	add	r3, ip
 8001174:	61bb      	str	r3, [r7, #24]
	break;
 8001176:	e03b      	b.n	80011f0 <epochFromTime+0xc4>

	case 3:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 *60;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	4a36      	ldr	r2, [pc, #216]	; (8001254 <epochFromTime+0x128>)
 800117c:	4694      	mov	ip, r2
 800117e:	4463      	add	r3, ip
 8001180:	61bb      	str	r3, [r7, #24]

	break;
 8001182:	e035      	b.n	80011f0 <epochFromTime+0xc4>

	case 4:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60;
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	4a34      	ldr	r2, [pc, #208]	; (8001258 <epochFromTime+0x12c>)
 8001188:	4694      	mov	ip, r2
 800118a:	4463      	add	r3, ip
 800118c:	61bb      	str	r3, [r7, #24]
	break;
 800118e:	e02f      	b.n	80011f0 <epochFromTime+0xc4>

	case 5:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400;
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <epochFromTime+0x130>)
 8001194:	4694      	mov	ip, r2
 8001196:	4463      	add	r3, ip
 8001198:	61bb      	str	r3, [r7, #24]
	break;
 800119a:	e029      	b.n	80011f0 <epochFromTime+0xc4>

	case 6:

		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	4a30      	ldr	r2, [pc, #192]	; (8001260 <epochFromTime+0x134>)
 80011a0:	4694      	mov	ip, r2
 80011a2:	4463      	add	r3, ip
 80011a4:	61bb      	str	r3, [r7, #24]
	break;
 80011a6:	e023      	b.n	80011f0 <epochFromTime+0xc4>

	case 7:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <epochFromTime+0x138>)
 80011ac:	4694      	mov	ip, r2
 80011ae:	4463      	add	r3, ip
 80011b0:	61bb      	str	r3, [r7, #24]
	break;
 80011b2:	e01d      	b.n	80011f0 <epochFromTime+0xc4>

	case 8:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400;
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <epochFromTime+0x13c>)
 80011b8:	4694      	mov	ip, r2
 80011ba:	4463      	add	r3, ip
 80011bc:	61bb      	str	r3, [r7, #24]
	break;
 80011be:	e017      	b.n	80011f0 <epochFromTime+0xc4>

	case 9:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	4a2a      	ldr	r2, [pc, #168]	; (800126c <epochFromTime+0x140>)
 80011c4:	4694      	mov	ip, r2
 80011c6:	4463      	add	r3, ip
 80011c8:	61bb      	str	r3, [r7, #24]
	break;
 80011ca:	e011      	b.n	80011f0 <epochFromTime+0xc4>

	case 10:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400 + 30*86400;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	4a28      	ldr	r2, [pc, #160]	; (8001270 <epochFromTime+0x144>)
 80011d0:	4694      	mov	ip, r2
 80011d2:	4463      	add	r3, ip
 80011d4:	61bb      	str	r3, [r7, #24]
	break;
 80011d6:	e00b      	b.n	80011f0 <epochFromTime+0xc4>

	case 11:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400 + 30*86400 + 31*86400;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <epochFromTime+0x148>)
 80011dc:	4694      	mov	ip, r2
 80011de:	4463      	add	r3, ip
 80011e0:	61bb      	str	r3, [r7, #24]
	break;
 80011e2:	e005      	b.n	80011f0 <epochFromTime+0xc4>

	case 12:
		EPOCH += 31 * 24 * 60 * 60 + 28 * 24 * 60 * 60 + 31*24*60*60 + 30*86400 + 31*86400 + 30*86400 + 31*86400 + 31*86400 + 30*86400 + 31*86400 + 30*86400;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <epochFromTime+0x14c>)
 80011e8:	4694      	mov	ip, r2
 80011ea:	4463      	add	r3, ip
 80011ec:	61bb      	str	r3, [r7, #24]
	break;
 80011ee:	46c0      	nop			; (mov r8, r8)

	default:
		day = day;
	}

	EPOCH += (day-1)*24*60*60; // adding number of days
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	0013      	movs	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	189b      	adds	r3, r3, r2
 80011fa:	011a      	lsls	r2, r3, #4
 80011fc:	1ad2      	subs	r2, r2, r3
 80011fe:	0113      	lsls	r3, r2, #4
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	01db      	lsls	r3, r3, #7
 8001204:	001a      	movs	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	189b      	adds	r3, r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
	EPOCH += hours*60*60; // adding number of hours
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	0013      	movs	r3, r2
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	011a      	lsls	r2, r3, #4
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	0113      	lsls	r3, r2, #4
 800121a:	001a      	movs	r2, r3
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	189b      	adds	r3, r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
	EPOCH += minutes*60; // adding number of minutes
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	0013      	movs	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	001a      	movs	r2, r3
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	189b      	adds	r3, r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
	EPOCH += seconds; //adding seconds
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	61bb      	str	r3, [r7, #24]



	return EPOCH;
 800123c:	69bb      	ldr	r3, [r7, #24]
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b008      	add	sp, #32
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	61cf7d60 	.word	0x61cf7d60
 800124c:	08004484 	.word	0x08004484
 8001250:	0028de80 	.word	0x0028de80
 8001254:	004dc880 	.word	0x004dc880
 8001258:	0076a700 	.word	0x0076a700
 800125c:	009e3400 	.word	0x009e3400
 8001260:	00c71280 	.word	0x00c71280
 8001264:	00ee9f80 	.word	0x00ee9f80
 8001268:	01177e00 	.word	0x01177e00
 800126c:	01405c80 	.word	0x01405c80
 8001270:	0167e980 	.word	0x0167e980
 8001274:	0190c800 	.word	0x0190c800
 8001278:	01b85500 	.word	0x01b85500

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x44>)
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_MspInit+0x44>)
 8001294:	2101      	movs	r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	619a      	str	r2, [r3, #24]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x44>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	2201      	movs	r2, #1
 80012a0:	4013      	ands	r3, r2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x44>)
 80012a8:	69da      	ldr	r2, [r3, #28]
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_MspInit+0x44>)
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	0549      	lsls	r1, r1, #21
 80012b0:	430a      	orrs	r2, r1
 80012b2:	61da      	str	r2, [r3, #28]
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_MspInit+0x44>)
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	055b      	lsls	r3, r3, #21
 80012bc:	4013      	ands	r3, r2
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b08b      	sub	sp, #44	; 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	2414      	movs	r4, #20
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	0018      	movs	r0, r3
 80012de:	2314      	movs	r3, #20
 80012e0:	001a      	movs	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f002 fbf2 	bl	8003acc <memset>
  if(hi2c->Instance==I2C1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_I2C_MspInit+0x90>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d131      	bne.n	8001356 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_I2C_MspInit+0x94>)
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_I2C_MspInit+0x94>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	02c9      	lsls	r1, r1, #11
 80012fc:	430a      	orrs	r2, r1
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_I2C_MspInit+0x94>)
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	02db      	lsls	r3, r3, #11
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800130e:	0021      	movs	r1, r4
 8001310:	187b      	adds	r3, r7, r1
 8001312:	22c0      	movs	r2, #192	; 0xc0
 8001314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2212      	movs	r2, #18
 800131a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2203      	movs	r2, #3
 8001326:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2201      	movs	r2, #1
 800132c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	187b      	adds	r3, r7, r1
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_I2C_MspInit+0x98>)
 8001332:	0019      	movs	r1, r3
 8001334:	0010      	movs	r0, r2
 8001336:	f000 fbf3 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_I2C_MspInit+0x94>)
 800133c:	69da      	ldr	r2, [r3, #28]
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_I2C_MspInit+0x94>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0389      	lsls	r1, r1, #14
 8001344:	430a      	orrs	r2, r1
 8001346:	61da      	str	r2, [r3, #28]
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_I2C_MspInit+0x94>)
 800134a:	69da      	ldr	r2, [r3, #28]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	039b      	lsls	r3, r3, #14
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b00b      	add	sp, #44	; 0x2c
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40005400 	.word	0x40005400
 8001364:	40021000 	.word	0x40021000
 8001368:	48000400 	.word	0x48000400

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	2414      	movs	r4, #20
 8001376:	193b      	adds	r3, r7, r4
 8001378:	0018      	movs	r0, r3
 800137a:	2314      	movs	r3, #20
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f002 fba4 	bl	8003acc <memset>
  if(huart->Instance==USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a33      	ldr	r2, [pc, #204]	; (8001458 <HAL_UART_MspInit+0xec>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d160      	bne.n	8001450 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_UART_MspInit+0xf0>)
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	4b32      	ldr	r3, [pc, #200]	; (800145c <HAL_UART_MspInit+0xf0>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0289      	lsls	r1, r1, #10
 8001398:	430a      	orrs	r2, r1
 800139a:	61da      	str	r2, [r3, #28]
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <HAL_UART_MspInit+0xf0>)
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	029b      	lsls	r3, r3, #10
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <HAL_UART_MspInit+0xf0>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_UART_MspInit+0xf0>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0289      	lsls	r1, r1, #10
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_UART_MspInit+0xf0>)
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013c6:	0021      	movs	r1, r4
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2202      	movs	r2, #2
 80013d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2203      	movs	r2, #3
 80013de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2201      	movs	r2, #1
 80013e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	187a      	adds	r2, r7, r1
 80013e8:	2390      	movs	r3, #144	; 0x90
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	0011      	movs	r1, r2
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 fb96 	bl	8001b20 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_UART_MspInit+0xf4>)
 80013f6:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <HAL_UART_MspInit+0xf8>)
 80013f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_UART_MspInit+0xf4>)
 80013fc:	2210      	movs	r2, #16
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_UART_MspInit+0xf4>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_UART_MspInit+0xf4>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001426:	0018      	movs	r0, r3
 8001428:	f000 f9f6 	bl	8001818 <HAL_DMA_Init>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001430:	f7ff ff24 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001438:	66da      	str	r2, [r3, #108]	; 0x6c
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_UART_MspInit+0xf4>)
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	201c      	movs	r0, #28
 8001446:	f000 f9b5 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800144a:	201c      	movs	r0, #28
 800144c:	f000 f9c7 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b00b      	add	sp, #44	; 0x2c
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	40004400 	.word	0x40004400
 800145c:	40021000 	.word	0x40021000
 8001460:	2000015c 	.word	0x2000015c
 8001464:	40020044 	.word	0x40020044

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8ca 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <DMA1_Channel4_5_IRQHandler+0x14>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f000 fa7f 	bl	80019a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	2000015c 	.word	0x2000015c

080014b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <USART2_IRQHandler+0x14>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f001 fc3e 	bl	8002d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	200000d8 	.word	0x200000d8

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f002 fabe 	bl	8003a78 <__errno>
 80014fc:	0003      	movs	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	2301      	movs	r3, #1
 8001504:	425b      	negs	r3, r3
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	18d2      	adds	r2, r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b006      	add	sp, #24
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20002000 	.word	0x20002000
 8001528:	00000400 	.word	0x00000400
 800152c:	200001bc 	.word	0x200001bc
 8001530:	200001d8 	.word	0x200001d8

08001534 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001542:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopForever+0x6>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopForever+0xe>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopForever+0x12>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopForever+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800156a:	f7ff ffe3 	bl	8001534 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800156e:	f002 fa89 	bl	8003a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001572:	f7ff fb15 	bl	8000ba0 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   r0, =_estack
 8001578:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001584:	080044fc 	.word	0x080044fc
  ldr r2, =_sbss
 8001588:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800158c:	200001d4 	.word	0x200001d4

08001590 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_COMP_IRQHandler>
	...

08001594 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_Init+0x24>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_Init+0x24>)
 800159e:	2110      	movs	r1, #16
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f809 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015aa:	f7ff fe6d 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	40022000 	.word	0x40022000

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_InitTick+0x5c>)
 80015c6:	681c      	ldr	r4, [r3, #0]
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_InitTick+0x60>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	0019      	movs	r1, r3
 80015ce:	23fa      	movs	r3, #250	; 0xfa
 80015d0:	0098      	lsls	r0, r3, #2
 80015d2:	f7fe fda3 	bl	800011c <__udivsi3>
 80015d6:	0003      	movs	r3, r0
 80015d8:	0019      	movs	r1, r3
 80015da:	0020      	movs	r0, r4
 80015dc:	f7fe fd9e 	bl	800011c <__udivsi3>
 80015e0:	0003      	movs	r3, r0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f90b 	bl	80017fe <HAL_SYSTICK_Config>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e00f      	b.n	8001610 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d80b      	bhi.n	800160e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	2301      	movs	r3, #1
 80015fa:	425b      	negs	r3, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f8d8 	bl	80017b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_InitTick+0x64>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b003      	add	sp, #12
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	20000008 	.word	0x20000008
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_IncTick+0x1c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	001a      	movs	r2, r3
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_IncTick+0x20>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	18d2      	adds	r2, r2, r3
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_IncTick+0x20>)
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	20000008 	.word	0x20000008
 8001644:	200001c0 	.word	0x200001c0

08001648 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <HAL_GetTick+0x10>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	200001c0 	.word	0x200001c0

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	0002      	movs	r2, r0
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b7f      	cmp	r3, #127	; 0x7f
 800166e:	d809      	bhi.n	8001684 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	001a      	movs	r2, r3
 8001676:	231f      	movs	r3, #31
 8001678:	401a      	ands	r2, r3
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <__NVIC_EnableIRQ+0x30>)
 800167c:	2101      	movs	r1, #1
 800167e:	4091      	lsls	r1, r2
 8001680:	000a      	movs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
  }
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	0002      	movs	r2, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b7f      	cmp	r3, #127	; 0x7f
 80016a4:	d828      	bhi.n	80016f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <__NVIC_SetPriority+0xd4>)
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	33c0      	adds	r3, #192	; 0xc0
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	589b      	ldr	r3, [r3, r2]
 80016b6:	1dfa      	adds	r2, r7, #7
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	0011      	movs	r1, r2
 80016bc:	2203      	movs	r2, #3
 80016be:	400a      	ands	r2, r1
 80016c0:	00d2      	lsls	r2, r2, #3
 80016c2:	21ff      	movs	r1, #255	; 0xff
 80016c4:	4091      	lsls	r1, r2
 80016c6:	000a      	movs	r2, r1
 80016c8:	43d2      	mvns	r2, r2
 80016ca:	401a      	ands	r2, r3
 80016cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	22ff      	movs	r2, #255	; 0xff
 80016d4:	401a      	ands	r2, r3
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	2303      	movs	r3, #3
 80016de:	4003      	ands	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e4:	481f      	ldr	r0, [pc, #124]	; (8001764 <__NVIC_SetPriority+0xd4>)
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	33c0      	adds	r3, #192	; 0xc0
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016f6:	e031      	b.n	800175c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <__NVIC_SetPriority+0xd8>)
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0019      	movs	r1, r3
 8001700:	230f      	movs	r3, #15
 8001702:	400b      	ands	r3, r1
 8001704:	3b08      	subs	r3, #8
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3306      	adds	r3, #6
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1dfa      	adds	r2, r7, #7
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	0011      	movs	r1, r2
 8001718:	2203      	movs	r2, #3
 800171a:	400a      	ands	r2, r1
 800171c:	00d2      	lsls	r2, r2, #3
 800171e:	21ff      	movs	r1, #255	; 0xff
 8001720:	4091      	lsls	r1, r2
 8001722:	000a      	movs	r2, r1
 8001724:	43d2      	mvns	r2, r2
 8001726:	401a      	ands	r2, r3
 8001728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	019b      	lsls	r3, r3, #6
 800172e:	22ff      	movs	r2, #255	; 0xff
 8001730:	401a      	ands	r2, r3
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	0018      	movs	r0, r3
 8001738:	2303      	movs	r3, #3
 800173a:	4003      	ands	r3, r0
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <__NVIC_SetPriority+0xd8>)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001c      	movs	r4, r3
 8001748:	230f      	movs	r3, #15
 800174a:	4023      	ands	r3, r4
 800174c:	3b08      	subs	r3, #8
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	430a      	orrs	r2, r1
 8001752:	3306      	adds	r3, #6
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	18c3      	adds	r3, r0, r3
 8001758:	3304      	adds	r3, #4
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b003      	add	sp, #12
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	045b      	lsls	r3, r3, #17
 800177c:	429a      	cmp	r2, r3
 800177e:	d301      	bcc.n	8001784 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001780:	2301      	movs	r3, #1
 8001782:	e010      	b.n	80017a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <SysTick_Config+0x44>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	3a01      	subs	r2, #1
 800178a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178c:	2301      	movs	r3, #1
 800178e:	425b      	negs	r3, r3
 8001790:	2103      	movs	r1, #3
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ff7c 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x44>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x44>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	210f      	movs	r1, #15
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	0002      	movs	r2, r0
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff33 	bl	800165c <__NVIC_EnableIRQ>
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff ffaf 	bl	800176c <SysTick_Config>
 800180e:	0003      	movs	r3, r0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e036      	b.n	800189c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2221      	movs	r2, #33	; 0x21
 8001832:	2102      	movs	r1, #2
 8001834:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_DMA_Init+0x8c>)
 8001842:	4013      	ands	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	0018      	movs	r0, r3
 8001880:	f000 f932 	bl	8001ae8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2221      	movs	r2, #33	; 0x21
 800188e:	2101      	movs	r1, #1
 8001890:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}  
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	ffffc00f 	.word	0xffffc00f

080018a8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2221      	movs	r2, #33	; 0x21
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d008      	beq.n	80018ce <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	2100      	movs	r1, #0
 80018c8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e020      	b.n	8001910 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	210e      	movs	r1, #14
 80018da:	438a      	bics	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	438a      	bics	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f6:	2101      	movs	r1, #1
 80018f8:	4091      	lsls	r1, r2
 80018fa:	000a      	movs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2221      	movs	r2, #33	; 0x21
 8001902:	2101      	movs	r1, #1
 8001904:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	2100      	movs	r1, #0
 800190c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001920:	210f      	movs	r1, #15
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2221      	movs	r2, #33	; 0x21
 800192c:	5c9b      	ldrb	r3, [r3, r2]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d006      	beq.n	8001942 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2204      	movs	r2, #4
 8001938:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800193a:	187b      	adds	r3, r7, r1
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e028      	b.n	8001994 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	210e      	movs	r1, #14
 800194e:	438a      	bics	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	438a      	bics	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196a:	2101      	movs	r1, #1
 800196c:	4091      	lsls	r1, r2
 800196e:	000a      	movs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2221      	movs	r2, #33	; 0x21
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2220      	movs	r2, #32
 800197e:	2100      	movs	r1, #0
 8001980:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	0010      	movs	r0, r2
 8001992:	4798      	blx	r3
    } 
  }
  return status;
 8001994:	230f      	movs	r3, #15
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2204      	movs	r2, #4
 80019c0:	409a      	lsls	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	d024      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x72>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2204      	movs	r2, #4
 80019ce:	4013      	ands	r3, r2
 80019d0:	d020      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2220      	movs	r2, #32
 80019da:	4013      	ands	r3, r2
 80019dc:	d107      	bne.n	80019ee <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2104      	movs	r1, #4
 80019ea:	438a      	bics	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2104      	movs	r1, #4
 80019f8:	4091      	lsls	r1, r2
 80019fa:	000a      	movs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d100      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x66>
 8001a06:	e06a      	b.n	8001ade <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	0010      	movs	r0, r2
 8001a10:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a12:	e064      	b.n	8001ade <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2202      	movs	r2, #2
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	d02b      	beq.n	8001a7c <HAL_DMA_IRQHandler+0xda>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d027      	beq.n	8001a7c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2220      	movs	r2, #32
 8001a34:	4013      	ands	r3, r2
 8001a36:	d10b      	bne.n	8001a50 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	210a      	movs	r1, #10
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2221      	movs	r2, #33	; 0x21
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4091      	lsls	r1, r2
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d036      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	0010      	movs	r0, r2
 8001a78:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a7a:	e030      	b.n	8001ade <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2208      	movs	r2, #8
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d028      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13c>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	4013      	ands	r3, r2
 8001a92:	d024      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	210e      	movs	r1, #14
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	2101      	movs	r1, #1
 8001aae:	4091      	lsls	r1, r2
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2221      	movs	r2, #33	; 0x21
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	0010      	movs	r0, r2
 8001ada:	4798      	blx	r3
    }
   }
}  
 8001adc:	e7ff      	b.n	8001ade <HAL_DMA_IRQHandler+0x13c>
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <DMA_CalcBaseAndBitshift+0x30>)
 8001af6:	4694      	mov	ip, r2
 8001af8:	4463      	add	r3, ip
 8001afa:	2114      	movs	r1, #20
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7fe fb0d 	bl	800011c <__udivsi3>
 8001b02:	0003      	movs	r3, r0
 8001b04:	009a      	lsls	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <DMA_CalcBaseAndBitshift+0x34>)
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	bffdfff8 	.word	0xbffdfff8
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e14f      	b.n	8001dd0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4091      	lsls	r1, r2
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <HAL_GPIO_Init+0x28>
 8001b46:	e140      	b.n	8001dca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	2201      	movs	r2, #1
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	58d3      	ldr	r3, [r2, r3]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2107      	movs	r1, #7
 8001c36:	400b      	ands	r3, r1
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	23c0      	movs	r3, #192	; 0xc0
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d100      	bne.n	8001c94 <HAL_GPIO_Init+0x174>
 8001c92:	e09a      	b.n	8001dca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <HAL_GPIO_Init+0x2c8>)
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_GPIO_Init+0x2c8>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	619a      	str	r2, [r3, #24]
 8001ca0:	4b51      	ldr	r3, [pc, #324]	; (8001de8 <HAL_GPIO_Init+0x2c8>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cac:	4a4f      	ldr	r2, [pc, #316]	; (8001dec <HAL_GPIO_Init+0x2cc>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	589b      	ldr	r3, [r3, r2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	2390      	movs	r3, #144	; 0x90
 8001cd4:	05db      	lsls	r3, r3, #23
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a44      	ldr	r2, [pc, #272]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x1de>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a43      	ldr	r2, [pc, #268]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x1da>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x1d6>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001d02:	2300      	movs	r3, #0
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	2103      	movs	r1, #3
 8001d08:	400a      	ands	r2, r1
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d14:	4935      	ldr	r1, [pc, #212]	; (8001dec <HAL_GPIO_Init+0x2cc>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	025b      	lsls	r3, r3, #9
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43da      	mvns	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	029b      	lsls	r3, r3, #10
 8001d64:	4013      	ands	r3, r2
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	035b      	lsls	r3, r3, #13
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	039b      	lsls	r3, r3, #14
 8001db8:	4013      	ands	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	1e13      	subs	r3, r2, #0
 8001dda:	d000      	beq.n	8001dde <HAL_GPIO_Init+0x2be>
 8001ddc:	e6a8      	b.n	8001b30 <HAL_GPIO_Init+0x10>
  } 
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b006      	add	sp, #24
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000
 8001df0:	48000400 	.word	0x48000400
 8001df4:	48000800 	.word	0x48000800
 8001df8:	48000c00 	.word	0x48000c00
 8001dfc:	40010400 	.word	0x40010400

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	0008      	movs	r0, r1
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	1cbb      	adds	r3, r7, #2
 8001e0e:	1c02      	adds	r2, r0, #0
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	1c7b      	adds	r3, r7, #1
 8001e14:	1c0a      	adds	r2, r1, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e18:	1c7b      	adds	r3, r7, #1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e20:	1cbb      	adds	r3, r7, #2
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e2a:	1cbb      	adds	r3, r7, #2
 8001e2c:	881a      	ldrh	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b002      	add	sp, #8
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	000a      	movs	r2, r1
 8001e44:	1cbb      	adds	r3, r7, #2
 8001e46:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e4e:	1cbb      	adds	r3, r7, #2
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	041a      	lsls	r2, r3, #16
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	1cb9      	adds	r1, r7, #2
 8001e5e:	8809      	ldrh	r1, [r1, #0]
 8001e60:	400b      	ands	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e082      	b.n	8001f88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2241      	movs	r2, #65	; 0x41
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff fa19 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2241      	movs	r2, #65	; 0x41
 8001ea2:	2124      	movs	r1, #36	; 0x24
 8001ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_I2C_Init+0x120>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4931      	ldr	r1, [pc, #196]	; (8001f94 <HAL_I2C_Init+0x124>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	0209      	lsls	r1, r1, #8
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e007      	b.n	8001efe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2184      	movs	r1, #132	; 0x84
 8001ef8:	0209      	lsls	r1, r1, #8
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d104      	bne.n	8001f10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	491f      	ldr	r1, [pc, #124]	; (8001f98 <HAL_I2C_Init+0x128>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	491a      	ldr	r1, [pc, #104]	; (8001f94 <HAL_I2C_Init+0x124>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69d9      	ldr	r1, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2241      	movs	r2, #65	; 0x41
 8001f74:	2120      	movs	r1, #32
 8001f76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2242      	movs	r2, #66	; 0x42
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	f0ffffff 	.word	0xf0ffffff
 8001f94:	ffff7fff 	.word	0xffff7fff
 8001f98:	02008000 	.word	0x02008000

08001f9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	000c      	movs	r4, r1
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	230a      	movs	r3, #10
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	1c22      	adds	r2, r4, #0
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	1c02      	adds	r2, r0, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	1dbb      	adds	r3, r7, #6
 8001fbc:	1c0a      	adds	r2, r1, #0
 8001fbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2241      	movs	r2, #65	; 0x41
 8001fc4:	5c9b      	ldrb	r3, [r3, r2]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d000      	beq.n	8001fce <HAL_I2C_Mem_Write+0x32>
 8001fcc:	e10c      	b.n	80021e8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <HAL_I2C_Mem_Write+0x42>
 8001fd4:	232c      	movs	r3, #44	; 0x2c
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0092      	lsls	r2, r2, #2
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0ff      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2C_Mem_Write+0x5c>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0f8      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2240      	movs	r2, #64	; 0x40
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002000:	f7ff fb22 	bl	8001648 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	0219      	lsls	r1, r3, #8
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2319      	movs	r3, #25
 8002014:	2201      	movs	r2, #1
 8002016:	f000 fb0b 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0e3      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2241      	movs	r2, #65	; 0x41
 8002026:	2121      	movs	r1, #33	; 0x21
 8002028:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2242      	movs	r2, #66	; 0x42
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	222c      	movs	r2, #44	; 0x2c
 8002042:	18ba      	adds	r2, r7, r2
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800204e:	1dbb      	adds	r3, r7, #6
 8002050:	881c      	ldrh	r4, [r3, #0]
 8002052:	2308      	movs	r3, #8
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	881a      	ldrh	r2, [r3, #0]
 8002058:	230a      	movs	r3, #10
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	8819      	ldrh	r1, [r3, #0]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	0023      	movs	r3, r4
 800206a:	f000 f9f9 	bl	8002460 <I2C_RequestMemoryWrite>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d005      	beq.n	800207e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0b5      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	2bff      	cmp	r3, #255	; 0xff
 8002086:	d911      	bls.n	80020ac <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	22ff      	movs	r2, #255	; 0xff
 800208c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	b2da      	uxtb	r2, r3
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	045c      	lsls	r4, r3, #17
 8002098:	230a      	movs	r3, #10
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	8819      	ldrh	r1, [r3, #0]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	0023      	movs	r3, r4
 80020a6:	f000 fbf7 	bl	8002898 <I2C_TransferConfig>
 80020aa:	e012      	b.n	80020d2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	049c      	lsls	r4, r3, #18
 80020c0:	230a      	movs	r3, #10
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	8819      	ldrh	r1, [r3, #0]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	0023      	movs	r3, r4
 80020ce:	f000 fbe3 	bl	8002898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 fae8 	bl	80026ae <I2C_WaitOnTXISFlagUntilTimeout>
 80020de:	1e03      	subs	r3, r0, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e081      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03a      	beq.n	8002196 <HAL_I2C_Mem_Write+0x1fa>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d136      	bne.n	8002196 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	0013      	movs	r3, r2
 8002132:	2200      	movs	r2, #0
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	f000 fa7b 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 800213a:	1e03      	subs	r3, r0, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e053      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	2bff      	cmp	r3, #255	; 0xff
 800214a:	d911      	bls.n	8002170 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	b2da      	uxtb	r2, r3
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	045c      	lsls	r4, r3, #17
 800215c:	230a      	movs	r3, #10
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	8819      	ldrh	r1, [r3, #0]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	2300      	movs	r3, #0
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	0023      	movs	r3, r4
 800216a:	f000 fb95 	bl	8002898 <I2C_TransferConfig>
 800216e:	e012      	b.n	8002196 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	b2da      	uxtb	r2, r3
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	049c      	lsls	r4, r3, #18
 8002184:	230a      	movs	r3, #10
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	8819      	ldrh	r1, [r3, #0]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	2300      	movs	r3, #0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	0023      	movs	r3, r4
 8002192:	f000 fb81 	bl	8002898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d198      	bne.n	80020d2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 fac0 	bl	800272c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e01a      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2220      	movs	r2, #32
 80021ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	490b      	ldr	r1, [pc, #44]	; (80021f4 <HAL_I2C_Mem_Write+0x258>)
 80021c8:	400a      	ands	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2241      	movs	r2, #65	; 0x41
 80021d0:	2120      	movs	r1, #32
 80021d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2242      	movs	r2, #66	; 0x42
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2240      	movs	r2, #64	; 0x40
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b007      	add	sp, #28
 80021f0:	bd90      	pop	{r4, r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	fe00e800 	.word	0xfe00e800

080021f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	000c      	movs	r4, r1
 8002202:	0010      	movs	r0, r2
 8002204:	0019      	movs	r1, r3
 8002206:	230a      	movs	r3, #10
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	1c22      	adds	r2, r4, #0
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	2308      	movs	r3, #8
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	1c02      	adds	r2, r0, #0
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	1dbb      	adds	r3, r7, #6
 8002218:	1c0a      	adds	r2, r1, #0
 800221a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2241      	movs	r2, #65	; 0x41
 8002220:	5c9b      	ldrb	r3, [r3, r2]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b20      	cmp	r3, #32
 8002226:	d000      	beq.n	800222a <HAL_I2C_Mem_Read+0x32>
 8002228:	e110      	b.n	800244c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <HAL_I2C_Mem_Read+0x42>
 8002230:	232c      	movs	r3, #44	; 0x2c
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e103      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2240      	movs	r2, #64	; 0x40
 800224a:	5c9b      	ldrb	r3, [r3, r2]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2C_Mem_Read+0x5c>
 8002250:	2302      	movs	r3, #2
 8002252:	e0fc      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	2101      	movs	r1, #1
 800225a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800225c:	f7ff f9f4 	bl	8001648 <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	0219      	lsls	r1, r3, #8
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2319      	movs	r3, #25
 8002270:	2201      	movs	r2, #1
 8002272:	f000 f9dd 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002276:	1e03      	subs	r3, r0, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0e7      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2241      	movs	r2, #65	; 0x41
 8002282:	2122      	movs	r1, #34	; 0x22
 8002284:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2242      	movs	r2, #66	; 0x42
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	222c      	movs	r2, #44	; 0x2c
 800229e:	18ba      	adds	r2, r7, r2
 80022a0:	8812      	ldrh	r2, [r2, #0]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022aa:	1dbb      	adds	r3, r7, #6
 80022ac:	881c      	ldrh	r4, [r3, #0]
 80022ae:	2308      	movs	r3, #8
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	230a      	movs	r3, #10
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	8819      	ldrh	r1, [r3, #0]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	0023      	movs	r3, r4
 80022c6:	f000 f92f 	bl	8002528 <I2C_RequestMemoryRead>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d005      	beq.n	80022da <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0b9      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2bff      	cmp	r3, #255	; 0xff
 80022e2:	d911      	bls.n	8002308 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	22ff      	movs	r2, #255	; 0xff
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	045c      	lsls	r4, r3, #17
 80022f4:	230a      	movs	r3, #10
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	8819      	ldrh	r1, [r3, #0]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_I2C_Mem_Read+0x260>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	0023      	movs	r3, r4
 8002302:	f000 fac9 	bl	8002898 <I2C_TransferConfig>
 8002306:	e012      	b.n	800232e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	049c      	lsls	r4, r3, #18
 800231c:	230a      	movs	r3, #10
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	8819      	ldrh	r1, [r3, #0]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_I2C_Mem_Read+0x260>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	0023      	movs	r3, r4
 800232a:	f000 fab5 	bl	8002898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800232e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	0013      	movs	r3, r2
 8002338:	2200      	movs	r2, #0
 800233a:	2104      	movs	r1, #4
 800233c:	f000 f978 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002340:	1e03      	subs	r3, r0, #0
 8002342:	d001      	beq.n	8002348 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e082      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d03a      	beq.n	80023fa <HAL_I2C_Mem_Read+0x202>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	d136      	bne.n	80023fa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800238c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	0013      	movs	r3, r2
 8002396:	2200      	movs	r2, #0
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	f000 f949 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e053      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2bff      	cmp	r3, #255	; 0xff
 80023ae:	d911      	bls.n	80023d4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	045c      	lsls	r4, r3, #17
 80023c0:	230a      	movs	r3, #10
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	8819      	ldrh	r1, [r3, #0]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	0023      	movs	r3, r4
 80023ce:	f000 fa63 	bl	8002898 <I2C_TransferConfig>
 80023d2:	e012      	b.n	80023fa <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	049c      	lsls	r4, r3, #18
 80023e8:	230a      	movs	r3, #10
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	8819      	ldrh	r1, [r3, #0]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	0023      	movs	r3, r4
 80023f6:	f000 fa4f 	bl	8002898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d194      	bne.n	800232e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f98e 	bl	800272c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e01a      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	490c      	ldr	r1, [pc, #48]	; (800245c <HAL_I2C_Mem_Read+0x264>)
 800242c:	400a      	ands	r2, r1
 800242e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2241      	movs	r2, #65	; 0x41
 8002434:	2120      	movs	r1, #32
 8002436:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2242      	movs	r2, #66	; 0x42
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b007      	add	sp, #28
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	80002400 	.word	0x80002400
 800245c:	fe00e800 	.word	0xfe00e800

08002460 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	000c      	movs	r4, r1
 800246a:	0010      	movs	r0, r2
 800246c:	0019      	movs	r1, r3
 800246e:	250a      	movs	r5, #10
 8002470:	197b      	adds	r3, r7, r5
 8002472:	1c22      	adds	r2, r4, #0
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	2308      	movs	r3, #8
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	1c02      	adds	r2, r0, #0
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	1dbb      	adds	r3, r7, #6
 8002480:	1c0a      	adds	r2, r1, #0
 8002482:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002484:	1dbb      	adds	r3, r7, #6
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	045c      	lsls	r4, r3, #17
 800248e:	197b      	adds	r3, r7, r5
 8002490:	8819      	ldrh	r1, [r3, #0]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	4b23      	ldr	r3, [pc, #140]	; (8002524 <I2C_RequestMemoryWrite+0xc4>)
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	0023      	movs	r3, r4
 800249a:	f000 f9fd 	bl	8002898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f902 	bl	80026ae <I2C_WaitOnTXISFlagUntilTimeout>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e033      	b.n	800251a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024b2:	1dbb      	adds	r3, r7, #6
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ba:	2308      	movs	r3, #8
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
 80024c8:	e019      	b.n	80024fe <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024ca:	2308      	movs	r3, #8
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	6a39      	ldr	r1, [r7, #32]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 f8e3 	bl	80026ae <I2C_WaitOnTXISFlagUntilTimeout>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d001      	beq.n	80024f0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e014      	b.n	800251a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024f0:	2308      	movs	r3, #8
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024fe:	6a3a      	ldr	r2, [r7, #32]
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	0013      	movs	r3, r2
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	f000 f890 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bdb0      	pop	{r4, r5, r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	80002000 	.word	0x80002000

08002528 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	000c      	movs	r4, r1
 8002532:	0010      	movs	r0, r2
 8002534:	0019      	movs	r1, r3
 8002536:	250a      	movs	r5, #10
 8002538:	197b      	adds	r3, r7, r5
 800253a:	1c22      	adds	r2, r4, #0
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	2308      	movs	r3, #8
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	1c02      	adds	r2, r0, #0
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	1dbb      	adds	r3, r7, #6
 8002548:	1c0a      	adds	r2, r1, #0
 800254a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800254c:	1dbb      	adds	r3, r7, #6
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	197b      	adds	r3, r7, r5
 8002554:	8819      	ldrh	r1, [r3, #0]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <I2C_RequestMemoryRead+0xc0>)
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2300      	movs	r3, #0
 800255e:	f000 f99b 	bl	8002898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	6a39      	ldr	r1, [r7, #32]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 f8a0 	bl	80026ae <I2C_WaitOnTXISFlagUntilTimeout>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d001      	beq.n	8002576 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e033      	b.n	80025de <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002576:	1dbb      	adds	r3, r7, #6
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257e:	2308      	movs	r3, #8
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
 800258c:	e019      	b.n	80025c2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800258e:	2308      	movs	r3, #8
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	6a39      	ldr	r1, [r7, #32]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f881 	bl	80026ae <I2C_WaitOnTXISFlagUntilTimeout>
 80025ac:	1e03      	subs	r3, r0, #0
 80025ae:	d001      	beq.n	80025b4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e014      	b.n	80025de <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b4:	2308      	movs	r3, #8
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a3a      	ldr	r2, [r7, #32]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	0013      	movs	r3, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	2140      	movs	r1, #64	; 0x40
 80025d0:	f000 f82e 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bdb0      	pop	{r4, r5, r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	80002000 	.word	0x80002000

080025ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d103      	bne.n	800260a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	2b01      	cmp	r3, #1
 8002616:	d007      	beq.n	8002628 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2101      	movs	r1, #1
 8002624:	430a      	orrs	r2, r1
 8002626:	619a      	str	r2, [r3, #24]
  }
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	e021      	b.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	d01e      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002648:	f7fe fffe 	bl	8001648 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d113      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	2220      	movs	r2, #32
 8002664:	431a      	orrs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2241      	movs	r2, #65	; 0x41
 800266e:	2120      	movs	r1, #32
 8002670:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2242      	movs	r2, #66	; 0x42
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	2100      	movs	r1, #0
 8002680:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	425a      	negs	r2, r3
 8002696:	4153      	adcs	r3, r2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	001a      	movs	r2, r3
 800269c:	1dfb      	adds	r3, r7, #7
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d0ce      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ba:	e02b      	b.n	8002714 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f86e 	bl	80027a4 <I2C_IsAcknowledgeFailed>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e029      	b.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3301      	adds	r3, #1
 80026d4:	d01e      	beq.n	8002714 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7fe ffb7 	bl	8001648 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d113      	bne.n	8002714 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	2220      	movs	r2, #32
 80026f2:	431a      	orrs	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2241      	movs	r2, #65	; 0x41
 80026fc:	2120      	movs	r1, #32
 80026fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2242      	movs	r2, #66	; 0x42
 8002704:	2100      	movs	r1, #0
 8002706:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2240      	movs	r2, #64	; 0x40
 800270c:	2100      	movs	r1, #0
 800270e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e007      	b.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2202      	movs	r2, #2
 800271c:	4013      	ands	r3, r2
 800271e:	2b02      	cmp	r3, #2
 8002720:	d1cc      	bne.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b004      	add	sp, #16
 800272a:	bd80      	pop	{r7, pc}

0800272c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002738:	e028      	b.n	800278c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0018      	movs	r0, r3
 8002742:	f000 f82f 	bl	80027a4 <I2C_IsAcknowledgeFailed>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e026      	b.n	800279c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7fe ff7b 	bl	8001648 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d113      	bne.n	800278c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	2220      	movs	r2, #32
 800276a:	431a      	orrs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2241      	movs	r2, #65	; 0x41
 8002774:	2120      	movs	r1, #32
 8002776:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2242      	movs	r2, #66	; 0x42
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2220      	movs	r2, #32
 8002794:	4013      	ands	r3, r2
 8002796:	2b20      	cmp	r3, #32
 8002798:	d1cf      	bne.n	800273a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b004      	add	sp, #16
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2210      	movs	r2, #16
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d164      	bne.n	8002888 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	049b      	lsls	r3, r3, #18
 80027c8:	401a      	ands	r2, r3
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	049b      	lsls	r3, r3, #18
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d02b      	beq.n	800282a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	01c9      	lsls	r1, r1, #7
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e4:	e021      	b.n	800282a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3301      	adds	r3, #1
 80027ea:	d01e      	beq.n	800282a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ec:	f7fe ff2c 	bl	8001648 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d302      	bcc.n	8002802 <I2C_IsAcknowledgeFailed+0x5e>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d113      	bne.n	800282a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	2220      	movs	r2, #32
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2241      	movs	r2, #65	; 0x41
 8002812:	2120      	movs	r1, #32
 8002814:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2242      	movs	r2, #66	; 0x42
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	2100      	movs	r1, #0
 8002824:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e02f      	b.n	800288a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2220      	movs	r2, #32
 8002832:	4013      	ands	r3, r2
 8002834:	2b20      	cmp	r3, #32
 8002836:	d1d6      	bne.n	80027e6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2210      	movs	r2, #16
 800283e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2220      	movs	r2, #32
 8002846:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff fece 	bl	80025ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	490e      	ldr	r1, [pc, #56]	; (8002894 <I2C_IsAcknowledgeFailed+0xf0>)
 800285c:	400a      	ands	r2, r1
 800285e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	2204      	movs	r2, #4
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2241      	movs	r2, #65	; 0x41
 8002870:	2120      	movs	r1, #32
 8002872:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2242      	movs	r2, #66	; 0x42
 8002878:	2100      	movs	r1, #0
 800287a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	fe00e800 	.word	0xfe00e800

08002898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	0008      	movs	r0, r1
 80028a2:	0011      	movs	r1, r2
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	240a      	movs	r4, #10
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	1c02      	adds	r2, r0, #0
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	2009      	movs	r0, #9
 80028b0:	183b      	adds	r3, r7, r0
 80028b2:	1c0a      	adds	r2, r1, #0
 80028b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	0d51      	lsrs	r1, r2, #21
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	00d2      	lsls	r2, r2, #3
 80028c4:	400a      	ands	r2, r1
 80028c6:	490e      	ldr	r1, [pc, #56]	; (8002900 <I2C_TransferConfig+0x68>)
 80028c8:	430a      	orrs	r2, r1
 80028ca:	43d2      	mvns	r2, r2
 80028cc:	401a      	ands	r2, r3
 80028ce:	0011      	movs	r1, r2
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	059b      	lsls	r3, r3, #22
 80028d6:	0d9a      	lsrs	r2, r3, #22
 80028d8:	183b      	adds	r3, r7, r0
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	0418      	lsls	r0, r3, #16
 80028de:	23ff      	movs	r3, #255	; 0xff
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	4003      	ands	r3, r0
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b005      	add	sp, #20
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	03ff63ff 	.word	0x03ff63ff

08002904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2241      	movs	r2, #65	; 0x41
 8002912:	5c9b      	ldrb	r3, [r3, r2]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	d138      	bne.n	800298c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	5c9b      	ldrb	r3, [r3, r2]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002924:	2302      	movs	r3, #2
 8002926:	e032      	b.n	800298e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2241      	movs	r2, #65	; 0x41
 8002934:	2124      	movs	r1, #36	; 0x24
 8002936:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2101      	movs	r1, #1
 8002944:	438a      	bics	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4911      	ldr	r1, [pc, #68]	; (8002998 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002954:	400a      	ands	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2241      	movs	r2, #65	; 0x41
 800297c:	2120      	movs	r1, #32
 800297e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	2100      	movs	r1, #0
 8002986:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	ffffefff 	.word	0xffffefff

0800299c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2241      	movs	r2, #65	; 0x41
 80029aa:	5c9b      	ldrb	r3, [r3, r2]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d139      	bne.n	8002a26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029bc:	2302      	movs	r3, #2
 80029be:	e033      	b.n	8002a28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2241      	movs	r2, #65	; 0x41
 80029cc:	2124      	movs	r1, #36	; 0x24
 80029ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	438a      	bics	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2241      	movs	r2, #65	; 0x41
 8002a16:	2120      	movs	r1, #32
 8002a18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2240      	movs	r2, #64	; 0x40
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	fffff0ff 	.word	0xfffff0ff

08002a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b08f      	sub	sp, #60	; 0x3c
 8002a38:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a3a:	2314      	movs	r3, #20
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	4a2b      	ldr	r2, [pc, #172]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a42:	c313      	stmia	r3!, {r0, r1, r4}
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	4a29      	ldr	r2, [pc, #164]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a4e:	c313      	stmia	r3!, {r0, r1, r4}
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	220c      	movs	r2, #12
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d002      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x4a>
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d003      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x50>
 8002a7c:	e02d      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a82:	e02d      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	220f      	movs	r2, #15
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2214      	movs	r2, #20
 8002a8e:	18ba      	adds	r2, r7, r2
 8002a90:	5cd3      	ldrb	r3, [r2, r3]
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	220f      	movs	r2, #15
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	1d3a      	adds	r2, r7, #4
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	025b      	lsls	r3, r3, #9
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d009      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aae:	4812      	ldr	r0, [pc, #72]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ab0:	f7fd fb34 	bl	800011c <__udivsi3>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	4353      	muls	r3, r2
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
 8002abe:	e009      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac2:	000a      	movs	r2, r1
 8002ac4:	0152      	lsls	r2, r2, #5
 8002ac6:	1a52      	subs	r2, r2, r1
 8002ac8:	0193      	lsls	r3, r2, #6
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	185b      	adds	r3, r3, r1
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ad8:	e002      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ade:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b00f      	add	sp, #60	; 0x3c
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	08004424 	.word	0x08004424
 8002af0:	08004434 	.word	0x08004434
 8002af4:	40021000 	.word	0x40021000
 8002af8:	007a1200 	.word	0x007a1200

08002afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b00:	4b02      	ldr	r3, [pc, #8]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	20000000 	.word	0x20000000

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b14:	f7ff fff2 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b18:	0001      	movs	r1, r0
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	2207      	movs	r2, #7
 8002b22:	4013      	ands	r3, r2
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	40d9      	lsrs	r1, r3
 8002b2a:	000b      	movs	r3, r1
}    
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	40021000 	.word	0x40021000
 8002b38:	080044b8 	.word	0x080044b8

08002b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e044      	b.n	8002bd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2274      	movs	r2, #116	; 0x74
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7fe fc03 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2224      	movs	r2, #36	; 0x24
 8002b6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	438a      	bics	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 fbce 	bl	8003320 <UART_SetConfig>
 8002b84:	0003      	movs	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e024      	b.n	8002bd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fd01 	bl	80035a0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	490d      	ldr	r1, [pc, #52]	; (8002be0 <HAL_UART_Init+0xa4>)
 8002baa:	400a      	ands	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	212a      	movs	r1, #42	; 0x2a
 8002bba:	438a      	bics	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fd99 	bl	8003708 <UART_CheckIdleState>
 8002bd6:	0003      	movs	r3, r0
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	ffffb7ff 	.word	0xffffb7ff

08002be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	1dbb      	adds	r3, r7, #6
 8002bf2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d000      	beq.n	8002bfe <HAL_UART_Transmit+0x1a>
 8002bfc:	e096      	b.n	8002d2c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_UART_Transmit+0x28>
 8002c04:	1dbb      	adds	r3, r7, #6
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e08e      	b.n	8002d2e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	015b      	lsls	r3, r3, #5
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d109      	bne.n	8002c30 <HAL_UART_Transmit+0x4c>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e07e      	b.n	8002d2e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2274      	movs	r2, #116	; 0x74
 8002c34:	5c9b      	ldrb	r3, [r3, r2]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Transmit+0x5a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e077      	b.n	8002d2e <HAL_UART_Transmit+0x14a>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2274      	movs	r2, #116	; 0x74
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2221      	movs	r2, #33	; 0x21
 8002c52:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fcf8 	bl	8001648 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1dba      	adds	r2, r7, #6
 8002c60:	2150      	movs	r1, #80	; 0x50
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1dba      	adds	r2, r7, #6
 8002c6a:	2152      	movs	r1, #82	; 0x52
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	015b      	lsls	r3, r3, #5
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d108      	bne.n	8002c8e <HAL_UART_Transmit+0xaa>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	e003      	b.n	8002c96 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2274      	movs	r2, #116	; 0x74
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c9e:	e02d      	b.n	8002cfc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	0013      	movs	r3, r2
 8002caa:	2200      	movs	r2, #0
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	f000 fd73 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e039      	b.n	8002d2e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	05d2      	lsls	r2, r2, #23
 8002cca:	0dd2      	lsrs	r2, r2, #23
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e008      	b.n	8002cea <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b292      	uxth	r2, r2
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2252      	movs	r2, #82	; 0x52
 8002cee:	5a9b      	ldrh	r3, [r3, r2]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b299      	uxth	r1, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2252      	movs	r2, #82	; 0x52
 8002cfa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2252      	movs	r2, #82	; 0x52
 8002d00:	5a9b      	ldrh	r3, [r3, r2]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1cb      	bne.n	8002ca0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	0013      	movs	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	2140      	movs	r1, #64	; 0x40
 8002d16:	f000 fd3f 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e005      	b.n	8002d2e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b008      	add	sp, #32
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b0ab      	sub	sp, #172	; 0xac
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	22a4      	movs	r2, #164	; 0xa4
 8002d48:	18b9      	adds	r1, r7, r2
 8002d4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	20a0      	movs	r0, #160	; 0xa0
 8002d54:	1839      	adds	r1, r7, r0
 8002d56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	219c      	movs	r1, #156	; 0x9c
 8002d60:	1879      	adds	r1, r7, r1
 8002d62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d64:	0011      	movs	r1, r2
 8002d66:	18bb      	adds	r3, r7, r2
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a99      	ldr	r2, [pc, #612]	; (8002fd0 <HAL_UART_IRQHandler+0x298>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2298      	movs	r2, #152	; 0x98
 8002d70:	18bc      	adds	r4, r7, r2
 8002d72:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002d74:	18bb      	adds	r3, r7, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d114      	bne.n	8002da6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2220      	movs	r2, #32
 8002d82:	4013      	ands	r3, r2
 8002d84:	d00f      	beq.n	8002da6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d86:	183b      	adds	r3, r7, r0
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d00a      	beq.n	8002da6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d100      	bne.n	8002d9a <HAL_UART_IRQHandler+0x62>
 8002d98:	e296      	b.n	80032c8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	0010      	movs	r0, r2
 8002da2:	4798      	blx	r3
      }
      return;
 8002da4:	e290      	b.n	80032c8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002da6:	2398      	movs	r3, #152	; 0x98
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d100      	bne.n	8002db2 <HAL_UART_IRQHandler+0x7a>
 8002db0:	e114      	b.n	8002fdc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002db2:	239c      	movs	r3, #156	; 0x9c
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2201      	movs	r2, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dbe:	23a0      	movs	r3, #160	; 0xa0
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a83      	ldr	r2, [pc, #524]	; (8002fd4 <HAL_UART_IRQHandler+0x29c>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d100      	bne.n	8002dcc <HAL_UART_IRQHandler+0x94>
 8002dca:	e107      	b.n	8002fdc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dcc:	23a4      	movs	r3, #164	; 0xa4
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d012      	beq.n	8002dfe <HAL_UART_IRQHandler+0xc6>
 8002dd8:	23a0      	movs	r3, #160	; 0xa0
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2201      	movs	r2, #1
 8002dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	589b      	ldr	r3, [r3, r2]
 8002df4:	2201      	movs	r2, #1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dfe:	23a4      	movs	r3, #164	; 0xa4
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2202      	movs	r2, #2
 8002e06:	4013      	ands	r3, r2
 8002e08:	d011      	beq.n	8002e2e <HAL_UART_IRQHandler+0xf6>
 8002e0a:	239c      	movs	r3, #156	; 0x9c
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2201      	movs	r2, #1
 8002e12:	4013      	ands	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	589b      	ldr	r3, [r3, r2]
 8002e24:	2204      	movs	r2, #4
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e2e:	23a4      	movs	r3, #164	; 0xa4
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2204      	movs	r2, #4
 8002e36:	4013      	ands	r3, r2
 8002e38:	d011      	beq.n	8002e5e <HAL_UART_IRQHandler+0x126>
 8002e3a:	239c      	movs	r3, #156	; 0x9c
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	589b      	ldr	r3, [r3, r2]
 8002e54:	2202      	movs	r2, #2
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e5e:	23a4      	movs	r3, #164	; 0xa4
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2208      	movs	r2, #8
 8002e66:	4013      	ands	r3, r2
 8002e68:	d017      	beq.n	8002e9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e6a:	23a0      	movs	r3, #160	; 0xa0
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2220      	movs	r2, #32
 8002e72:	4013      	ands	r3, r2
 8002e74:	d105      	bne.n	8002e82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e76:	239c      	movs	r3, #156	; 0x9c
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e80:	d00b      	beq.n	8002e9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2208      	movs	r2, #8
 8002e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	589b      	ldr	r3, [r3, r2]
 8002e90:	2208      	movs	r2, #8
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e9a:	23a4      	movs	r3, #164	; 0xa4
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x198>
 8002ea8:	23a0      	movs	r3, #160	; 0xa0
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	04db      	lsls	r3, r3, #19
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	589b      	ldr	r3, [r3, r2]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	589b      	ldr	r3, [r3, r2]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d100      	bne.n	8002edc <HAL_UART_IRQHandler+0x1a4>
 8002eda:	e1f7      	b.n	80032cc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002edc:	23a4      	movs	r3, #164	; 0xa4
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ee8:	23a0      	movs	r3, #160	; 0xa0
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d008      	beq.n	8002f06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	0010      	movs	r0, r2
 8002f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	589b      	ldr	r3, [r3, r2]
 8002f0c:	2194      	movs	r1, #148	; 0x94
 8002f0e:	187a      	adds	r2, r7, r1
 8002f10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2240      	movs	r2, #64	; 0x40
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d004      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2228      	movs	r2, #40	; 0x28
 8002f26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f28:	d047      	beq.n	8002fba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fcf7 	bl	8003920 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d137      	bne.n	8002fb0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f40:	f3ef 8310 	mrs	r3, PRIMASK
 8002f44:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f48:	2090      	movs	r0, #144	; 0x90
 8002f4a:	183a      	adds	r2, r7, r0
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f54:	f383 8810 	msr	PRIMASK, r3
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2140      	movs	r1, #64	; 0x40
 8002f66:	438a      	bics	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	183b      	adds	r3, r7, r0
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f72:	f383 8810 	msr	PRIMASK, r3
}
 8002f76:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d012      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_UART_IRQHandler+0x2a0>)
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7fe fcc3 	bl	8001918 <HAL_DMA_Abort_IT>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d01a      	beq.n	8002fcc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	e012      	b.n	8002fcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f9a5 	bl	80032f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fae:	e00d      	b.n	8002fcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 f9a0 	bl	80032f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	e008      	b.n	8002fcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f99b 	bl	80032f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002fca:	e17f      	b.n	80032cc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	46c0      	nop			; (mov r8, r8)
    return;
 8002fce:	e17d      	b.n	80032cc <HAL_UART_IRQHandler+0x594>
 8002fd0:	0000080f 	.word	0x0000080f
 8002fd4:	04000120 	.word	0x04000120
 8002fd8:	080039e5 	.word	0x080039e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d000      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x2ae>
 8002fe4:	e131      	b.n	800324a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fe6:	23a4      	movs	r3, #164	; 0xa4
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2210      	movs	r2, #16
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d100      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x2bc>
 8002ff2:	e12a      	b.n	800324a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ff4:	23a0      	movs	r3, #160	; 0xa0
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d100      	bne.n	8003002 <HAL_UART_IRQHandler+0x2ca>
 8003000:	e123      	b.n	800324a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2210      	movs	r2, #16
 8003008:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2240      	movs	r2, #64	; 0x40
 8003012:	4013      	ands	r3, r2
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d000      	beq.n	800301a <HAL_UART_IRQHandler+0x2e2>
 8003018:	e09b      	b.n	8003152 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	217e      	movs	r1, #126	; 0x7e
 8003024:	187b      	adds	r3, r7, r1
 8003026:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003028:	187b      	adds	r3, r7, r1
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d100      	bne.n	8003032 <HAL_UART_IRQHandler+0x2fa>
 8003030:	e14e      	b.n	80032d0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2258      	movs	r2, #88	; 0x58
 8003036:	5a9b      	ldrh	r3, [r3, r2]
 8003038:	187a      	adds	r2, r7, r1
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d300      	bcc.n	8003042 <HAL_UART_IRQHandler+0x30a>
 8003040:	e146      	b.n	80032d0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	187a      	adds	r2, r7, r1
 8003046:	215a      	movs	r1, #90	; 0x5a
 8003048:	8812      	ldrh	r2, [r2, #0]
 800304a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b20      	cmp	r3, #32
 8003054:	d06e      	beq.n	8003134 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003056:	f3ef 8310 	mrs	r3, PRIMASK
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800305e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003060:	2301      	movs	r3, #1
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	f383 8810 	msr	PRIMASK, r3
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	499a      	ldr	r1, [pc, #616]	; (80032e0 <HAL_UART_IRQHandler+0x5a8>)
 8003078:	400a      	ands	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	f383 8810 	msr	PRIMASK, r3
}
 8003086:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003088:	f3ef 8310 	mrs	r3, PRIMASK
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800308e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003090:	677b      	str	r3, [r7, #116]	; 0x74
 8003092:	2301      	movs	r3, #1
 8003094:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	438a      	bics	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ba:	f3ef 8310 	mrs	r3, PRIMASK
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80030c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	673b      	str	r3, [r7, #112]	; 0x70
 80030c4:	2301      	movs	r3, #1
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	f383 8810 	msr	PRIMASK, r3
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2140      	movs	r1, #64	; 0x40
 80030dc:	438a      	bics	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	f383 8810 	msr	PRIMASK, r3
}
 80030ea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f8:	f3ef 8310 	mrs	r3, PRIMASK
 80030fc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80030fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003102:	2301      	movs	r3, #1
 8003104:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2110      	movs	r1, #16
 800311a:	438a      	bics	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003120:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003124:	f383 8810 	msr	PRIMASK, r3
}
 8003128:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	0018      	movs	r0, r3
 8003130:	f7fe fbba 	bl	80018a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2258      	movs	r2, #88	; 0x58
 8003138:	5a9a      	ldrh	r2, [r3, r2]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	215a      	movs	r1, #90	; 0x5a
 800313e:	5a5b      	ldrh	r3, [r3, r1]
 8003140:	b29b      	uxth	r3, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f000 f8dc 	bl	8003308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003150:	e0be      	b.n	80032d0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2258      	movs	r2, #88	; 0x58
 8003156:	5a99      	ldrh	r1, [r3, r2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	225a      	movs	r2, #90	; 0x5a
 800315c:	5a9b      	ldrh	r3, [r3, r2]
 800315e:	b29a      	uxth	r2, r3
 8003160:	208e      	movs	r0, #142	; 0x8e
 8003162:	183b      	adds	r3, r7, r0
 8003164:	1a8a      	subs	r2, r1, r2
 8003166:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	225a      	movs	r2, #90	; 0x5a
 800316c:	5a9b      	ldrh	r3, [r3, r2]
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d100      	bne.n	8003176 <HAL_UART_IRQHandler+0x43e>
 8003174:	e0ae      	b.n	80032d4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003176:	183b      	adds	r3, r7, r0
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d100      	bne.n	8003180 <HAL_UART_IRQHandler+0x448>
 800317e:	e0a9      	b.n	80032d4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003180:	f3ef 8310 	mrs	r3, PRIMASK
 8003184:	60fb      	str	r3, [r7, #12]
  return(result);
 8003186:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003188:	2488      	movs	r4, #136	; 0x88
 800318a:	193a      	adds	r2, r7, r4
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	2301      	movs	r3, #1
 8003190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	494f      	ldr	r1, [pc, #316]	; (80032e4 <HAL_UART_IRQHandler+0x5ac>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8310 	mrs	r3, PRIMASK
 80031bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80031be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c0:	2484      	movs	r4, #132	; 0x84
 80031c2:	193a      	adds	r2, r7, r4
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f383 8810 	msr	PRIMASK, r3
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	438a      	bics	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f383 8810 	msr	PRIMASK, r3
}
 80031ee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320a:	2480      	movs	r4, #128	; 0x80
 800320c:	193a      	adds	r2, r7, r4
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	2301      	movs	r3, #1
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	f383 8810 	msr	PRIMASK, r3
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2110      	movs	r1, #16
 8003228:	438a      	bics	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	193b      	adds	r3, r7, r4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800323a:	183b      	adds	r3, r7, r0
 800323c:	881a      	ldrh	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f000 f860 	bl	8003308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003248:	e044      	b.n	80032d4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800324a:	23a4      	movs	r3, #164	; 0xa4
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	035b      	lsls	r3, r3, #13
 8003254:	4013      	ands	r3, r2
 8003256:	d010      	beq.n	800327a <HAL_UART_IRQHandler+0x542>
 8003258:	239c      	movs	r3, #156	; 0x9c
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	03db      	lsls	r3, r3, #15
 8003262:	4013      	ands	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	0352      	lsls	r2, r2, #13
 800326e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fbf8 	bl	8003a68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003278:	e02f      	b.n	80032da <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800327a:	23a4      	movs	r3, #164	; 0xa4
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	4013      	ands	r3, r2
 8003284:	d00f      	beq.n	80032a6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003286:	23a0      	movs	r3, #160	; 0xa0
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	4013      	ands	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01e      	beq.n	80032d8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	0010      	movs	r0, r2
 80032a2:	4798      	blx	r3
    }
    return;
 80032a4:	e018      	b.n	80032d8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032a6:	23a4      	movs	r3, #164	; 0xa4
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	4013      	ands	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_UART_IRQHandler+0x5a2>
 80032b2:	23a0      	movs	r3, #160	; 0xa0
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2240      	movs	r2, #64	; 0x40
 80032ba:	4013      	ands	r3, r2
 80032bc:	d00d      	beq.n	80032da <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 fba6 	bl	8003a12 <UART_EndTransmit_IT>
    return;
 80032c6:	e008      	b.n	80032da <HAL_UART_IRQHandler+0x5a2>
      return;
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	e006      	b.n	80032da <HAL_UART_IRQHandler+0x5a2>
    return;
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	e004      	b.n	80032da <HAL_UART_IRQHandler+0x5a2>
      return;
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	e002      	b.n	80032da <HAL_UART_IRQHandler+0x5a2>
      return;
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	e000      	b.n	80032da <HAL_UART_IRQHandler+0x5a2>
    return;
 80032d8:	46c0      	nop			; (mov r8, r8)
  }

}
 80032da:	46bd      	mov	sp, r7
 80032dc:	b02b      	add	sp, #172	; 0xac
 80032de:	bd90      	pop	{r4, r7, pc}
 80032e0:	fffffeff 	.word	0xfffffeff
 80032e4:	fffffedf 	.word	0xfffffedf

080032e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	000a      	movs	r2, r1
 8003312:	1cbb      	adds	r3, r7, #2
 8003314:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003328:	231e      	movs	r3, #30
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a8d      	ldr	r2, [pc, #564]	; (8003584 <UART_SetConfig+0x264>)
 8003350:	4013      	ands	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	430a      	orrs	r2, r1
 800335c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a88      	ldr	r2, [pc, #544]	; (8003588 <UART_SetConfig+0x268>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a7f      	ldr	r2, [pc, #508]	; (800358c <UART_SetConfig+0x26c>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7b      	ldr	r2, [pc, #492]	; (8003590 <UART_SetConfig+0x270>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d127      	bne.n	80033f6 <UART_SetConfig+0xd6>
 80033a6:	4b7b      	ldr	r3, [pc, #492]	; (8003594 <UART_SetConfig+0x274>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	2203      	movs	r2, #3
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d00d      	beq.n	80033ce <UART_SetConfig+0xae>
 80033b2:	d81b      	bhi.n	80033ec <UART_SetConfig+0xcc>
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d014      	beq.n	80033e2 <UART_SetConfig+0xc2>
 80033b8:	d818      	bhi.n	80033ec <UART_SetConfig+0xcc>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <UART_SetConfig+0xa4>
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00a      	beq.n	80033d8 <UART_SetConfig+0xb8>
 80033c2:	e013      	b.n	80033ec <UART_SetConfig+0xcc>
 80033c4:	231f      	movs	r3, #31
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e021      	b.n	8003412 <UART_SetConfig+0xf2>
 80033ce:	231f      	movs	r3, #31
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	e01c      	b.n	8003412 <UART_SetConfig+0xf2>
 80033d8:	231f      	movs	r3, #31
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	2204      	movs	r2, #4
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e017      	b.n	8003412 <UART_SetConfig+0xf2>
 80033e2:	231f      	movs	r3, #31
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	2208      	movs	r2, #8
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e012      	b.n	8003412 <UART_SetConfig+0xf2>
 80033ec:	231f      	movs	r3, #31
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	2210      	movs	r2, #16
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e00d      	b.n	8003412 <UART_SetConfig+0xf2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a67      	ldr	r2, [pc, #412]	; (8003598 <UART_SetConfig+0x278>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d104      	bne.n	800340a <UART_SetConfig+0xea>
 8003400:	231f      	movs	r3, #31
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e003      	b.n	8003412 <UART_SetConfig+0xf2>
 800340a:	231f      	movs	r3, #31
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2210      	movs	r2, #16
 8003410:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	429a      	cmp	r2, r3
 800341c:	d15d      	bne.n	80034da <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800341e:	231f      	movs	r3, #31
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d015      	beq.n	8003454 <UART_SetConfig+0x134>
 8003428:	dc18      	bgt.n	800345c <UART_SetConfig+0x13c>
 800342a:	2b04      	cmp	r3, #4
 800342c:	d00d      	beq.n	800344a <UART_SetConfig+0x12a>
 800342e:	dc15      	bgt.n	800345c <UART_SetConfig+0x13c>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <UART_SetConfig+0x11a>
 8003434:	2b02      	cmp	r3, #2
 8003436:	d005      	beq.n	8003444 <UART_SetConfig+0x124>
 8003438:	e010      	b.n	800345c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800343a:	f7ff fb69 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 800343e:	0003      	movs	r3, r0
 8003440:	61bb      	str	r3, [r7, #24]
        break;
 8003442:	e012      	b.n	800346a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003444:	4b55      	ldr	r3, [pc, #340]	; (800359c <UART_SetConfig+0x27c>)
 8003446:	61bb      	str	r3, [r7, #24]
        break;
 8003448:	e00f      	b.n	800346a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344a:	f7ff faf3 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 800344e:	0003      	movs	r3, r0
 8003450:	61bb      	str	r3, [r7, #24]
        break;
 8003452:	e00a      	b.n	800346a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	61bb      	str	r3, [r7, #24]
        break;
 800345a:	e006      	b.n	800346a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003460:	231e      	movs	r3, #30
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
        break;
 8003468:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d100      	bne.n	8003472 <UART_SetConfig+0x152>
 8003470:	e07b      	b.n	800356a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	005a      	lsls	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	18d2      	adds	r2, r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	0019      	movs	r1, r3
 8003484:	0010      	movs	r0, r2
 8003486:	f7fc fe49 	bl	800011c <__udivsi3>
 800348a:	0003      	movs	r3, r0
 800348c:	b29b      	uxth	r3, r3
 800348e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	d91c      	bls.n	80034d0 <UART_SetConfig+0x1b0>
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	025b      	lsls	r3, r3, #9
 800349c:	429a      	cmp	r2, r3
 800349e:	d217      	bcs.n	80034d0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	200e      	movs	r0, #14
 80034a6:	183b      	adds	r3, r7, r0
 80034a8:	210f      	movs	r1, #15
 80034aa:	438a      	bics	r2, r1
 80034ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2207      	movs	r2, #7
 80034b6:	4013      	ands	r3, r2
 80034b8:	b299      	uxth	r1, r3
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	183a      	adds	r2, r7, r0
 80034be:	8812      	ldrh	r2, [r2, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	183a      	adds	r2, r7, r0
 80034ca:	8812      	ldrh	r2, [r2, #0]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	e04c      	b.n	800356a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80034d0:	231e      	movs	r3, #30
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e047      	b.n	800356a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034da:	231f      	movs	r3, #31
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d015      	beq.n	8003510 <UART_SetConfig+0x1f0>
 80034e4:	dc18      	bgt.n	8003518 <UART_SetConfig+0x1f8>
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00d      	beq.n	8003506 <UART_SetConfig+0x1e6>
 80034ea:	dc15      	bgt.n	8003518 <UART_SetConfig+0x1f8>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <UART_SetConfig+0x1d6>
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d005      	beq.n	8003500 <UART_SetConfig+0x1e0>
 80034f4:	e010      	b.n	8003518 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f6:	f7ff fb0b 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 80034fa:	0003      	movs	r3, r0
 80034fc:	61bb      	str	r3, [r7, #24]
        break;
 80034fe:	e012      	b.n	8003526 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b26      	ldr	r3, [pc, #152]	; (800359c <UART_SetConfig+0x27c>)
 8003502:	61bb      	str	r3, [r7, #24]
        break;
 8003504:	e00f      	b.n	8003526 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7ff fa95 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 800350a:	0003      	movs	r3, r0
 800350c:	61bb      	str	r3, [r7, #24]
        break;
 800350e:	e00a      	b.n	8003526 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	61bb      	str	r3, [r7, #24]
        break;
 8003516:	e006      	b.n	8003526 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800351c:	231e      	movs	r3, #30
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
        break;
 8003524:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01e      	beq.n	800356a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	085a      	lsrs	r2, r3, #1
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	18d2      	adds	r2, r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0019      	movs	r1, r3
 800353c:	0010      	movs	r0, r2
 800353e:	f7fc fded 	bl	800011c <__udivsi3>
 8003542:	0003      	movs	r3, r0
 8003544:	b29b      	uxth	r3, r3
 8003546:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d909      	bls.n	8003562 <UART_SetConfig+0x242>
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	025b      	lsls	r3, r3, #9
 8003554:	429a      	cmp	r2, r3
 8003556:	d204      	bcs.n	8003562 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e003      	b.n	800356a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003562:	231e      	movs	r3, #30
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003576:	231e      	movs	r3, #30
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	781b      	ldrb	r3, [r3, #0]
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b008      	add	sp, #32
 8003582:	bd80      	pop	{r7, pc}
 8003584:	ffff69f3 	.word	0xffff69f3
 8003588:	ffffcfff 	.word	0xffffcfff
 800358c:	fffff4ff 	.word	0xfffff4ff
 8003590:	40013800 	.word	0x40013800
 8003594:	40021000 	.word	0x40021000
 8003598:	40004400 	.word	0x40004400
 800359c:	007a1200 	.word	0x007a1200

080035a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00b      	beq.n	80035ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a4a      	ldr	r2, [pc, #296]	; (80036e4 <UART_AdvFeatureConfig+0x144>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2202      	movs	r2, #2
 80035d0:	4013      	ands	r3, r2
 80035d2:	d00b      	beq.n	80035ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <UART_AdvFeatureConfig+0x148>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2204      	movs	r2, #4
 80035f2:	4013      	ands	r3, r2
 80035f4:	d00b      	beq.n	800360e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <UART_AdvFeatureConfig+0x14c>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2208      	movs	r2, #8
 8003614:	4013      	ands	r3, r2
 8003616:	d00b      	beq.n	8003630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <UART_AdvFeatureConfig+0x150>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	2210      	movs	r2, #16
 8003636:	4013      	ands	r3, r2
 8003638:	d00b      	beq.n	8003652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <UART_AdvFeatureConfig+0x154>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2220      	movs	r2, #32
 8003658:	4013      	ands	r3, r2
 800365a:	d00b      	beq.n	8003674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <UART_AdvFeatureConfig+0x158>)
 8003664:	4013      	ands	r3, r2
 8003666:	0019      	movs	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2240      	movs	r2, #64	; 0x40
 800367a:	4013      	ands	r3, r2
 800367c:	d01d      	beq.n	80036ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <UART_AdvFeatureConfig+0x15c>)
 8003686:	4013      	ands	r3, r2
 8003688:	0019      	movs	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	035b      	lsls	r3, r3, #13
 800369e:	429a      	cmp	r2, r3
 80036a0:	d10b      	bne.n	80036ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <UART_AdvFeatureConfig+0x160>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2280      	movs	r2, #128	; 0x80
 80036c0:	4013      	ands	r3, r2
 80036c2:	d00b      	beq.n	80036dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <UART_AdvFeatureConfig+0x164>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	fffdffff 	.word	0xfffdffff
 80036e8:	fffeffff 	.word	0xfffeffff
 80036ec:	fffbffff 	.word	0xfffbffff
 80036f0:	ffff7fff 	.word	0xffff7fff
 80036f4:	ffffefff 	.word	0xffffefff
 80036f8:	ffffdfff 	.word	0xffffdfff
 80036fc:	ffefffff 	.word	0xffefffff
 8003700:	ff9fffff 	.word	0xff9fffff
 8003704:	fff7ffff 	.word	0xfff7ffff

08003708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	2100      	movs	r1, #0
 8003716:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003718:	f7fd ff96 	bl	8001648 <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2208      	movs	r2, #8
 8003728:	4013      	ands	r3, r2
 800372a:	2b08      	cmp	r3, #8
 800372c:	d10c      	bne.n	8003748 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2280      	movs	r2, #128	; 0x80
 8003732:	0391      	lsls	r1, r2, #14
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <UART_CheckIdleState+0x8c>)
 8003738:	9200      	str	r2, [sp, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	f000 f82c 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 8003740:	1e03      	subs	r3, r0, #0
 8003742:	d001      	beq.n	8003748 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e021      	b.n	800378c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2204      	movs	r2, #4
 8003750:	4013      	ands	r3, r2
 8003752:	2b04      	cmp	r3, #4
 8003754:	d10c      	bne.n	8003770 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	03d1      	lsls	r1, r2, #15
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <UART_CheckIdleState+0x8c>)
 8003760:	9200      	str	r2, [sp, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	f000 f818 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e00d      	b.n	800378c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2274      	movs	r2, #116	; 0x74
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bd80      	pop	{r7, pc}
 8003794:	01ffffff 	.word	0x01ffffff

08003798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b094      	sub	sp, #80	; 0x50
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a8:	e0a3      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ac:	3301      	adds	r3, #1
 80037ae:	d100      	bne.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80037b0:	e09f      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b2:	f7fd ff49 	bl	8001648 <HAL_GetTick>
 80037b6:	0002      	movs	r2, r0
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037be:	429a      	cmp	r2, r3
 80037c0:	d302      	bcc.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d13d      	bne.n	8003844 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d0:	647b      	str	r3, [r7, #68]	; 0x44
 80037d2:	2301      	movs	r3, #1
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	494c      	ldr	r1, [pc, #304]	; (800391c <UART_WaitOnFlagUntilTimeout+0x184>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fa:	f3ef 8310 	mrs	r3, PRIMASK
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
 8003804:	2301      	movs	r3, #1
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2101      	movs	r1, #1
 800381c:	438a      	bics	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2274      	movs	r2, #116	; 0x74
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e067      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2204      	movs	r2, #4
 800384c:	4013      	ands	r3, r2
 800384e:	d050      	beq.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	401a      	ands	r2, r3
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	429a      	cmp	r2, r3
 8003862:	d146      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386e:	f3ef 8310 	mrs	r3, PRIMASK
 8003872:	613b      	str	r3, [r7, #16]
  return(result);
 8003874:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4923      	ldr	r1, [pc, #140]	; (800391c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003890:	400a      	ands	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80038a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80038aa:	2301      	movs	r3, #1
 80038ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	438a      	bics	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	2120      	movs	r1, #32
 80038e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2274      	movs	r2, #116	; 0x74
 80038ea:	2100      	movs	r1, #0
 80038ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e010      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	425a      	negs	r2, r3
 8003902:	4153      	adcs	r3, r2
 8003904:	b2db      	uxtb	r3, r3
 8003906:	001a      	movs	r2, r3
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d100      	bne.n	8003912 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003910:	e74b      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b014      	add	sp, #80	; 0x50
 800391a:	bd80      	pop	{r7, pc}
 800391c:	fffffe5f 	.word	0xfffffe5f

08003920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	; 0x38
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003928:	f3ef 8310 	mrs	r3, PRIMASK
 800392c:	617b      	str	r3, [r7, #20]
  return(result);
 800392e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4925      	ldr	r1, [pc, #148]	; (80039e0 <UART_EndRxTransfer+0xc0>)
 800394a:	400a      	ands	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	623b      	str	r3, [r7, #32]
  return(result);
 8003960:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
 8003964:	2301      	movs	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003990:	2b01      	cmp	r3, #1
 8003992:	d118      	bne.n	80039c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003994:	f3ef 8310 	mrs	r3, PRIMASK
 8003998:	60bb      	str	r3, [r7, #8]
  return(result);
 800399a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399e:	2301      	movs	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2110      	movs	r1, #16
 80039b6:	438a      	bics	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b00e      	add	sp, #56	; 0x38
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	fffffedf 	.word	0xfffffedf

080039e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	225a      	movs	r2, #90	; 0x5a
 80039f6:	2100      	movs	r1, #0
 80039f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2252      	movs	r2, #82	; 0x52
 80039fe:	2100      	movs	r1, #0
 8003a00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fc77 	bl	80032f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a20:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	2301      	movs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2140      	movs	r1, #64	; 0x40
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f383 8810 	msr	PRIMASK, r3
}
 8003a4a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff fc44 	bl	80032e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b006      	add	sp, #24
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b002      	add	sp, #8
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <__errno>:
 8003a78:	4b01      	ldr	r3, [pc, #4]	; (8003a80 <__errno+0x8>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	4770      	bx	lr
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	2000000c 	.word	0x2000000c

08003a84 <__libc_init_array>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	2600      	movs	r6, #0
 8003a88:	4d0c      	ldr	r5, [pc, #48]	; (8003abc <__libc_init_array+0x38>)
 8003a8a:	4c0d      	ldr	r4, [pc, #52]	; (8003ac0 <__libc_init_array+0x3c>)
 8003a8c:	1b64      	subs	r4, r4, r5
 8003a8e:	10a4      	asrs	r4, r4, #2
 8003a90:	42a6      	cmp	r6, r4
 8003a92:	d109      	bne.n	8003aa8 <__libc_init_array+0x24>
 8003a94:	2600      	movs	r6, #0
 8003a96:	f000 fc8b 	bl	80043b0 <_init>
 8003a9a:	4d0a      	ldr	r5, [pc, #40]	; (8003ac4 <__libc_init_array+0x40>)
 8003a9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ac8 <__libc_init_array+0x44>)
 8003a9e:	1b64      	subs	r4, r4, r5
 8003aa0:	10a4      	asrs	r4, r4, #2
 8003aa2:	42a6      	cmp	r6, r4
 8003aa4:	d105      	bne.n	8003ab2 <__libc_init_array+0x2e>
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	00b3      	lsls	r3, r6, #2
 8003aaa:	58eb      	ldr	r3, [r5, r3]
 8003aac:	4798      	blx	r3
 8003aae:	3601      	adds	r6, #1
 8003ab0:	e7ee      	b.n	8003a90 <__libc_init_array+0xc>
 8003ab2:	00b3      	lsls	r3, r6, #2
 8003ab4:	58eb      	ldr	r3, [r5, r3]
 8003ab6:	4798      	blx	r3
 8003ab8:	3601      	adds	r6, #1
 8003aba:	e7f2      	b.n	8003aa2 <__libc_init_array+0x1e>
 8003abc:	080044f4 	.word	0x080044f4
 8003ac0:	080044f4 	.word	0x080044f4
 8003ac4:	080044f4 	.word	0x080044f4
 8003ac8:	080044f8 	.word	0x080044f8

08003acc <memset>:
 8003acc:	0003      	movs	r3, r0
 8003ace:	1882      	adds	r2, r0, r2
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <memset+0xa>
 8003ad4:	4770      	bx	lr
 8003ad6:	7019      	strb	r1, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	e7f9      	b.n	8003ad0 <memset+0x4>

08003adc <siprintf>:
 8003adc:	b40e      	push	{r1, r2, r3}
 8003ade:	b500      	push	{lr}
 8003ae0:	490b      	ldr	r1, [pc, #44]	; (8003b10 <siprintf+0x34>)
 8003ae2:	b09c      	sub	sp, #112	; 0x70
 8003ae4:	ab1d      	add	r3, sp, #116	; 0x74
 8003ae6:	9002      	str	r0, [sp, #8]
 8003ae8:	9006      	str	r0, [sp, #24]
 8003aea:	9107      	str	r1, [sp, #28]
 8003aec:	9104      	str	r1, [sp, #16]
 8003aee:	4809      	ldr	r0, [pc, #36]	; (8003b14 <siprintf+0x38>)
 8003af0:	4909      	ldr	r1, [pc, #36]	; (8003b18 <siprintf+0x3c>)
 8003af2:	cb04      	ldmia	r3!, {r2}
 8003af4:	9105      	str	r1, [sp, #20]
 8003af6:	6800      	ldr	r0, [r0, #0]
 8003af8:	a902      	add	r1, sp, #8
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	f000 f870 	bl	8003be0 <_svfiprintf_r>
 8003b00:	2300      	movs	r3, #0
 8003b02:	9a02      	ldr	r2, [sp, #8]
 8003b04:	7013      	strb	r3, [r2, #0]
 8003b06:	b01c      	add	sp, #112	; 0x70
 8003b08:	bc08      	pop	{r3}
 8003b0a:	b003      	add	sp, #12
 8003b0c:	4718      	bx	r3
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	7fffffff 	.word	0x7fffffff
 8003b14:	2000000c 	.word	0x2000000c
 8003b18:	ffff0208 	.word	0xffff0208

08003b1c <__ssputs_r>:
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	688e      	ldr	r6, [r1, #8]
 8003b20:	b085      	sub	sp, #20
 8003b22:	0007      	movs	r7, r0
 8003b24:	000c      	movs	r4, r1
 8003b26:	9203      	str	r2, [sp, #12]
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	429e      	cmp	r6, r3
 8003b2c:	d83c      	bhi.n	8003ba8 <__ssputs_r+0x8c>
 8003b2e:	2390      	movs	r3, #144	; 0x90
 8003b30:	898a      	ldrh	r2, [r1, #12]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	421a      	tst	r2, r3
 8003b36:	d034      	beq.n	8003ba2 <__ssputs_r+0x86>
 8003b38:	6909      	ldr	r1, [r1, #16]
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	6960      	ldr	r0, [r4, #20]
 8003b3e:	1a5b      	subs	r3, r3, r1
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	2303      	movs	r3, #3
 8003b44:	4343      	muls	r3, r0
 8003b46:	0fdd      	lsrs	r5, r3, #31
 8003b48:	18ed      	adds	r5, r5, r3
 8003b4a:	9b01      	ldr	r3, [sp, #4]
 8003b4c:	9802      	ldr	r0, [sp, #8]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	181b      	adds	r3, r3, r0
 8003b52:	106d      	asrs	r5, r5, #1
 8003b54:	42ab      	cmp	r3, r5
 8003b56:	d900      	bls.n	8003b5a <__ssputs_r+0x3e>
 8003b58:	001d      	movs	r5, r3
 8003b5a:	0553      	lsls	r3, r2, #21
 8003b5c:	d532      	bpl.n	8003bc4 <__ssputs_r+0xa8>
 8003b5e:	0029      	movs	r1, r5
 8003b60:	0038      	movs	r0, r7
 8003b62:	f000 fb53 	bl	800420c <_malloc_r>
 8003b66:	1e06      	subs	r6, r0, #0
 8003b68:	d109      	bne.n	8003b7e <__ssputs_r+0x62>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	2340      	movs	r3, #64	; 0x40
 8003b70:	2001      	movs	r0, #1
 8003b72:	89a2      	ldrh	r2, [r4, #12]
 8003b74:	4240      	negs	r0, r0
 8003b76:	4313      	orrs	r3, r2
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	b005      	add	sp, #20
 8003b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b7e:	9a02      	ldr	r2, [sp, #8]
 8003b80:	6921      	ldr	r1, [r4, #16]
 8003b82:	f000 faba 	bl	80040fa <memcpy>
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <__ssputs_r+0xc0>)
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	9b02      	ldr	r3, [sp, #8]
 8003b94:	6126      	str	r6, [r4, #16]
 8003b96:	18f6      	adds	r6, r6, r3
 8003b98:	6026      	str	r6, [r4, #0]
 8003b9a:	6165      	str	r5, [r4, #20]
 8003b9c:	9e01      	ldr	r6, [sp, #4]
 8003b9e:	1aed      	subs	r5, r5, r3
 8003ba0:	60a5      	str	r5, [r4, #8]
 8003ba2:	9b01      	ldr	r3, [sp, #4]
 8003ba4:	429e      	cmp	r6, r3
 8003ba6:	d900      	bls.n	8003baa <__ssputs_r+0x8e>
 8003ba8:	9e01      	ldr	r6, [sp, #4]
 8003baa:	0032      	movs	r2, r6
 8003bac:	9903      	ldr	r1, [sp, #12]
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	f000 faac 	bl	800410c <memmove>
 8003bb4:	68a3      	ldr	r3, [r4, #8]
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	1b9b      	subs	r3, r3, r6
 8003bba:	60a3      	str	r3, [r4, #8]
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	199e      	adds	r6, r3, r6
 8003bc0:	6026      	str	r6, [r4, #0]
 8003bc2:	e7da      	b.n	8003b7a <__ssputs_r+0x5e>
 8003bc4:	002a      	movs	r2, r5
 8003bc6:	0038      	movs	r0, r7
 8003bc8:	f000 fb96 	bl	80042f8 <_realloc_r>
 8003bcc:	1e06      	subs	r6, r0, #0
 8003bce:	d1e0      	bne.n	8003b92 <__ssputs_r+0x76>
 8003bd0:	0038      	movs	r0, r7
 8003bd2:	6921      	ldr	r1, [r4, #16]
 8003bd4:	f000 faae 	bl	8004134 <_free_r>
 8003bd8:	e7c7      	b.n	8003b6a <__ssputs_r+0x4e>
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	fffffb7f 	.word	0xfffffb7f

08003be0 <_svfiprintf_r>:
 8003be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be2:	b0a1      	sub	sp, #132	; 0x84
 8003be4:	9003      	str	r0, [sp, #12]
 8003be6:	001d      	movs	r5, r3
 8003be8:	898b      	ldrh	r3, [r1, #12]
 8003bea:	000f      	movs	r7, r1
 8003bec:	0016      	movs	r6, r2
 8003bee:	061b      	lsls	r3, r3, #24
 8003bf0:	d511      	bpl.n	8003c16 <_svfiprintf_r+0x36>
 8003bf2:	690b      	ldr	r3, [r1, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <_svfiprintf_r+0x36>
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	f000 fb07 	bl	800420c <_malloc_r>
 8003bfe:	6038      	str	r0, [r7, #0]
 8003c00:	6138      	str	r0, [r7, #16]
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d105      	bne.n	8003c12 <_svfiprintf_r+0x32>
 8003c06:	230c      	movs	r3, #12
 8003c08:	9a03      	ldr	r2, [sp, #12]
 8003c0a:	3801      	subs	r0, #1
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	b021      	add	sp, #132	; 0x84
 8003c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	2300      	movs	r3, #0
 8003c18:	ac08      	add	r4, sp, #32
 8003c1a:	6163      	str	r3, [r4, #20]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	7663      	strb	r3, [r4, #25]
 8003c20:	3310      	adds	r3, #16
 8003c22:	76a3      	strb	r3, [r4, #26]
 8003c24:	9507      	str	r5, [sp, #28]
 8003c26:	0035      	movs	r5, r6
 8003c28:	782b      	ldrb	r3, [r5, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <_svfiprintf_r+0x52>
 8003c2e:	2b25      	cmp	r3, #37	; 0x25
 8003c30:	d147      	bne.n	8003cc2 <_svfiprintf_r+0xe2>
 8003c32:	1bab      	subs	r3, r5, r6
 8003c34:	9305      	str	r3, [sp, #20]
 8003c36:	42b5      	cmp	r5, r6
 8003c38:	d00c      	beq.n	8003c54 <_svfiprintf_r+0x74>
 8003c3a:	0032      	movs	r2, r6
 8003c3c:	0039      	movs	r1, r7
 8003c3e:	9803      	ldr	r0, [sp, #12]
 8003c40:	f7ff ff6c 	bl	8003b1c <__ssputs_r>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d100      	bne.n	8003c4a <_svfiprintf_r+0x6a>
 8003c48:	e0ae      	b.n	8003da8 <_svfiprintf_r+0x1c8>
 8003c4a:	6962      	ldr	r2, [r4, #20]
 8003c4c:	9b05      	ldr	r3, [sp, #20]
 8003c4e:	4694      	mov	ip, r2
 8003c50:	4463      	add	r3, ip
 8003c52:	6163      	str	r3, [r4, #20]
 8003c54:	782b      	ldrb	r3, [r5, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d100      	bne.n	8003c5c <_svfiprintf_r+0x7c>
 8003c5a:	e0a5      	b.n	8003da8 <_svfiprintf_r+0x1c8>
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2300      	movs	r3, #0
 8003c60:	4252      	negs	r2, r2
 8003c62:	6062      	str	r2, [r4, #4]
 8003c64:	a904      	add	r1, sp, #16
 8003c66:	3254      	adds	r2, #84	; 0x54
 8003c68:	1852      	adds	r2, r2, r1
 8003c6a:	1c6e      	adds	r6, r5, #1
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	60e3      	str	r3, [r4, #12]
 8003c70:	60a3      	str	r3, [r4, #8]
 8003c72:	7013      	strb	r3, [r2, #0]
 8003c74:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c76:	2205      	movs	r2, #5
 8003c78:	7831      	ldrb	r1, [r6, #0]
 8003c7a:	4854      	ldr	r0, [pc, #336]	; (8003dcc <_svfiprintf_r+0x1ec>)
 8003c7c:	f000 fa32 	bl	80040e4 <memchr>
 8003c80:	1c75      	adds	r5, r6, #1
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d11f      	bne.n	8003cc6 <_svfiprintf_r+0xe6>
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	06d3      	lsls	r3, r2, #27
 8003c8a:	d504      	bpl.n	8003c96 <_svfiprintf_r+0xb6>
 8003c8c:	2353      	movs	r3, #83	; 0x53
 8003c8e:	a904      	add	r1, sp, #16
 8003c90:	185b      	adds	r3, r3, r1
 8003c92:	2120      	movs	r1, #32
 8003c94:	7019      	strb	r1, [r3, #0]
 8003c96:	0713      	lsls	r3, r2, #28
 8003c98:	d504      	bpl.n	8003ca4 <_svfiprintf_r+0xc4>
 8003c9a:	2353      	movs	r3, #83	; 0x53
 8003c9c:	a904      	add	r1, sp, #16
 8003c9e:	185b      	adds	r3, r3, r1
 8003ca0:	212b      	movs	r1, #43	; 0x2b
 8003ca2:	7019      	strb	r1, [r3, #0]
 8003ca4:	7833      	ldrb	r3, [r6, #0]
 8003ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca8:	d016      	beq.n	8003cd8 <_svfiprintf_r+0xf8>
 8003caa:	0035      	movs	r5, r6
 8003cac:	2100      	movs	r1, #0
 8003cae:	200a      	movs	r0, #10
 8003cb0:	68e3      	ldr	r3, [r4, #12]
 8003cb2:	782a      	ldrb	r2, [r5, #0]
 8003cb4:	1c6e      	adds	r6, r5, #1
 8003cb6:	3a30      	subs	r2, #48	; 0x30
 8003cb8:	2a09      	cmp	r2, #9
 8003cba:	d94e      	bls.n	8003d5a <_svfiprintf_r+0x17a>
 8003cbc:	2900      	cmp	r1, #0
 8003cbe:	d111      	bne.n	8003ce4 <_svfiprintf_r+0x104>
 8003cc0:	e017      	b.n	8003cf2 <_svfiprintf_r+0x112>
 8003cc2:	3501      	adds	r5, #1
 8003cc4:	e7b0      	b.n	8003c28 <_svfiprintf_r+0x48>
 8003cc6:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <_svfiprintf_r+0x1ec>)
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	1ac0      	subs	r0, r0, r3
 8003ccc:	2301      	movs	r3, #1
 8003cce:	4083      	lsls	r3, r0
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	002e      	movs	r6, r5
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	e7ce      	b.n	8003c76 <_svfiprintf_r+0x96>
 8003cd8:	9b07      	ldr	r3, [sp, #28]
 8003cda:	1d19      	adds	r1, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	9107      	str	r1, [sp, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	db01      	blt.n	8003ce8 <_svfiprintf_r+0x108>
 8003ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ce6:	e004      	b.n	8003cf2 <_svfiprintf_r+0x112>
 8003ce8:	425b      	negs	r3, r3
 8003cea:	60e3      	str	r3, [r4, #12]
 8003cec:	2302      	movs	r3, #2
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	782b      	ldrb	r3, [r5, #0]
 8003cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf6:	d10a      	bne.n	8003d0e <_svfiprintf_r+0x12e>
 8003cf8:	786b      	ldrb	r3, [r5, #1]
 8003cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfc:	d135      	bne.n	8003d6a <_svfiprintf_r+0x18a>
 8003cfe:	9b07      	ldr	r3, [sp, #28]
 8003d00:	3502      	adds	r5, #2
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	9207      	str	r2, [sp, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	db2b      	blt.n	8003d64 <_svfiprintf_r+0x184>
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0e:	4e30      	ldr	r6, [pc, #192]	; (8003dd0 <_svfiprintf_r+0x1f0>)
 8003d10:	2203      	movs	r2, #3
 8003d12:	0030      	movs	r0, r6
 8003d14:	7829      	ldrb	r1, [r5, #0]
 8003d16:	f000 f9e5 	bl	80040e4 <memchr>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d006      	beq.n	8003d2c <_svfiprintf_r+0x14c>
 8003d1e:	2340      	movs	r3, #64	; 0x40
 8003d20:	1b80      	subs	r0, r0, r6
 8003d22:	4083      	lsls	r3, r0
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	3501      	adds	r5, #1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	7829      	ldrb	r1, [r5, #0]
 8003d2e:	2206      	movs	r2, #6
 8003d30:	4828      	ldr	r0, [pc, #160]	; (8003dd4 <_svfiprintf_r+0x1f4>)
 8003d32:	1c6e      	adds	r6, r5, #1
 8003d34:	7621      	strb	r1, [r4, #24]
 8003d36:	f000 f9d5 	bl	80040e4 <memchr>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d03c      	beq.n	8003db8 <_svfiprintf_r+0x1d8>
 8003d3e:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <_svfiprintf_r+0x1f8>)
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d125      	bne.n	8003d90 <_svfiprintf_r+0x1b0>
 8003d44:	2207      	movs	r2, #7
 8003d46:	9b07      	ldr	r3, [sp, #28]
 8003d48:	3307      	adds	r3, #7
 8003d4a:	4393      	bics	r3, r2
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	9307      	str	r3, [sp, #28]
 8003d50:	6963      	ldr	r3, [r4, #20]
 8003d52:	9a04      	ldr	r2, [sp, #16]
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	6163      	str	r3, [r4, #20]
 8003d58:	e765      	b.n	8003c26 <_svfiprintf_r+0x46>
 8003d5a:	4343      	muls	r3, r0
 8003d5c:	0035      	movs	r5, r6
 8003d5e:	2101      	movs	r1, #1
 8003d60:	189b      	adds	r3, r3, r2
 8003d62:	e7a6      	b.n	8003cb2 <_svfiprintf_r+0xd2>
 8003d64:	2301      	movs	r3, #1
 8003d66:	425b      	negs	r3, r3
 8003d68:	e7d0      	b.n	8003d0c <_svfiprintf_r+0x12c>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	200a      	movs	r0, #10
 8003d6e:	001a      	movs	r2, r3
 8003d70:	3501      	adds	r5, #1
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	7829      	ldrb	r1, [r5, #0]
 8003d76:	1c6e      	adds	r6, r5, #1
 8003d78:	3930      	subs	r1, #48	; 0x30
 8003d7a:	2909      	cmp	r1, #9
 8003d7c:	d903      	bls.n	8003d86 <_svfiprintf_r+0x1a6>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0c5      	beq.n	8003d0e <_svfiprintf_r+0x12e>
 8003d82:	9209      	str	r2, [sp, #36]	; 0x24
 8003d84:	e7c3      	b.n	8003d0e <_svfiprintf_r+0x12e>
 8003d86:	4342      	muls	r2, r0
 8003d88:	0035      	movs	r5, r6
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	1852      	adds	r2, r2, r1
 8003d8e:	e7f1      	b.n	8003d74 <_svfiprintf_r+0x194>
 8003d90:	ab07      	add	r3, sp, #28
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	003a      	movs	r2, r7
 8003d96:	0021      	movs	r1, r4
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <_svfiprintf_r+0x1fc>)
 8003d9a:	9803      	ldr	r0, [sp, #12]
 8003d9c:	e000      	b.n	8003da0 <_svfiprintf_r+0x1c0>
 8003d9e:	bf00      	nop
 8003da0:	9004      	str	r0, [sp, #16]
 8003da2:	9b04      	ldr	r3, [sp, #16]
 8003da4:	3301      	adds	r3, #1
 8003da6:	d1d3      	bne.n	8003d50 <_svfiprintf_r+0x170>
 8003da8:	89bb      	ldrh	r3, [r7, #12]
 8003daa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003dac:	065b      	lsls	r3, r3, #25
 8003dae:	d400      	bmi.n	8003db2 <_svfiprintf_r+0x1d2>
 8003db0:	e72d      	b.n	8003c0e <_svfiprintf_r+0x2e>
 8003db2:	2001      	movs	r0, #1
 8003db4:	4240      	negs	r0, r0
 8003db6:	e72a      	b.n	8003c0e <_svfiprintf_r+0x2e>
 8003db8:	ab07      	add	r3, sp, #28
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	003a      	movs	r2, r7
 8003dbe:	0021      	movs	r1, r4
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <_svfiprintf_r+0x1fc>)
 8003dc2:	9803      	ldr	r0, [sp, #12]
 8003dc4:	f000 f87c 	bl	8003ec0 <_printf_i>
 8003dc8:	e7ea      	b.n	8003da0 <_svfiprintf_r+0x1c0>
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	080044c0 	.word	0x080044c0
 8003dd0:	080044c6 	.word	0x080044c6
 8003dd4:	080044ca 	.word	0x080044ca
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	08003b1d 	.word	0x08003b1d

08003de0 <_printf_common>:
 8003de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003de2:	0015      	movs	r5, r2
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	688a      	ldr	r2, [r1, #8]
 8003de8:	690b      	ldr	r3, [r1, #16]
 8003dea:	000c      	movs	r4, r1
 8003dec:	9000      	str	r0, [sp, #0]
 8003dee:	4293      	cmp	r3, r2
 8003df0:	da00      	bge.n	8003df4 <_printf_common+0x14>
 8003df2:	0013      	movs	r3, r2
 8003df4:	0022      	movs	r2, r4
 8003df6:	602b      	str	r3, [r5, #0]
 8003df8:	3243      	adds	r2, #67	; 0x43
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	d001      	beq.n	8003e04 <_printf_common+0x24>
 8003e00:	3301      	adds	r3, #1
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	069b      	lsls	r3, r3, #26
 8003e08:	d502      	bpl.n	8003e10 <_printf_common+0x30>
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	6822      	ldr	r2, [r4, #0]
 8003e12:	2306      	movs	r3, #6
 8003e14:	0017      	movs	r7, r2
 8003e16:	401f      	ands	r7, r3
 8003e18:	421a      	tst	r2, r3
 8003e1a:	d027      	beq.n	8003e6c <_printf_common+0x8c>
 8003e1c:	0023      	movs	r3, r4
 8003e1e:	3343      	adds	r3, #67	; 0x43
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	4193      	sbcs	r3, r2
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	0692      	lsls	r2, r2, #26
 8003e2a:	d430      	bmi.n	8003e8e <_printf_common+0xae>
 8003e2c:	0022      	movs	r2, r4
 8003e2e:	9901      	ldr	r1, [sp, #4]
 8003e30:	9800      	ldr	r0, [sp, #0]
 8003e32:	9e08      	ldr	r6, [sp, #32]
 8003e34:	3243      	adds	r2, #67	; 0x43
 8003e36:	47b0      	blx	r6
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d025      	beq.n	8003e88 <_printf_common+0xa8>
 8003e3c:	2306      	movs	r3, #6
 8003e3e:	6820      	ldr	r0, [r4, #0]
 8003e40:	682a      	ldr	r2, [r5, #0]
 8003e42:	68e1      	ldr	r1, [r4, #12]
 8003e44:	2500      	movs	r5, #0
 8003e46:	4003      	ands	r3, r0
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d103      	bne.n	8003e54 <_printf_common+0x74>
 8003e4c:	1a8d      	subs	r5, r1, r2
 8003e4e:	43eb      	mvns	r3, r5
 8003e50:	17db      	asrs	r3, r3, #31
 8003e52:	401d      	ands	r5, r3
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	6922      	ldr	r2, [r4, #16]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	dd01      	ble.n	8003e60 <_printf_common+0x80>
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	18ed      	adds	r5, r5, r3
 8003e60:	2700      	movs	r7, #0
 8003e62:	42bd      	cmp	r5, r7
 8003e64:	d120      	bne.n	8003ea8 <_printf_common+0xc8>
 8003e66:	2000      	movs	r0, #0
 8003e68:	e010      	b.n	8003e8c <_printf_common+0xac>
 8003e6a:	3701      	adds	r7, #1
 8003e6c:	68e3      	ldr	r3, [r4, #12]
 8003e6e:	682a      	ldr	r2, [r5, #0]
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	42bb      	cmp	r3, r7
 8003e74:	ddd2      	ble.n	8003e1c <_printf_common+0x3c>
 8003e76:	0022      	movs	r2, r4
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9901      	ldr	r1, [sp, #4]
 8003e7c:	9800      	ldr	r0, [sp, #0]
 8003e7e:	9e08      	ldr	r6, [sp, #32]
 8003e80:	3219      	adds	r2, #25
 8003e82:	47b0      	blx	r6
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d1f0      	bne.n	8003e6a <_printf_common+0x8a>
 8003e88:	2001      	movs	r0, #1
 8003e8a:	4240      	negs	r0, r0
 8003e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e8e:	2030      	movs	r0, #48	; 0x30
 8003e90:	18e1      	adds	r1, r4, r3
 8003e92:	3143      	adds	r1, #67	; 0x43
 8003e94:	7008      	strb	r0, [r1, #0]
 8003e96:	0021      	movs	r1, r4
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	3145      	adds	r1, #69	; 0x45
 8003e9c:	7809      	ldrb	r1, [r1, #0]
 8003e9e:	18a2      	adds	r2, r4, r2
 8003ea0:	3243      	adds	r2, #67	; 0x43
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	7011      	strb	r1, [r2, #0]
 8003ea6:	e7c1      	b.n	8003e2c <_printf_common+0x4c>
 8003ea8:	0022      	movs	r2, r4
 8003eaa:	2301      	movs	r3, #1
 8003eac:	9901      	ldr	r1, [sp, #4]
 8003eae:	9800      	ldr	r0, [sp, #0]
 8003eb0:	9e08      	ldr	r6, [sp, #32]
 8003eb2:	321a      	adds	r2, #26
 8003eb4:	47b0      	blx	r6
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	d0e6      	beq.n	8003e88 <_printf_common+0xa8>
 8003eba:	3701      	adds	r7, #1
 8003ebc:	e7d1      	b.n	8003e62 <_printf_common+0x82>
	...

08003ec0 <_printf_i>:
 8003ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec2:	b08b      	sub	sp, #44	; 0x2c
 8003ec4:	9206      	str	r2, [sp, #24]
 8003ec6:	000a      	movs	r2, r1
 8003ec8:	3243      	adds	r2, #67	; 0x43
 8003eca:	9307      	str	r3, [sp, #28]
 8003ecc:	9005      	str	r0, [sp, #20]
 8003ece:	9204      	str	r2, [sp, #16]
 8003ed0:	7e0a      	ldrb	r2, [r1, #24]
 8003ed2:	000c      	movs	r4, r1
 8003ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ed6:	2a78      	cmp	r2, #120	; 0x78
 8003ed8:	d807      	bhi.n	8003eea <_printf_i+0x2a>
 8003eda:	2a62      	cmp	r2, #98	; 0x62
 8003edc:	d809      	bhi.n	8003ef2 <_printf_i+0x32>
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d100      	bne.n	8003ee4 <_printf_i+0x24>
 8003ee2:	e0c1      	b.n	8004068 <_printf_i+0x1a8>
 8003ee4:	2a58      	cmp	r2, #88	; 0x58
 8003ee6:	d100      	bne.n	8003eea <_printf_i+0x2a>
 8003ee8:	e08c      	b.n	8004004 <_printf_i+0x144>
 8003eea:	0026      	movs	r6, r4
 8003eec:	3642      	adds	r6, #66	; 0x42
 8003eee:	7032      	strb	r2, [r6, #0]
 8003ef0:	e022      	b.n	8003f38 <_printf_i+0x78>
 8003ef2:	0010      	movs	r0, r2
 8003ef4:	3863      	subs	r0, #99	; 0x63
 8003ef6:	2815      	cmp	r0, #21
 8003ef8:	d8f7      	bhi.n	8003eea <_printf_i+0x2a>
 8003efa:	f7fc f905 	bl	8000108 <__gnu_thumb1_case_shi>
 8003efe:	0016      	.short	0x0016
 8003f00:	fff6001f 	.word	0xfff6001f
 8003f04:	fff6fff6 	.word	0xfff6fff6
 8003f08:	001ffff6 	.word	0x001ffff6
 8003f0c:	fff6fff6 	.word	0xfff6fff6
 8003f10:	fff6fff6 	.word	0xfff6fff6
 8003f14:	003600a8 	.word	0x003600a8
 8003f18:	fff6009a 	.word	0xfff6009a
 8003f1c:	00b9fff6 	.word	0x00b9fff6
 8003f20:	0036fff6 	.word	0x0036fff6
 8003f24:	fff6fff6 	.word	0xfff6fff6
 8003f28:	009e      	.short	0x009e
 8003f2a:	0026      	movs	r6, r4
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	3642      	adds	r6, #66	; 0x42
 8003f30:	1d11      	adds	r1, r2, #4
 8003f32:	6019      	str	r1, [r3, #0]
 8003f34:	6813      	ldr	r3, [r2, #0]
 8003f36:	7033      	strb	r3, [r6, #0]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0a7      	b.n	800408c <_printf_i+0x1cc>
 8003f3c:	6808      	ldr	r0, [r1, #0]
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	1d0a      	adds	r2, r1, #4
 8003f42:	0605      	lsls	r5, r0, #24
 8003f44:	d50b      	bpl.n	8003f5e <_printf_i+0x9e>
 8003f46:	680d      	ldr	r5, [r1, #0]
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	da03      	bge.n	8003f56 <_printf_i+0x96>
 8003f4e:	232d      	movs	r3, #45	; 0x2d
 8003f50:	9a04      	ldr	r2, [sp, #16]
 8003f52:	426d      	negs	r5, r5
 8003f54:	7013      	strb	r3, [r2, #0]
 8003f56:	4b61      	ldr	r3, [pc, #388]	; (80040dc <_printf_i+0x21c>)
 8003f58:	270a      	movs	r7, #10
 8003f5a:	9303      	str	r3, [sp, #12]
 8003f5c:	e01b      	b.n	8003f96 <_printf_i+0xd6>
 8003f5e:	680d      	ldr	r5, [r1, #0]
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	0641      	lsls	r1, r0, #25
 8003f64:	d5f1      	bpl.n	8003f4a <_printf_i+0x8a>
 8003f66:	b22d      	sxth	r5, r5
 8003f68:	e7ef      	b.n	8003f4a <_printf_i+0x8a>
 8003f6a:	680d      	ldr	r5, [r1, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	1d08      	adds	r0, r1, #4
 8003f70:	6018      	str	r0, [r3, #0]
 8003f72:	062e      	lsls	r6, r5, #24
 8003f74:	d501      	bpl.n	8003f7a <_printf_i+0xba>
 8003f76:	680d      	ldr	r5, [r1, #0]
 8003f78:	e003      	b.n	8003f82 <_printf_i+0xc2>
 8003f7a:	066d      	lsls	r5, r5, #25
 8003f7c:	d5fb      	bpl.n	8003f76 <_printf_i+0xb6>
 8003f7e:	680d      	ldr	r5, [r1, #0]
 8003f80:	b2ad      	uxth	r5, r5
 8003f82:	4b56      	ldr	r3, [pc, #344]	; (80040dc <_printf_i+0x21c>)
 8003f84:	2708      	movs	r7, #8
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	2a6f      	cmp	r2, #111	; 0x6f
 8003f8a:	d000      	beq.n	8003f8e <_printf_i+0xce>
 8003f8c:	3702      	adds	r7, #2
 8003f8e:	0023      	movs	r3, r4
 8003f90:	2200      	movs	r2, #0
 8003f92:	3343      	adds	r3, #67	; 0x43
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	6863      	ldr	r3, [r4, #4]
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db03      	blt.n	8003fa6 <_printf_i+0xe6>
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	6821      	ldr	r1, [r4, #0]
 8003fa2:	4391      	bics	r1, r2
 8003fa4:	6021      	str	r1, [r4, #0]
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	d102      	bne.n	8003fb0 <_printf_i+0xf0>
 8003faa:	9e04      	ldr	r6, [sp, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00c      	beq.n	8003fca <_printf_i+0x10a>
 8003fb0:	9e04      	ldr	r6, [sp, #16]
 8003fb2:	0028      	movs	r0, r5
 8003fb4:	0039      	movs	r1, r7
 8003fb6:	f7fc f937 	bl	8000228 <__aeabi_uidivmod>
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	3e01      	subs	r6, #1
 8003fbe:	5c5b      	ldrb	r3, [r3, r1]
 8003fc0:	7033      	strb	r3, [r6, #0]
 8003fc2:	002b      	movs	r3, r5
 8003fc4:	0005      	movs	r5, r0
 8003fc6:	429f      	cmp	r7, r3
 8003fc8:	d9f3      	bls.n	8003fb2 <_printf_i+0xf2>
 8003fca:	2f08      	cmp	r7, #8
 8003fcc:	d109      	bne.n	8003fe2 <_printf_i+0x122>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	07db      	lsls	r3, r3, #31
 8003fd2:	d506      	bpl.n	8003fe2 <_printf_i+0x122>
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	6922      	ldr	r2, [r4, #16]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	dc02      	bgt.n	8003fe2 <_printf_i+0x122>
 8003fdc:	2330      	movs	r3, #48	; 0x30
 8003fde:	3e01      	subs	r6, #1
 8003fe0:	7033      	strb	r3, [r6, #0]
 8003fe2:	9b04      	ldr	r3, [sp, #16]
 8003fe4:	1b9b      	subs	r3, r3, r6
 8003fe6:	6123      	str	r3, [r4, #16]
 8003fe8:	9b07      	ldr	r3, [sp, #28]
 8003fea:	0021      	movs	r1, r4
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	9805      	ldr	r0, [sp, #20]
 8003ff0:	9b06      	ldr	r3, [sp, #24]
 8003ff2:	aa09      	add	r2, sp, #36	; 0x24
 8003ff4:	f7ff fef4 	bl	8003de0 <_printf_common>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d14c      	bne.n	8004096 <_printf_i+0x1d6>
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	4240      	negs	r0, r0
 8004000:	b00b      	add	sp, #44	; 0x2c
 8004002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004004:	3145      	adds	r1, #69	; 0x45
 8004006:	700a      	strb	r2, [r1, #0]
 8004008:	4a34      	ldr	r2, [pc, #208]	; (80040dc <_printf_i+0x21c>)
 800400a:	9203      	str	r2, [sp, #12]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	6821      	ldr	r1, [r4, #0]
 8004010:	ca20      	ldmia	r2!, {r5}
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	0608      	lsls	r0, r1, #24
 8004016:	d516      	bpl.n	8004046 <_printf_i+0x186>
 8004018:	07cb      	lsls	r3, r1, #31
 800401a:	d502      	bpl.n	8004022 <_printf_i+0x162>
 800401c:	2320      	movs	r3, #32
 800401e:	4319      	orrs	r1, r3
 8004020:	6021      	str	r1, [r4, #0]
 8004022:	2710      	movs	r7, #16
 8004024:	2d00      	cmp	r5, #0
 8004026:	d1b2      	bne.n	8003f8e <_printf_i+0xce>
 8004028:	2320      	movs	r3, #32
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	439a      	bics	r2, r3
 800402e:	6022      	str	r2, [r4, #0]
 8004030:	e7ad      	b.n	8003f8e <_printf_i+0xce>
 8004032:	2220      	movs	r2, #32
 8004034:	6809      	ldr	r1, [r1, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	0022      	movs	r2, r4
 800403c:	2178      	movs	r1, #120	; 0x78
 800403e:	3245      	adds	r2, #69	; 0x45
 8004040:	7011      	strb	r1, [r2, #0]
 8004042:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <_printf_i+0x220>)
 8004044:	e7e1      	b.n	800400a <_printf_i+0x14a>
 8004046:	0648      	lsls	r0, r1, #25
 8004048:	d5e6      	bpl.n	8004018 <_printf_i+0x158>
 800404a:	b2ad      	uxth	r5, r5
 800404c:	e7e4      	b.n	8004018 <_printf_i+0x158>
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	680d      	ldr	r5, [r1, #0]
 8004052:	1d10      	adds	r0, r2, #4
 8004054:	6949      	ldr	r1, [r1, #20]
 8004056:	6018      	str	r0, [r3, #0]
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	062e      	lsls	r6, r5, #24
 800405c:	d501      	bpl.n	8004062 <_printf_i+0x1a2>
 800405e:	6019      	str	r1, [r3, #0]
 8004060:	e002      	b.n	8004068 <_printf_i+0x1a8>
 8004062:	066d      	lsls	r5, r5, #25
 8004064:	d5fb      	bpl.n	800405e <_printf_i+0x19e>
 8004066:	8019      	strh	r1, [r3, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	9e04      	ldr	r6, [sp, #16]
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	e7bb      	b.n	8003fe8 <_printf_i+0x128>
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	1d11      	adds	r1, r2, #4
 8004074:	6019      	str	r1, [r3, #0]
 8004076:	6816      	ldr	r6, [r2, #0]
 8004078:	2100      	movs	r1, #0
 800407a:	0030      	movs	r0, r6
 800407c:	6862      	ldr	r2, [r4, #4]
 800407e:	f000 f831 	bl	80040e4 <memchr>
 8004082:	2800      	cmp	r0, #0
 8004084:	d001      	beq.n	800408a <_printf_i+0x1ca>
 8004086:	1b80      	subs	r0, r0, r6
 8004088:	6060      	str	r0, [r4, #4]
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	6123      	str	r3, [r4, #16]
 800408e:	2300      	movs	r3, #0
 8004090:	9a04      	ldr	r2, [sp, #16]
 8004092:	7013      	strb	r3, [r2, #0]
 8004094:	e7a8      	b.n	8003fe8 <_printf_i+0x128>
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	0032      	movs	r2, r6
 800409a:	9906      	ldr	r1, [sp, #24]
 800409c:	9805      	ldr	r0, [sp, #20]
 800409e:	9d07      	ldr	r5, [sp, #28]
 80040a0:	47a8      	blx	r5
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	d0aa      	beq.n	8003ffc <_printf_i+0x13c>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	079b      	lsls	r3, r3, #30
 80040aa:	d415      	bmi.n	80040d8 <_printf_i+0x218>
 80040ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ae:	68e0      	ldr	r0, [r4, #12]
 80040b0:	4298      	cmp	r0, r3
 80040b2:	daa5      	bge.n	8004000 <_printf_i+0x140>
 80040b4:	0018      	movs	r0, r3
 80040b6:	e7a3      	b.n	8004000 <_printf_i+0x140>
 80040b8:	0022      	movs	r2, r4
 80040ba:	2301      	movs	r3, #1
 80040bc:	9906      	ldr	r1, [sp, #24]
 80040be:	9805      	ldr	r0, [sp, #20]
 80040c0:	9e07      	ldr	r6, [sp, #28]
 80040c2:	3219      	adds	r2, #25
 80040c4:	47b0      	blx	r6
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	d098      	beq.n	8003ffc <_printf_i+0x13c>
 80040ca:	3501      	adds	r5, #1
 80040cc:	68e3      	ldr	r3, [r4, #12]
 80040ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	42ab      	cmp	r3, r5
 80040d4:	dcf0      	bgt.n	80040b8 <_printf_i+0x1f8>
 80040d6:	e7e9      	b.n	80040ac <_printf_i+0x1ec>
 80040d8:	2500      	movs	r5, #0
 80040da:	e7f7      	b.n	80040cc <_printf_i+0x20c>
 80040dc:	080044d1 	.word	0x080044d1
 80040e0:	080044e2 	.word	0x080044e2

080040e4 <memchr>:
 80040e4:	b2c9      	uxtb	r1, r1
 80040e6:	1882      	adds	r2, r0, r2
 80040e8:	4290      	cmp	r0, r2
 80040ea:	d101      	bne.n	80040f0 <memchr+0xc>
 80040ec:	2000      	movs	r0, #0
 80040ee:	4770      	bx	lr
 80040f0:	7803      	ldrb	r3, [r0, #0]
 80040f2:	428b      	cmp	r3, r1
 80040f4:	d0fb      	beq.n	80040ee <memchr+0xa>
 80040f6:	3001      	adds	r0, #1
 80040f8:	e7f6      	b.n	80040e8 <memchr+0x4>

080040fa <memcpy>:
 80040fa:	2300      	movs	r3, #0
 80040fc:	b510      	push	{r4, lr}
 80040fe:	429a      	cmp	r2, r3
 8004100:	d100      	bne.n	8004104 <memcpy+0xa>
 8004102:	bd10      	pop	{r4, pc}
 8004104:	5ccc      	ldrb	r4, [r1, r3]
 8004106:	54c4      	strb	r4, [r0, r3]
 8004108:	3301      	adds	r3, #1
 800410a:	e7f8      	b.n	80040fe <memcpy+0x4>

0800410c <memmove>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4288      	cmp	r0, r1
 8004110:	d902      	bls.n	8004118 <memmove+0xc>
 8004112:	188b      	adds	r3, r1, r2
 8004114:	4298      	cmp	r0, r3
 8004116:	d303      	bcc.n	8004120 <memmove+0x14>
 8004118:	2300      	movs	r3, #0
 800411a:	e007      	b.n	800412c <memmove+0x20>
 800411c:	5c8b      	ldrb	r3, [r1, r2]
 800411e:	5483      	strb	r3, [r0, r2]
 8004120:	3a01      	subs	r2, #1
 8004122:	d2fb      	bcs.n	800411c <memmove+0x10>
 8004124:	bd10      	pop	{r4, pc}
 8004126:	5ccc      	ldrb	r4, [r1, r3]
 8004128:	54c4      	strb	r4, [r0, r3]
 800412a:	3301      	adds	r3, #1
 800412c:	429a      	cmp	r2, r3
 800412e:	d1fa      	bne.n	8004126 <memmove+0x1a>
 8004130:	e7f8      	b.n	8004124 <memmove+0x18>
	...

08004134 <_free_r>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	0005      	movs	r5, r0
 8004138:	2900      	cmp	r1, #0
 800413a:	d010      	beq.n	800415e <_free_r+0x2a>
 800413c:	1f0c      	subs	r4, r1, #4
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	da00      	bge.n	8004146 <_free_r+0x12>
 8004144:	18e4      	adds	r4, r4, r3
 8004146:	0028      	movs	r0, r5
 8004148:	f000 f918 	bl	800437c <__malloc_lock>
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <_free_r+0x90>)
 800414e:	6813      	ldr	r3, [r2, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <_free_r+0x2c>
 8004154:	6063      	str	r3, [r4, #4]
 8004156:	6014      	str	r4, [r2, #0]
 8004158:	0028      	movs	r0, r5
 800415a:	f000 f917 	bl	800438c <__malloc_unlock>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	42a3      	cmp	r3, r4
 8004162:	d908      	bls.n	8004176 <_free_r+0x42>
 8004164:	6821      	ldr	r1, [r4, #0]
 8004166:	1860      	adds	r0, r4, r1
 8004168:	4283      	cmp	r3, r0
 800416a:	d1f3      	bne.n	8004154 <_free_r+0x20>
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	1841      	adds	r1, r0, r1
 8004172:	6021      	str	r1, [r4, #0]
 8004174:	e7ee      	b.n	8004154 <_free_r+0x20>
 8004176:	001a      	movs	r2, r3
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <_free_r+0x4e>
 800417e:	42a3      	cmp	r3, r4
 8004180:	d9f9      	bls.n	8004176 <_free_r+0x42>
 8004182:	6811      	ldr	r1, [r2, #0]
 8004184:	1850      	adds	r0, r2, r1
 8004186:	42a0      	cmp	r0, r4
 8004188:	d10b      	bne.n	80041a2 <_free_r+0x6e>
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	1809      	adds	r1, r1, r0
 800418e:	1850      	adds	r0, r2, r1
 8004190:	6011      	str	r1, [r2, #0]
 8004192:	4283      	cmp	r3, r0
 8004194:	d1e0      	bne.n	8004158 <_free_r+0x24>
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	1841      	adds	r1, r0, r1
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	6053      	str	r3, [r2, #4]
 80041a0:	e7da      	b.n	8004158 <_free_r+0x24>
 80041a2:	42a0      	cmp	r0, r4
 80041a4:	d902      	bls.n	80041ac <_free_r+0x78>
 80041a6:	230c      	movs	r3, #12
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	e7d5      	b.n	8004158 <_free_r+0x24>
 80041ac:	6821      	ldr	r1, [r4, #0]
 80041ae:	1860      	adds	r0, r4, r1
 80041b0:	4283      	cmp	r3, r0
 80041b2:	d103      	bne.n	80041bc <_free_r+0x88>
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	1841      	adds	r1, r0, r1
 80041ba:	6021      	str	r1, [r4, #0]
 80041bc:	6063      	str	r3, [r4, #4]
 80041be:	6054      	str	r4, [r2, #4]
 80041c0:	e7ca      	b.n	8004158 <_free_r+0x24>
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	200001c4 	.word	0x200001c4

080041c8 <sbrk_aligned>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4e0f      	ldr	r6, [pc, #60]	; (8004208 <sbrk_aligned+0x40>)
 80041cc:	000d      	movs	r5, r1
 80041ce:	6831      	ldr	r1, [r6, #0]
 80041d0:	0004      	movs	r4, r0
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d102      	bne.n	80041dc <sbrk_aligned+0x14>
 80041d6:	f000 f8bf 	bl	8004358 <_sbrk_r>
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	0029      	movs	r1, r5
 80041de:	0020      	movs	r0, r4
 80041e0:	f000 f8ba 	bl	8004358 <_sbrk_r>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d00a      	beq.n	80041fe <sbrk_aligned+0x36>
 80041e8:	2303      	movs	r3, #3
 80041ea:	1cc5      	adds	r5, r0, #3
 80041ec:	439d      	bics	r5, r3
 80041ee:	42a8      	cmp	r0, r5
 80041f0:	d007      	beq.n	8004202 <sbrk_aligned+0x3a>
 80041f2:	1a29      	subs	r1, r5, r0
 80041f4:	0020      	movs	r0, r4
 80041f6:	f000 f8af 	bl	8004358 <_sbrk_r>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d101      	bne.n	8004202 <sbrk_aligned+0x3a>
 80041fe:	2501      	movs	r5, #1
 8004200:	426d      	negs	r5, r5
 8004202:	0028      	movs	r0, r5
 8004204:	bd70      	pop	{r4, r5, r6, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	200001c8 	.word	0x200001c8

0800420c <_malloc_r>:
 800420c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800420e:	2203      	movs	r2, #3
 8004210:	1ccb      	adds	r3, r1, #3
 8004212:	4393      	bics	r3, r2
 8004214:	3308      	adds	r3, #8
 8004216:	0006      	movs	r6, r0
 8004218:	001f      	movs	r7, r3
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d232      	bcs.n	8004284 <_malloc_r+0x78>
 800421e:	270c      	movs	r7, #12
 8004220:	42b9      	cmp	r1, r7
 8004222:	d831      	bhi.n	8004288 <_malloc_r+0x7c>
 8004224:	0030      	movs	r0, r6
 8004226:	f000 f8a9 	bl	800437c <__malloc_lock>
 800422a:	4d32      	ldr	r5, [pc, #200]	; (80042f4 <_malloc_r+0xe8>)
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	001c      	movs	r4, r3
 8004230:	2c00      	cmp	r4, #0
 8004232:	d12e      	bne.n	8004292 <_malloc_r+0x86>
 8004234:	0039      	movs	r1, r7
 8004236:	0030      	movs	r0, r6
 8004238:	f7ff ffc6 	bl	80041c8 <sbrk_aligned>
 800423c:	0004      	movs	r4, r0
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d11e      	bne.n	8004280 <_malloc_r+0x74>
 8004242:	682c      	ldr	r4, [r5, #0]
 8004244:	0025      	movs	r5, r4
 8004246:	2d00      	cmp	r5, #0
 8004248:	d14a      	bne.n	80042e0 <_malloc_r+0xd4>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	0029      	movs	r1, r5
 800424e:	18e3      	adds	r3, r4, r3
 8004250:	0030      	movs	r0, r6
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	f000 f880 	bl	8004358 <_sbrk_r>
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	4283      	cmp	r3, r0
 800425c:	d143      	bne.n	80042e6 <_malloc_r+0xda>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	3703      	adds	r7, #3
 8004262:	1aff      	subs	r7, r7, r3
 8004264:	2303      	movs	r3, #3
 8004266:	439f      	bics	r7, r3
 8004268:	3708      	adds	r7, #8
 800426a:	2f0c      	cmp	r7, #12
 800426c:	d200      	bcs.n	8004270 <_malloc_r+0x64>
 800426e:	270c      	movs	r7, #12
 8004270:	0039      	movs	r1, r7
 8004272:	0030      	movs	r0, r6
 8004274:	f7ff ffa8 	bl	80041c8 <sbrk_aligned>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d034      	beq.n	80042e6 <_malloc_r+0xda>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	19df      	adds	r7, r3, r7
 8004280:	6027      	str	r7, [r4, #0]
 8004282:	e013      	b.n	80042ac <_malloc_r+0xa0>
 8004284:	2b00      	cmp	r3, #0
 8004286:	dacb      	bge.n	8004220 <_malloc_r+0x14>
 8004288:	230c      	movs	r3, #12
 800428a:	2500      	movs	r5, #0
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	0028      	movs	r0, r5
 8004290:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	1bd1      	subs	r1, r2, r7
 8004296:	d420      	bmi.n	80042da <_malloc_r+0xce>
 8004298:	290b      	cmp	r1, #11
 800429a:	d917      	bls.n	80042cc <_malloc_r+0xc0>
 800429c:	19e2      	adds	r2, r4, r7
 800429e:	6027      	str	r7, [r4, #0]
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d111      	bne.n	80042c8 <_malloc_r+0xbc>
 80042a4:	602a      	str	r2, [r5, #0]
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	0030      	movs	r0, r6
 80042ae:	0025      	movs	r5, r4
 80042b0:	f000 f86c 	bl	800438c <__malloc_unlock>
 80042b4:	2207      	movs	r2, #7
 80042b6:	350b      	adds	r5, #11
 80042b8:	1d23      	adds	r3, r4, #4
 80042ba:	4395      	bics	r5, r2
 80042bc:	1aea      	subs	r2, r5, r3
 80042be:	429d      	cmp	r5, r3
 80042c0:	d0e5      	beq.n	800428e <_malloc_r+0x82>
 80042c2:	1b5b      	subs	r3, r3, r5
 80042c4:	50a3      	str	r3, [r4, r2]
 80042c6:	e7e2      	b.n	800428e <_malloc_r+0x82>
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	e7ec      	b.n	80042a6 <_malloc_r+0x9a>
 80042cc:	6862      	ldr	r2, [r4, #4]
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	d101      	bne.n	80042d6 <_malloc_r+0xca>
 80042d2:	602a      	str	r2, [r5, #0]
 80042d4:	e7ea      	b.n	80042ac <_malloc_r+0xa0>
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	e7e8      	b.n	80042ac <_malloc_r+0xa0>
 80042da:	0023      	movs	r3, r4
 80042dc:	6864      	ldr	r4, [r4, #4]
 80042de:	e7a7      	b.n	8004230 <_malloc_r+0x24>
 80042e0:	002c      	movs	r4, r5
 80042e2:	686d      	ldr	r5, [r5, #4]
 80042e4:	e7af      	b.n	8004246 <_malloc_r+0x3a>
 80042e6:	230c      	movs	r3, #12
 80042e8:	0030      	movs	r0, r6
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	f000 f84e 	bl	800438c <__malloc_unlock>
 80042f0:	e7cd      	b.n	800428e <_malloc_r+0x82>
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	200001c4 	.word	0x200001c4

080042f8 <_realloc_r>:
 80042f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042fa:	0007      	movs	r7, r0
 80042fc:	000e      	movs	r6, r1
 80042fe:	0014      	movs	r4, r2
 8004300:	2900      	cmp	r1, #0
 8004302:	d105      	bne.n	8004310 <_realloc_r+0x18>
 8004304:	0011      	movs	r1, r2
 8004306:	f7ff ff81 	bl	800420c <_malloc_r>
 800430a:	0005      	movs	r5, r0
 800430c:	0028      	movs	r0, r5
 800430e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004310:	2a00      	cmp	r2, #0
 8004312:	d103      	bne.n	800431c <_realloc_r+0x24>
 8004314:	f7ff ff0e 	bl	8004134 <_free_r>
 8004318:	0025      	movs	r5, r4
 800431a:	e7f7      	b.n	800430c <_realloc_r+0x14>
 800431c:	f000 f83e 	bl	800439c <_malloc_usable_size_r>
 8004320:	9001      	str	r0, [sp, #4]
 8004322:	4284      	cmp	r4, r0
 8004324:	d803      	bhi.n	800432e <_realloc_r+0x36>
 8004326:	0035      	movs	r5, r6
 8004328:	0843      	lsrs	r3, r0, #1
 800432a:	42a3      	cmp	r3, r4
 800432c:	d3ee      	bcc.n	800430c <_realloc_r+0x14>
 800432e:	0021      	movs	r1, r4
 8004330:	0038      	movs	r0, r7
 8004332:	f7ff ff6b 	bl	800420c <_malloc_r>
 8004336:	1e05      	subs	r5, r0, #0
 8004338:	d0e8      	beq.n	800430c <_realloc_r+0x14>
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	0022      	movs	r2, r4
 800433e:	429c      	cmp	r4, r3
 8004340:	d900      	bls.n	8004344 <_realloc_r+0x4c>
 8004342:	001a      	movs	r2, r3
 8004344:	0031      	movs	r1, r6
 8004346:	0028      	movs	r0, r5
 8004348:	f7ff fed7 	bl	80040fa <memcpy>
 800434c:	0031      	movs	r1, r6
 800434e:	0038      	movs	r0, r7
 8004350:	f7ff fef0 	bl	8004134 <_free_r>
 8004354:	e7da      	b.n	800430c <_realloc_r+0x14>
	...

08004358 <_sbrk_r>:
 8004358:	2300      	movs	r3, #0
 800435a:	b570      	push	{r4, r5, r6, lr}
 800435c:	4d06      	ldr	r5, [pc, #24]	; (8004378 <_sbrk_r+0x20>)
 800435e:	0004      	movs	r4, r0
 8004360:	0008      	movs	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fd f8b0 	bl	80014c8 <_sbrk>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d103      	bne.n	8004374 <_sbrk_r+0x1c>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d000      	beq.n	8004374 <_sbrk_r+0x1c>
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	200001cc 	.word	0x200001cc

0800437c <__malloc_lock>:
 800437c:	b510      	push	{r4, lr}
 800437e:	4802      	ldr	r0, [pc, #8]	; (8004388 <__malloc_lock+0xc>)
 8004380:	f000 f814 	bl	80043ac <__retarget_lock_acquire_recursive>
 8004384:	bd10      	pop	{r4, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	200001d0 	.word	0x200001d0

0800438c <__malloc_unlock>:
 800438c:	b510      	push	{r4, lr}
 800438e:	4802      	ldr	r0, [pc, #8]	; (8004398 <__malloc_unlock+0xc>)
 8004390:	f000 f80d 	bl	80043ae <__retarget_lock_release_recursive>
 8004394:	bd10      	pop	{r4, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	200001d0 	.word	0x200001d0

0800439c <_malloc_usable_size_r>:
 800439c:	1f0b      	subs	r3, r1, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1f18      	subs	r0, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da01      	bge.n	80043aa <_malloc_usable_size_r+0xe>
 80043a6:	580b      	ldr	r3, [r1, r0]
 80043a8:	18c0      	adds	r0, r0, r3
 80043aa:	4770      	bx	lr

080043ac <__retarget_lock_acquire_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_release_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <_init>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr

080043bc <_fini>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr
